{"version":3,"file":"UseInstance-CwLXxgXl.js","sources":["../../../../../../frontend/src/hooks/UseInstance.tsx"],"sourcesContent":["import {\n  type QueryObserverResult,\n  type UseQueryResult,\n  useQuery\n} from '@tanstack/react-query';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport type { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { PathParams } from '@lib/types/Core';\nimport { useApi } from '../contexts/ApiContext';\n\nexport interface UseInstanceResult {\n  instance: any;\n  setInstance: (instance: any) => void;\n  refreshInstance: () => void;\n  refreshInstancePromise: () => Promise<QueryObserverResult<any, any>>;\n  instanceQuery: UseQueryResult;\n  isLoaded: boolean;\n}\n\n/**\n * Custom hook for loading a single instance of an instance from the API\n *\n * - Queries the API for a single instance of an object, and returns the result.\n * - Provides a callback function to refresh the instance\n *\n * To use this hook:\n * const { instance, refreshInstance } = useInstance(url: string, pk: number)\n */\n\nexport function useInstance<T = any>({\n  endpoint,\n  pk,\n  params = {},\n  defaultValue = {},\n  pathParams,\n  disabled,\n  hasPrimaryKey = true,\n  refetchOnMount = true,\n  refetchOnWindowFocus = false,\n  updateInterval\n}: {\n  endpoint: ApiEndpoints;\n  pk?: string | number | undefined;\n  hasPrimaryKey?: boolean;\n  params?: any;\n  pathParams?: PathParams;\n  disabled?: boolean;\n  defaultValue?: any;\n  refetchOnMount?: boolean;\n  refetchOnWindowFocus?: boolean;\n  updateInterval?: number;\n}): UseInstanceResult {\n  const api = useApi();\n\n  const [instance, setInstance] = useState<T | undefined>(defaultValue);\n\n  const instanceQuery = useQuery<T>({\n    enabled: !disabled,\n    queryKey: [\n      'instance',\n      endpoint,\n      pk,\n      JSON.stringify(params),\n      JSON.stringify(pathParams),\n      disabled\n    ],\n    retry: (failureCount, error: any) => {\n      // If it's a 404, don't retry\n      if (error.response?.status == 404) {\n        return false;\n      }\n\n      // Otherwise, retry up to 3 times\n      return failureCount < 3;\n    },\n    queryFn: async () => {\n      if (disabled) {\n        return defaultValue;\n      }\n\n      if (hasPrimaryKey) {\n        if (\n          pk == null ||\n          pk == undefined ||\n          pk.toString().length == 0 ||\n          pk == '-1'\n        ) {\n          setInstance(defaultValue);\n          return defaultValue;\n        }\n      }\n\n      const url = apiUrl(endpoint, pk, pathParams);\n\n      return api\n        .get(url, {\n          timeout: 10000,\n          params: params\n        })\n        .then((response) => {\n          switch (response.status) {\n            case 200:\n              setInstance(response.data);\n              return response.data;\n            default:\n              setInstance(defaultValue);\n              return defaultValue;\n          }\n        });\n    },\n    refetchOnMount: refetchOnMount,\n    refetchOnWindowFocus: refetchOnWindowFocus ?? false,\n    refetchInterval: updateInterval\n  });\n\n  const isLoaded = useMemo(() => {\n    return (\n      instanceQuery.isFetched &&\n      instanceQuery.isSuccess &&\n      !instanceQuery.isError\n    );\n  }, [instanceQuery]);\n\n  const refreshInstance = useCallback(() => {\n    instanceQuery.refetch();\n  }, []);\n\n  const refreshInstancePromise = useCallback(() => {\n    return instanceQuery.refetch();\n  }, []);\n\n  return {\n    instance,\n    setInstance,\n    refreshInstance,\n    refreshInstancePromise,\n    instanceQuery,\n    isLoaded\n  };\n}\n"],"names":["useInstance","endpoint","pk","params","defaultValue","pathParams","disabled","hasPrimaryKey","refetchOnMount","refetchOnWindowFocus","updateInterval","api","useApi","instance","setInstance","useState","instanceQuery","useQuery","enabled","queryKey","JSON","stringify","retry","failureCount","error","response","status","queryFn","undefined","toString","length","url","apiUrl","get","timeout","then","data","refetchInterval","isLoaded","useMemo","isFetched","isSuccess","isError","refreshInstance","useCallback","refetch","refreshInstancePromise"],"mappings":"0IA+BO,SAASA,EAAqB,CACnCC,SAAAA,EACAC,GAAAA,EACAC,OAAAA,EAAS,CAAA,EACTC,aAAAA,EAAe,CAAA,EACfC,WAAAA,EACAC,SAAAA,EACAC,cAAAA,EAAgB,GAChBC,eAAAA,EAAiB,GACjBC,qBAAAA,EAAuB,GACvBC,eAAAA,CAYF,EAAsB,CACpB,MAAMC,EAAMC,EAAAA,EAEN,CAACC,EAAUC,CAAW,EAAIC,EAAAA,SAAwBX,CAAY,EAE9DY,EAAgBC,EAAY,CAChCC,QAAS,CAACZ,EACVa,SAAU,CACR,WACAlB,EACAC,EACAkB,KAAKC,UAAUlB,CAAM,EACrBiB,KAAKC,UAAUhB,CAAU,EACzBC,CAAQ,EAEVgB,MAAOA,CAACC,EAAcC,IAAe,OAEnC,QAAIA,EAAAA,EAAMC,WAAND,YAAAA,EAAgBE,SAAU,IACrB,GAIFH,EAAe,CACxB,EACAI,QAAS,SAAY,CACnB,GAAIrB,EACF,OAAOF,EAGT,GAAIG,IAEAL,GAAM,MACNA,GAAM0B,MACN1B,EAAG2B,WAAWC,QAAU,GACxB5B,GAAM,MAENY,OAAAA,EAAYV,CAAY,EACjBA,EAIX,MAAM2B,EAAMC,EAAO/B,EAAUC,EAAIG,CAAU,EAE3C,OAAOM,EACJsB,IAAIF,EAAK,CACRG,QAAS,IACT/B,OAAAA,CAAAA,CACD,EACAgC,KAAMV,GAAa,CAClB,OAAQA,EAASC,OAAAA,CACf,IAAK,KACHZ,OAAAA,EAAYW,EAASW,IAAI,EAClBX,EAASW,KAClB,QACEtB,OAAAA,EAAYV,CAAY,EACjBA,CAAAA,CAEb,CAAC,CACL,EACAI,eAAAA,EACAC,qBAAsBA,GAAwB,GAC9C4B,gBAAiB3B,CAAAA,CAClB,EAEK4B,EAAWC,EAAAA,QAAQ,IAErBvB,EAAcwB,WACdxB,EAAcyB,WACd,CAACzB,EAAc0B,QAEhB,CAAC1B,CAAa,CAAC,EAEZ2B,EAAkBC,EAAAA,YAAY,IAAM,CACxC5B,EAAc6B,QAAAA,CAChB,EAAG,CAAA,CAAE,EAECC,EAAyBF,EAAAA,YAAY,IAClC5B,EAAc6B,QAAAA,EACpB,CAAA,CAAE,EAEL,MAAO,CACLhC,SAAAA,EACAC,YAAAA,EACA6B,gBAAAA,EACAG,uBAAAA,EACA9B,cAAAA,EACAsB,SAAAA,CAAAA,CAEJ"}