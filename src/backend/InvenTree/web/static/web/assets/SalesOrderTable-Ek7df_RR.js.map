{"version":3,"file":"SalesOrderTable-Ek7df_RR.js","sources":["../../../../../../frontend/src/tables/sales/ReturnOrderTable.tsx","../../../../../../frontend/src/tables/sales/SalesOrderTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { useMemo } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport { formatCurrency } from '../../defaults/formatters';\nimport { useReturnOrderFields } from '../../forms/ReturnOrderForms';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport {\n  CompanyColumn,\n  CompletionDateColumn,\n  CreatedByColumn,\n  CreationDateColumn,\n  DescriptionColumn,\n  LineItemsProgressColumn,\n  ProjectCodeColumn,\n  ReferenceColumn,\n  ResponsibleColumn,\n  StartDateColumn,\n  StatusColumn,\n  TargetDateColumn\n} from '../ColumnRenderers';\nimport {\n  AssignedToMeFilter,\n  CompletedAfterFilter,\n  CompletedBeforeFilter,\n  CreatedAfterFilter,\n  CreatedBeforeFilter,\n  CreatedByFilter,\n  HasProjectCodeFilter,\n  IncludeVariantsFilter,\n  MaxDateFilter,\n  MinDateFilter,\n  OrderStatusFilter,\n  OutstandingFilter,\n  OverdueFilter,\n  ProjectCodeFilter,\n  ResponsibleFilter,\n  StartDateAfterFilter,\n  StartDateBeforeFilter,\n  TargetDateAfterFilter,\n  TargetDateBeforeFilter\n} from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport function ReturnOrderTable({\n  partId,\n  customerId\n}: Readonly<{\n  partId?: number;\n  customerId?: number;\n}>) {\n  const table = useTable(!!partId ? 'returnorders-part' : 'returnorders-index');\n  const user = useUserState();\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    const filters: TableFilter[] = [\n      OrderStatusFilter({ model: ModelType.returnorder }),\n      OutstandingFilter(),\n      OverdueFilter(),\n      AssignedToMeFilter(),\n      MinDateFilter(),\n      MaxDateFilter(),\n      CreatedBeforeFilter(),\n      CreatedAfterFilter(),\n      TargetDateBeforeFilter(),\n      TargetDateAfterFilter(),\n      StartDateBeforeFilter(),\n      StartDateAfterFilter(),\n      {\n        name: 'has_target_date',\n        type: 'boolean',\n        label: t`Has Target Date`,\n        description: t`Show orders with a target date`\n      },\n      {\n        name: 'has_start_date',\n        type: 'boolean',\n        label: t`Has Start Date`,\n        description: t`Show orders with a start date`\n      },\n      CompletedBeforeFilter(),\n      CompletedAfterFilter(),\n      HasProjectCodeFilter(),\n      ProjectCodeFilter(),\n      ResponsibleFilter(),\n      CreatedByFilter()\n    ];\n\n    if (!!partId) {\n      filters.push(IncludeVariantsFilter());\n    }\n\n    return filters;\n  }, [partId]);\n\n  const tableColumns = useMemo(() => {\n    return [\n      ReferenceColumn({}),\n      {\n        accessor: 'customer__name',\n        title: t`Customer`,\n        sortable: true,\n        render: (record: any) => (\n          <CompanyColumn company={record.customer_detail} />\n        )\n      },\n      {\n        accessor: 'customer_reference'\n      },\n      DescriptionColumn({}),\n      LineItemsProgressColumn({}),\n      StatusColumn({ model: ModelType.returnorder }),\n      ProjectCodeColumn({\n        defaultVisible: false\n      }),\n      CreationDateColumn({\n        defaultVisible: false\n      }),\n      CreatedByColumn({\n        defaultVisible: false\n      }),\n      StartDateColumn({\n        defaultVisible: false\n      }),\n      TargetDateColumn({}),\n      CompletionDateColumn({\n        accessor: 'complete_date'\n      }),\n      ResponsibleColumn({}),\n      {\n        accessor: 'total_price',\n        title: t`Total Price`,\n        sortable: true,\n        render: (record: any) => {\n          return formatCurrency(record.total_price, {\n            currency: record.order_currency || record.customer_detail?.currency\n          });\n        }\n      }\n    ];\n  }, []);\n\n  const returnOrderFields = useReturnOrderFields({});\n\n  const newReturnOrder = useCreateApiFormModal({\n    url: ApiEndpoints.return_order_list,\n    title: t`Add Return Order`,\n    fields: returnOrderFields,\n    initialData: {\n      customer: customerId\n    },\n    follow: true,\n    modelType: ModelType.returnorder\n  });\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-return-order'\n        tooltip={t`Add Return Order`}\n        onClick={() => newReturnOrder.open()}\n        hidden={!user.hasAddRole(UserRoles.return_order)}\n      />\n    ];\n  }, [user]);\n\n  return (\n    <>\n      {newReturnOrder.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.return_order_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          params: {\n            part: partId,\n            customer: customerId,\n            customer_detail: true\n          },\n          tableFilters: tableFilters,\n          tableActions: tableActions,\n          modelType: ModelType.returnorder,\n          enableSelection: true,\n          enableDownload: true,\n          enableReports: true\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { useMemo } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport { formatCurrency } from '../../defaults/formatters';\nimport { useSalesOrderFields } from '../../forms/SalesOrderForms';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport {\n  CompanyColumn,\n  CreatedByColumn,\n  CreationDateColumn,\n  DescriptionColumn,\n  LineItemsProgressColumn,\n  ProjectCodeColumn,\n  ReferenceColumn,\n  ResponsibleColumn,\n  ShipmentDateColumn,\n  StartDateColumn,\n  StatusColumn,\n  TargetDateColumn\n} from '../ColumnRenderers';\nimport {\n  AssignedToMeFilter,\n  CompletedAfterFilter,\n  CompletedBeforeFilter,\n  CreatedAfterFilter,\n  CreatedBeforeFilter,\n  CreatedByFilter,\n  HasProjectCodeFilter,\n  IncludeVariantsFilter,\n  MaxDateFilter,\n  MinDateFilter,\n  OrderStatusFilter,\n  OutstandingFilter,\n  OverdueFilter,\n  ProjectCodeFilter,\n  ResponsibleFilter,\n  StartDateAfterFilter,\n  StartDateBeforeFilter,\n  TargetDateAfterFilter,\n  TargetDateBeforeFilter\n} from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport function SalesOrderTable({\n  partId,\n  customerId\n}: Readonly<{\n  partId?: number;\n  customerId?: number;\n}>) {\n  const table = useTable(!!partId ? 'salesorder-part' : 'salesorder-index');\n  const user = useUserState();\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    const filters: TableFilter[] = [\n      OrderStatusFilter({ model: ModelType.salesorder }),\n      OutstandingFilter(),\n      OverdueFilter(),\n      AssignedToMeFilter(),\n      MinDateFilter(),\n      MaxDateFilter(),\n      CreatedBeforeFilter(),\n      CreatedAfterFilter(),\n      TargetDateBeforeFilter(),\n      TargetDateAfterFilter(),\n      StartDateBeforeFilter(),\n      StartDateAfterFilter(),\n      {\n        name: 'has_target_date',\n        type: 'boolean',\n        label: t`Has Target Date`,\n        description: t`Show orders with a target date`\n      },\n      {\n        name: 'has_start_date',\n        type: 'boolean',\n        label: t`Has Start Date`,\n        description: t`Show orders with a start date`\n      },\n      CompletedBeforeFilter(),\n      CompletedAfterFilter(),\n      HasProjectCodeFilter(),\n      ProjectCodeFilter(),\n      ResponsibleFilter(),\n      CreatedByFilter()\n    ];\n\n    if (!!partId) {\n      filters.push(IncludeVariantsFilter());\n    }\n\n    return filters;\n  }, [partId]);\n\n  const salesOrderFields = useSalesOrderFields({});\n\n  const newSalesOrder = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_list,\n    title: t`Add Sales Order`,\n    fields: salesOrderFields,\n    initialData: {\n      customer: customerId\n    },\n    follow: true,\n    modelType: ModelType.salesorder\n  });\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-sales-order'\n        tooltip={t`Add Sales Order`}\n        onClick={() => newSalesOrder.open()}\n        hidden={!user.hasAddRole(UserRoles.sales_order)}\n      />\n    ];\n  }, [user]);\n\n  const tableColumns = useMemo(() => {\n    return [\n      ReferenceColumn({}),\n      {\n        accessor: 'customer__name',\n        title: t`Customer`,\n        sortable: true,\n        render: (record: any) => (\n          <CompanyColumn company={record.customer_detail} />\n        )\n      },\n      {\n        accessor: 'customer_reference',\n        title: t`Customer Reference`\n      },\n      DescriptionColumn({}),\n      LineItemsProgressColumn({}),\n      {\n        accessor: 'shipments_count',\n        title: t`Shipments`,\n        minWidth: 125,\n        render: (record: any) => (\n          <ProgressBar\n            progressLabel\n            value={record.completed_shipments_count}\n            maximum={record.shipments_count}\n          />\n        )\n      },\n      StatusColumn({ model: ModelType.salesorder }),\n      ProjectCodeColumn({\n        defaultVisible: false\n      }),\n      CreationDateColumn({\n        defaultVisible: false\n      }),\n      CreatedByColumn({\n        defaultVisible: false\n      }),\n      StartDateColumn({\n        defaultVisible: false\n      }),\n      TargetDateColumn({}),\n      ShipmentDateColumn({}),\n      ResponsibleColumn({}),\n      {\n        accessor: 'total_price',\n        title: t`Total Price`,\n        sortable: true,\n        render: (record: any) => {\n          return formatCurrency(record.total_price, {\n            currency: record.order_currency || record.customer_detail?.currency\n          });\n        }\n      }\n    ];\n  }, []);\n\n  return (\n    <>\n      {newSalesOrder.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.sales_order_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          params: {\n            customer_detail: true,\n            part: partId,\n            customer: customerId\n          },\n          tableFilters: tableFilters,\n          tableActions: tableActions,\n          modelType: ModelType.salesorder,\n          enableSelection: true,\n          enableDownload: true,\n          enableReports: true\n        }}\n      />\n    </>\n  );\n}\n"],"names":["ReturnOrderTable","partId","customerId","table","useTable","user","useUserState","tableFilters","useMemo","filters","OrderStatusFilter","model","ModelType","returnorder","OutstandingFilter","OverdueFilter","AssignedToMeFilter","MinDateFilter","MaxDateFilter","CreatedBeforeFilter","CreatedAfterFilter","TargetDateBeforeFilter","TargetDateAfterFilter","StartDateBeforeFilter","StartDateAfterFilter","name","type","label","_i18n","_","id","description","CompletedBeforeFilter","CompletedAfterFilter","HasProjectCodeFilter","ProjectCodeFilter","ResponsibleFilter","CreatedByFilter","push","IncludeVariantsFilter","tableColumns","ReferenceColumn","accessor","title","sortable","render","record","CompanyColumn","customer_detail","DescriptionColumn","LineItemsProgressColumn","StatusColumn","ProjectCodeColumn","defaultVisible","CreationDateColumn","CreatedByColumn","StartDateColumn","TargetDateColumn","CompletionDateColumn","ResponsibleColumn","formatCurrency","total_price","currency","order_currency","returnOrderFields","useReturnOrderFields","newReturnOrder","useCreateApiFormModal","url","ApiEndpoints","return_order_list","fields","initialData","customer","follow","modelType","tableActions","jsx","AddItemButton","open","hasAddRole","UserRoles","return_order","jsxs","Fragment","modal","InvenTreeTable","apiUrl","params","part","enableSelection","enableDownload","enableReports","SalesOrderTable","salesorder","salesOrderFields","useSalesOrderFields","newSalesOrder","sales_order_list","sales_order","minWidth","ProgressBar","completed_shipments_count","shipments_count","ShipmentDateColumn"],"mappings":"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"}