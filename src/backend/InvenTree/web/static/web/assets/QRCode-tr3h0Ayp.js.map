{"version":3,"file":"QRCode-tr3h0Ayp.js","sources":["../../../../../../frontend/src/components/barcodes/QRCode.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  Alert,\n  Box,\n  Button,\n  Code,\n  Divider,\n  Group,\n  Image,\n  Select,\n  Skeleton,\n  Stack,\n  Text\n} from '@mantine/core';\nimport { modals } from '@mantine/modals';\nimport { useQuery } from '@tanstack/react-query';\nimport QR from 'qrcode';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { api } from '../../App';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { CopyButton } from '../buttons/CopyButton';\nimport type { QrCodeType } from '../items/ActionDropdown';\n\nimport { extractErrorMessage } from '../../functions/api';\nimport { BarcodeInput } from './BarcodeInput';\n\ntype QRCodeProps = {\n  ecl?: 'L' | 'M' | 'Q' | 'H';\n  margin?: number;\n  data?: string;\n};\n\nexport const QRCode = ({ data, ecl = 'Q', margin = 1 }: QRCodeProps) => {\n  const [qrCode, setQRCode] = useState<string>();\n\n  useEffect(() => {\n    if (!data) return setQRCode(undefined);\n\n    QR.toString(data, { errorCorrectionLevel: ecl, type: 'svg', margin }).then(\n      (svg) => {\n        setQRCode(`data:image/svg+xml;utf8,${encodeURIComponent(svg)}`);\n      }\n    );\n  }, [data, ecl]);\n\n  return (\n    <Box>\n      {qrCode ? (\n        <Image src={qrCode} alt='QR Code' />\n      ) : (\n        <Skeleton height={500} />\n      )}\n    </Box>\n  );\n};\n\ntype InvenTreeQRCodeProps = {\n  mdl_prop: QrCodeType;\n  showEclSelector?: boolean;\n} & Omit<QRCodeProps, 'data'>;\n\nexport const InvenTreeQRCode = ({\n  mdl_prop,\n  showEclSelector = true,\n  ecl: eclProp = 'Q',\n  ...props\n}: InvenTreeQRCodeProps) => {\n  const settings = useGlobalSettingsState();\n  const [ecl, setEcl] = useState(eclProp);\n\n  useEffect(() => {\n    if (eclProp) setEcl(eclProp);\n  }, [eclProp]);\n\n  const { data } = useQuery({\n    queryKey: ['qr-code', mdl_prop.model, mdl_prop.pk],\n    queryFn: async () => {\n      return api\n        .post(apiUrl(ApiEndpoints.barcode_generate), {\n          model: mdl_prop.model,\n          pk: mdl_prop.pk\n        })\n        .then((res) => res.data?.barcode ?? ('' as string))\n        .catch((error) => '');\n    }\n  });\n\n  const eclOptions = useMemo(\n    () => [\n      { value: 'L', label: t`Low (7%)` },\n      { value: 'M', label: t`Medium (15%)` },\n      { value: 'Q', label: t`Quartile (25%)` },\n      { value: 'H', label: t`High (30%)` }\n    ],\n    []\n  );\n\n  return (\n    <Stack>\n      <Divider />\n\n      {mdl_prop.hash ? (\n        <Alert variant='outline' color='red' title={t`Custom barcode`}>\n          <Trans>\n            A custom barcode is registered for this item. The shown code is not\n            that custom barcode.\n          </Trans>\n        </Alert>\n      ) : null}\n\n      <QRCode data={data} ecl={ecl} {...props} />\n\n      <Divider />\n\n      {data && settings.getSetting('BARCODE_SHOW_TEXT', 'false') && (\n        <Group\n          justify={showEclSelector ? 'space-between' : 'center'}\n          align='flex-start'\n          px={16}\n        >\n          <Stack gap={4} pt={2}>\n            <Text size='sm' fw={500}>\n              <Trans>Barcode Data:</Trans>\n            </Text>\n            <Group>\n              <Code>{data}</Code>\n              <CopyButton value={data} />\n            </Group>\n          </Stack>\n\n          {showEclSelector && (\n            <Select\n              allowDeselect={false}\n              label={t`Select Error Correction Level`}\n              value={ecl}\n              onChange={(v) =>\n                setEcl(v as Exclude<QRCodeProps['ecl'], undefined>)\n              }\n              data={eclOptions}\n            />\n          )}\n        </Group>\n      )}\n    </Stack>\n  );\n};\n\nexport const QRCodeLink = ({ mdl_prop }: { mdl_prop: QrCodeType }) => {\n  const [error, setError] = useState<string>('');\n\n  const linkBarcode = useCallback((barcode: string) => {\n    api\n      .post(apiUrl(ApiEndpoints.barcode_link), {\n        [mdl_prop.model]: mdl_prop.pk,\n        barcode: barcode\n      })\n      .then((response) => {\n        setError('');\n        modals.closeAll();\n        location.reload();\n      })\n      .catch((error) => {\n        const msg = extractErrorMessage({\n          error: error,\n          field: 'error',\n          defaultMessage: t`Failed to link barcode`\n        });\n        setError(msg);\n      });\n  }, []);\n\n  return (\n    <Stack gap='xs'>\n      <Divider />\n      <BarcodeInput onScan={linkBarcode} actionText={t`Link`} error={error} />\n    </Stack>\n  );\n};\n\nexport const QRCodeUnlink = ({ mdl_prop }: { mdl_prop: QrCodeType }) => {\n  function unlinkBarcode() {\n    api\n      .post(apiUrl(ApiEndpoints.barcode_unlink), {\n        [mdl_prop.model]: mdl_prop.pk\n      })\n      .then((response) => {\n        modals.closeAll();\n        location.reload();\n      });\n  }\n  return (\n    <Box>\n      <Stack gap='sm'>\n        <Divider />\n        <Text>\n          <Trans>This will remove the link to the associated barcode</Trans>\n        </Text>\n        <Divider />\n        <Group grow>\n          <Button color='red' onClick={unlinkBarcode}>\n            <Trans>Unlink Barcode</Trans>\n          </Button>\n        </Group>\n      </Stack>\n    </Box>\n  );\n};\n"],"names":["QRCode","data","ecl","margin","qrCode","setQRCode","useState","useEffect","undefined","QR","toString","errorCorrectionLevel","type","then","svg","encodeURIComponent","jsx","Box","Image","Skeleton","InvenTreeQRCode","mdl_prop","showEclSelector","eclProp","props","settings","useGlobalSettingsState","setEcl","useQuery","queryKey","model","pk","queryFn","api","post","apiUrl","ApiEndpoints","barcode_generate","res","barcode","catch","error","eclOptions","useMemo","value","label","_i18n","_","id","Stack","Divider","hash","Alert","_Trans","getSetting","jsxs","Group","Text","Code","CopyButton","Select","v","QRCodeLink","setError","linkBarcode","useCallback","barcode_link","response","modals","closeAll","location","reload","msg","extractErrorMessage","field","defaultMessage","BarcodeInput","QRCodeUnlink","unlinkBarcode","barcode_unlink","Button"],"mappings":"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"}