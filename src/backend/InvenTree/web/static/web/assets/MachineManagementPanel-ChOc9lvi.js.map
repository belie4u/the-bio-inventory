{"version":3,"file":"MachineManagementPanel-ChOc9lvi.js","sources":["../../../../../../frontend/src/components/items/UnavailableIndicator.tsx","../../../../../../frontend/src/tables/machine/MachineListTable.tsx","../../../../../../frontend/src/tables/machine/MachineTypeTable.tsx","../../../../../../frontend/src/pages/Index/Settings/AdminCenter/MachineManagementPanel.tsx"],"sourcesContent":["import { IconAlertCircle } from '@tabler/icons-react';\n\nexport function UnavailableIndicator() {\n  return <IconAlertCircle size={18} color='red' />;\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  Accordion,\n  Alert,\n  Badge,\n  Box,\n  Code,\n  Flex,\n  Group,\n  Indicator,\n  List,\n  LoadingOverlay,\n  Paper,\n  Progress,\n  Stack,\n  Table,\n  Text\n} from '@mantine/core';\nimport { notifications } from '@mantine/notifications';\nimport { IconCheck, IconRefresh } from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { YesNoButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { RowDeleteAction, RowEditAction, formatDecimal } from '@lib/index';\nimport type { RowAction, TableColumn } from '@lib/types/Tables';\nimport type { InvenTreeTableProps } from '@lib/types/Tables';\nimport { Trans } from '@lingui/react/macro';\nimport { api } from '../../App';\nimport {\n  DeleteItemAction,\n  EditItemAction,\n  OptionsActionDropdown\n} from '../../components/items/ActionDropdown';\nimport { InfoItem } from '../../components/items/InfoItem';\nimport { StylishText } from '../../components/items/StylishText';\nimport { UnavailableIndicator } from '../../components/items/UnavailableIndicator';\nimport {\n  DetailDrawer,\n  DetailDrawerLink\n} from '../../components/nav/DetailDrawer';\nimport {\n  StatusRenderer,\n  TableStatusRenderer\n} from '../../components/render/StatusRenderer';\nimport { MachineSettingList } from '../../components/settings/SettingList';\nimport { useApi } from '../../contexts/ApiContext';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { BooleanColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport type { MachineDriverI, MachineTypeI } from './MachineTypeTable';\n\ninterface MachineI {\n  pk: string;\n  name: string;\n  machine_type: string;\n  driver: string;\n  initialized: boolean;\n  active: boolean;\n  status: number;\n  status_model: string;\n  status_text: string;\n  machine_errors: string[];\n  is_driver_available: boolean;\n  restart_required: boolean;\n  properties: {\n    key: string;\n    value: string;\n    group: string;\n    type: 'str' | 'progress' | 'bool' | 'int' | 'float';\n    max_progress: number;\n  }[];\n}\n\nfunction MachineStatusIndicator({ machine }: Readonly<{ machine: MachineI }>) {\n  const style = { marginLeft: '4px' };\n\n  // machine is not active, show a gray dot\n  if (!machine.active) {\n    return (\n      <Indicator style={style} color='gray'>\n        <Box />\n      </Indicator>\n    );\n  }\n\n  // determine the status color\n  let color = 'green';\n  const hasErrors =\n    machine.machine_errors.length > 0 || !machine.is_driver_available;\n\n  if (hasErrors || machine.status >= 300) color = 'red';\n  else if (machine.status >= 200) color = 'orange';\n\n  // determine if the machine is running\n  const processing =\n    machine.initialized && machine.status > 0 && machine.status < 300;\n\n  return (\n    <Indicator processing={processing} style={style} color={color}>\n      <Box />\n    </Indicator>\n  );\n}\n\n/**\n * Helper function to restart a machine with the provided ID\n */\nfunction restartMachine({\n  machinePk,\n  callback\n}: {\n  machinePk: string;\n  callback?: () => void;\n}) {\n  api\n    .post(\n      apiUrl(ApiEndpoints.machine_restart, undefined, {\n        machine: machinePk\n      })\n    )\n    .then(() => {\n      notifications.show({\n        message: t`Machine restarted`,\n        color: 'green',\n        icon: <IconCheck size='1rem' />\n      });\n      callback?.();\n    });\n}\n\nexport function useMachineTypeDriver({\n  includeTypes = true,\n  includeDrivers = true\n}: { includeTypes?: boolean; includeDrivers?: boolean } = {}) {\n  const api = useApi();\n\n  const {\n    data: machineTypes,\n    isFetching: isMachineTypesFetching,\n    refetch: refreshMachineTypes\n  } = useQuery<MachineTypeI[]>({\n    enabled: includeTypes,\n    queryKey: ['machine-types'],\n    queryFn: () =>\n      api.get(apiUrl(ApiEndpoints.machine_types_list)).then((res) => res.data),\n    staleTime: 10 * 1000\n  });\n  const {\n    data: machineDrivers,\n    isFetching: isMachineDriversFetching,\n    refetch: refreshDrivers\n  } = useQuery<MachineDriverI[]>({\n    enabled: includeDrivers,\n    queryKey: ['machine-drivers'],\n    queryFn: () =>\n      api.get(apiUrl(ApiEndpoints.machine_driver_list)).then((res) => res.data),\n    staleTime: 10 * 1000\n  });\n\n  const refresh = useCallback(() => {\n    refreshMachineTypes();\n    refreshDrivers();\n  }, [refreshDrivers, refreshMachineTypes]);\n\n  return {\n    machineTypes,\n    machineDrivers,\n    isFetching: isMachineTypesFetching || isMachineDriversFetching,\n    refresh\n  };\n}\n\nfunction MachineDrawer({\n  machinePk,\n  refreshTable\n}: Readonly<{\n  machinePk: string;\n  refreshTable: () => void;\n}>) {\n  const api = useApi();\n  const navigate = useNavigate();\n  const {\n    data: machine,\n    refetch,\n    isLoading: isMachineFetching\n  } = useQuery<MachineI>({\n    enabled: true,\n    queryKey: ['machine-detail', machinePk],\n    refetchInterval: 5 * 1000,\n    queryFn: () =>\n      api\n        .get(apiUrl(ApiEndpoints.machine_list, machinePk))\n        .then((res) => res.data)\n  });\n  const {\n    machineTypes,\n    machineDrivers,\n    isFetching: isMachineTypeDriverFetching\n  } = useMachineTypeDriver();\n\n  const isFetching = isMachineFetching || isMachineTypeDriverFetching;\n\n  const machineType = useMemo(\n    () =>\n      machineTypes && machine\n        ? machineTypes.find((t) => t.slug === machine.machine_type)\n        : undefined,\n    [machine?.machine_type, machineTypes]\n  );\n\n  const machineDriver = useMemo(\n    () =>\n      machineDrivers && machine\n        ? machineDrivers.find((d) => d.slug === machine.driver)\n        : undefined,\n    [machine?.driver, machineDrivers]\n  );\n\n  const refreshAll = useCallback(() => {\n    refetch();\n    refreshTable();\n  }, [refetch, refreshTable]);\n\n  const machineEditModal = useEditApiFormModal({\n    title: t`Edit machine`,\n    url: ApiEndpoints.machine_list,\n    pk: machinePk,\n    fields: useMemo(\n      () => ({\n        name: {},\n        active: {}\n      }),\n      []\n    ),\n    onClose: () => refreshAll()\n  });\n\n  const machineDeleteModal = useDeleteApiFormModal({\n    title: t`Delete machine`,\n    successMessage: t`Machine successfully deleted.`,\n    url: ApiEndpoints.machine_list,\n    pk: machinePk,\n    preFormContent: (\n      <Alert color='red'>\n        {t`Are you sure you want to remove this machine?`}\n      </Alert>\n    ),\n    onFormSuccess: () => {\n      refreshTable();\n      navigate(-1);\n    }\n  });\n\n  const groupedProperties = useMemo(() => {\n    if (!machine?.properties) return [];\n    const groups: string[] = []; // track ordered list of groups\n    const groupMap: { [key: string]: typeof machine.properties } = {};\n    for (const prop of machine.properties) {\n      if (!groups.includes(prop.group)) groups.push(prop.group);\n      if (!groupMap[prop.group]) groupMap[prop.group] = [];\n      groupMap[prop.group].push(prop);\n    }\n\n    return groups.map((g) => ({ group: g, properties: groupMap[g] }));\n  }, [machine?.properties]);\n\n  return (\n    <>\n      <Stack gap='xs'>\n        {machineEditModal.modal}\n        {machineDeleteModal.modal}\n        <Group justify='space-between'>\n          <Group>\n            {machine && <MachineStatusIndicator machine={machine} />}\n            <StylishText size='md'>{machine?.name ?? t`Machine`}</StylishText>\n          </Group>\n          <Group>\n            {machine?.restart_required && (\n              <Badge color='red'>\n                <Trans>Restart required</Trans>\n              </Badge>\n            )}\n            <OptionsActionDropdown\n              tooltip={t`Machine Actions`}\n              actions={[\n                EditItemAction({\n                  tooltip: t`Edit machine`,\n                  onClick: machineEditModal.open\n                }),\n                DeleteItemAction({\n                  tooltip: t`Delete machine`,\n                  onClick: machineDeleteModal.open\n                }),\n                {\n                  icon: <IconRefresh />,\n                  name: t`Restart`,\n                  tooltip:\n                    t`Restart machine` +\n                    (machine?.restart_required\n                      ? ` (${t`manual restart required`})`\n                      : ''),\n                  indicator: machine?.restart_required\n                    ? { color: 'red' }\n                    : undefined,\n                  onClick: () => {\n                    if (machine) {\n                      restartMachine({\n                        machinePk: machine?.pk,\n                        callback: refreshAll\n                      });\n                    }\n                  }\n                }\n              ]}\n            />\n          </Group>\n        </Group>\n\n        <Accordion\n          multiple\n          defaultValue={[\n            'machine-info',\n            'machine-properties',\n            'machine-settings',\n            'driver-settings'\n          ]}\n        >\n          <Accordion.Item\n            key={`machine-info-${machinePk}`}\n            value='machine-info'\n          >\n            <Accordion.Control>\n              <StylishText size='lg'>{t`General`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <Paper withBorder p='md'>\n                <Stack gap='md'>\n                  <Stack pos='relative' gap='xs'>\n                    <LoadingOverlay\n                      visible={isFetching}\n                      overlayProps={{ opacity: 0 }}\n                    />\n                    <InfoItem name={t`Machine Type`}>\n                      <Group gap='xs'>\n                        {machineType ? (\n                          <DetailDrawerLink\n                            to={`../type-${machine?.machine_type}`}\n                            text={machineType.name}\n                          />\n                        ) : (\n                          <Text>{machine?.machine_type}</Text>\n                        )}\n                        {machine && !machineType && <UnavailableIndicator />}\n                      </Group>\n                    </InfoItem>\n                    <InfoItem name={t`Machine Driver`}>\n                      <Group gap='xs'>\n                        {machineDriver ? (\n                          <DetailDrawerLink\n                            to={`../driver-${machine?.driver}`}\n                            text={machineDriver.name}\n                          />\n                        ) : (\n                          <Text>{machine?.driver}</Text>\n                        )}\n                        {!machine?.is_driver_available && (\n                          <UnavailableIndicator />\n                        )}\n                      </Group>\n                    </InfoItem>\n                    <InfoItem name={t`Initialized`}>\n                      <YesNoButton value={machine?.initialized || false} />\n                    </InfoItem>\n                    <InfoItem name={t`Active`}>\n                      <YesNoButton value={machine?.active || false} />\n                    </InfoItem>\n                    <InfoItem name={t`Status`}>\n                      <Flex direction='column'>\n                        {machine?.status === -1 ? (\n                          <Text fz='xs'>No status</Text>\n                        ) : (\n                          StatusRenderer({\n                            status: `${machine?.status || -1}`,\n                            type: `${machine?.status_model}` as any\n                          })\n                        )}\n                        <Text fz='sm'>{machine?.status_text}</Text>\n                      </Flex>\n                    </InfoItem>\n                    <Group justify='space-between' gap='xs'>\n                      <Text fz='sm' fw={700}>\n                        <Trans>Errors</Trans>:\n                      </Text>\n                      {machine && machine?.machine_errors.length > 0 ? (\n                        <Badge color='red' style={{ marginLeft: '10px' }}>\n                          {machine?.machine_errors.length}\n                        </Badge>\n                      ) : (\n                        <Text fz='xs'>\n                          <Trans>No errors reported</Trans>\n                        </Text>\n                      )}\n                      <List w='100%'>\n                        {machine?.machine_errors.map((error, i) => (\n                          <List.Item key={i}>\n                            <Code>{error}</Code>\n                          </List.Item>\n                        ))}\n                      </List>\n                    </Group>\n                  </Stack>\n                </Stack>\n              </Paper>\n            </Accordion.Panel>\n          </Accordion.Item>\n          <Accordion.Item\n            key={`machine-properties-${machinePk}`}\n            value='machine-properties'\n          >\n            <Accordion.Control>\n              <StylishText size='lg'>{t`Properties`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <Paper withBorder p='md'>\n                <Stack gap='sm'>\n                  {groupedProperties.map(({ group, properties }) => (\n                    <Stack key={group} gap={0}>\n                      {group && (\n                        <Text fz='sm' fw={700} mb={2}>\n                          {group}\n                        </Text>\n                      )}\n                      <Table\n                        variant='vertical'\n                        withTableBorder\n                        verticalSpacing={4}\n                      >\n                        <Table.Tbody>\n                          {properties.map((prop) => (\n                            <Table.Tr key={prop.key}>\n                              <Table.Th w={250}>{prop.key}</Table.Th>\n                              <Table.Td>\n                                {prop.type === 'bool' ? (\n                                  <YesNoButton\n                                    value={\n                                      `${prop.value}`.toLowerCase() === 'true'\n                                    }\n                                  />\n                                ) : prop.type === 'progress' ? (\n                                  <Group>\n                                    <Progress\n                                      value={\n                                        (Number.parseInt(prop.value) /\n                                          prop.max_progress) *\n                                        100\n                                      }\n                                      flex={1}\n                                    />\n                                    <Text>\n                                      {prop.value} / {prop.max_progress}\n                                    </Text>\n                                  </Group>\n                                ) : prop.type === 'int' ? (\n                                  <Text size='sm'>{prop.value}</Text>\n                                ) : prop.type === 'float' ? (\n                                  <Text size='sm'>\n                                    {formatDecimal(\n                                      Number.parseFloat(prop.value),\n                                      { digits: 4 }\n                                    )}\n                                  </Text>\n                                ) : (\n                                  <Text size='sm'>{prop.value}</Text>\n                                )}\n                              </Table.Td>\n                            </Table.Tr>\n                          ))}\n                        </Table.Tbody>\n                      </Table>\n                    </Stack>\n                  ))}\n                </Stack>\n              </Paper>\n            </Accordion.Panel>\n          </Accordion.Item>\n          {machine?.is_driver_available && (\n            <Accordion.Item\n              key={`machine-settings-${machinePk}`}\n              value='machine-settings'\n            >\n              <Accordion.Control>\n                <StylishText size='lg'>{t`Machine Settings`}</StylishText>\n              </Accordion.Control>\n              <Accordion.Panel>\n                <Paper withBorder p='xs'>\n                  <MachineSettingList\n                    machinePk={machinePk}\n                    configType='M'\n                    onChange={refreshAll}\n                  />\n                </Paper>\n              </Accordion.Panel>\n            </Accordion.Item>\n          )}\n          {machine?.is_driver_available && (\n            <Accordion.Item\n              key={`driver-settings-${machinePk}`}\n              value='driver-settings'\n            >\n              <Accordion.Control>\n                <StylishText size='lg'>{t`Driver Settings`}</StylishText>\n              </Accordion.Control>\n              <Accordion.Panel>\n                <Paper withBorder p='xs'>\n                  <MachineSettingList\n                    machinePk={machinePk}\n                    configType='D'\n                    onChange={refreshAll}\n                  />\n                </Paper>\n              </Accordion.Panel>\n            </Accordion.Item>\n          )}\n        </Accordion>\n      </Stack>\n    </>\n  );\n}\n\n/**\n * Table displaying list of available plugins\n */\nexport function MachineListTable({\n  props,\n  renderMachineDrawer = true,\n  createProps\n}: Readonly<{\n  props: InvenTreeTableProps;\n  renderMachineDrawer?: boolean;\n  createProps?: { machine_type?: string; driver?: string };\n}>) {\n  const { machineTypes, machineDrivers } = useMachineTypeDriver();\n\n  const table = useTable('machine');\n  const navigate = useNavigate();\n\n  const machineTableColumns = useMemo<TableColumn<MachineI>[]>(\n    () => [\n      {\n        accessor: 'name',\n        sortable: true,\n        render: (record) => (\n          <Group justify='left' wrap='nowrap'>\n            <MachineStatusIndicator machine={record} />\n            <Text>{record.name}</Text>\n            {record.restart_required && (\n              <Badge color='red'>\n                <Trans>Restart required</Trans>\n              </Badge>\n            )}\n          </Group>\n        )\n      },\n      {\n        accessor: 'machine_type',\n        sortable: true,\n        render: (record) => {\n          const machineType = machineTypes?.find(\n            (m) => m.slug === record.machine_type\n          );\n          return (\n            <Group gap='xs'>\n              <Text>\n                {machineType ? machineType.name : record.machine_type}\n              </Text>\n              {machineTypes && !machineType && <UnavailableIndicator />}\n            </Group>\n          );\n        }\n      },\n      {\n        accessor: 'driver',\n        sortable: true,\n        render: (record) => {\n          const driver = machineDrivers?.find((d) => d.slug === record.driver);\n          return (\n            <Group gap='xs'>\n              <Text>{driver ? driver.name : record.driver}</Text>\n              {!record.is_driver_available && <UnavailableIndicator />}\n            </Group>\n          );\n        }\n      },\n      BooleanColumn({\n        accessor: 'initialized'\n      }),\n      BooleanColumn({\n        accessor: 'active'\n      }),\n      {\n        accessor: 'status',\n        sortable: false,\n        render: (record) => {\n          const renderer = TableStatusRenderer(`${record.status_model}` as any);\n          if (renderer && record.status !== -1) {\n            return renderer(record);\n          }\n        }\n      },\n      {\n        accessor: 'status_text',\n        sortable: false\n      },\n      {\n        accessor: 'machine_errors',\n        sortable: false,\n        render: (record) => record.machine_errors.join(', ')\n      }\n    ],\n    [machineTypes]\n  );\n\n  const [createFormMachineType, setCreateFormMachineType] = useState<\n    null | string\n  >(null);\n  const createFormDriverOptions = useMemo(() => {\n    if (!machineDrivers) return [];\n\n    return machineDrivers\n      .filter((d) => d.machine_type === createFormMachineType)\n      .map((d) => ({\n        value: d.slug,\n        display_name: d.name\n      }));\n  }, [machineDrivers, createFormMachineType]);\n\n  const createMachineForm = useCreateApiFormModal({\n    title: t`Add Machine`,\n    url: ApiEndpoints.machine_list,\n    fields: {\n      name: {},\n      machine_type: {\n        hidden: !!createProps?.machine_type,\n        ...(createProps?.machine_type\n          ? { value: createProps.machine_type }\n          : {}),\n        field_type: 'choice',\n        choices: machineTypes\n          ? machineTypes.map((t) => ({\n              value: t.slug,\n              display_name: t.name\n            }))\n          : [],\n        onValueChange: (value) => setCreateFormMachineType(value)\n      },\n      driver: {\n        hidden: !!createProps?.driver,\n        ...(createProps?.driver ? { value: createProps.driver } : {}),\n        field_type: 'choice',\n        disabled: !createFormMachineType,\n        choices: createFormDriverOptions\n      },\n      active: {}\n    },\n    onFormSuccess: (data) => {\n      table.refreshTable();\n      navigate(\n        renderMachineDrawer ? `machine-${data.pk}/` : `../machine-${data.pk}/`\n      );\n    },\n    onClose: () => {\n      setCreateFormMachineType(null);\n    }\n  });\n\n  const [selectedMachinePk, setSelectedMachinePk] = useState<\n    string | undefined\n  >(undefined);\n\n  const deleteMachineForm = useDeleteApiFormModal({\n    title: t`Delete Machine`,\n    successMessage: t`Machine successfully deleted.`,\n    url: ApiEndpoints.machine_list,\n    pk: selectedMachinePk,\n    preFormContent: (\n      <Alert color='red'>\n        {t`Are you sure you want to remove this machine?`}\n      </Alert>\n    ),\n    table: table\n  });\n\n  const editMachineForm = useEditApiFormModal({\n    title: t`Edit Machine`,\n    url: ApiEndpoints.machine_list,\n    pk: selectedMachinePk,\n    fields: {\n      name: {},\n      active: {}\n    },\n    table: table\n  });\n\n  const rowActions = useCallback((record: any): RowAction[] => {\n    return [\n      {\n        icon: <IconRefresh />,\n        title: t`Restart Machine`,\n        onClick: () => {\n          restartMachine({\n            machinePk: record.pk,\n            callback: () => {\n              table.refreshTable();\n            }\n          });\n        }\n      },\n      RowEditAction({\n        title: t`Edit machine`,\n        onClick: () => {\n          setSelectedMachinePk(record.pk);\n          editMachineForm.open();\n        }\n      }),\n      RowDeleteAction({\n        title: t`Delete Machine`,\n        onClick: () => {\n          setSelectedMachinePk(record.pk);\n          deleteMachineForm.open();\n        }\n      })\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-machine'\n        tooltip={t`Add machine`}\n        onClick={() => {\n          setCreateFormMachineType(null);\n          createMachineForm.open();\n        }}\n      />\n    ];\n  }, [createMachineForm.open]);\n\n  return (\n    <>\n      {createMachineForm.modal}\n      {editMachineForm.modal}\n      {deleteMachineForm.modal}\n      {renderMachineDrawer && (\n        <DetailDrawer\n          title={t`Machine Detail`}\n          size={'xl'}\n          renderContent={(id) => {\n            if (!id || !id.startsWith('machine-')) return false;\n            return (\n              <MachineDrawer\n                machinePk={id.replace('machine-', '')}\n                refreshTable={table.refreshTable}\n              />\n            );\n          }}\n        />\n      )}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.machine_list)}\n        tableState={table}\n        columns={machineTableColumns}\n        props={{\n          ...props,\n          enableDownload: false,\n          onRowClick: (machine) =>\n            navigate(\n              renderMachineDrawer\n                ? `machine-${machine.pk}/`\n                : `../machine-${machine.pk}/`\n            ),\n          rowActions: rowActions,\n          tableActions: tableActions,\n          params: {\n            ...props.params\n          },\n          tableFilters: [\n            {\n              name: 'active',\n              label: t`Active`,\n              type: 'boolean'\n            },\n            {\n              name: 'machine_type',\n              label: t`Machine Type`,\n              type: 'choice',\n              choiceFunction: () =>\n                machineTypes\n                  ? machineTypes.map((t) => ({ value: t.slug, label: t.name }))\n                  : []\n            },\n            {\n              name: 'driver',\n              label: t`Driver`,\n              type: 'choice',\n              choiceFunction: () =>\n                machineDrivers\n                  ? machineDrivers.map((d) => ({\n                      value: d.slug,\n                      label: d.name\n                    }))\n                  : []\n            }\n          ]\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  Accordion,\n  ActionIcon,\n  Alert,\n  Badge,\n  Card,\n  Code,\n  Group,\n  List,\n  LoadingOverlay,\n  Stack,\n  Text,\n  Title\n} from '@mantine/core';\nimport { IconExclamationCircle, IconRefresh } from '@tabler/icons-react';\nimport { useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableColumn } from '@lib/types/Tables';\nimport type { InvenTreeTableProps } from '@lib/types/Tables';\nimport { InfoItem } from '../../components/items/InfoItem';\nimport { StylishText } from '../../components/items/StylishText';\nimport { DetailDrawer } from '../../components/nav/DetailDrawer';\nimport { useTable } from '../../hooks/UseTable';\nimport { BooleanColumn, DescriptionColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport { MachineListTable, useMachineTypeDriver } from './MachineListTable';\n\nexport interface MachineTypeI {\n  slug: string;\n  name: string;\n  description: string;\n  provider_file: string;\n  provider_plugin: { slug: string; name: string; pk: number | null } | null;\n  is_builtin: boolean;\n}\n\nexport interface MachineDriverI {\n  slug: string;\n  name: string;\n  description: string;\n  provider_file: string;\n  provider_plugin: { slug: string; name: string; pk: number | null } | null;\n  is_builtin: boolean;\n  machine_type: string;\n  driver_errors: string[];\n}\n\nexport function MachineDriverTable({\n  machineType,\n  prefix\n}: {\n  machineType?: string;\n  prefix?: string;\n}) {\n  const navigate = useNavigate();\n  const table = useTable('machine-drivers');\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'name',\n        title: t`Name`\n      },\n      DescriptionColumn({}),\n      {\n        accessor: 'machine_type',\n        title: t`Driver Type`\n      },\n      BooleanColumn({\n        accessor: 'is_builtin',\n        title: t`Builtin driver`\n      })\n    ];\n  }, []);\n\n  return (\n    <InvenTreeTable\n      url={apiUrl(ApiEndpoints.machine_driver_list)}\n      tableState={table}\n      columns={tableColumns}\n      props={{\n        enableDownload: false,\n        enableSearch: false,\n        onRowClick: (machine) => {\n          navigate(`${prefix ?? '.'}/driver-${machine.slug}/`);\n        },\n        dataFormatter: (data: any) => {\n          if (machineType) {\n            return data.filter((d: any) => d.machine_type === machineType);\n          }\n          return data;\n        }\n      }}\n    />\n  );\n}\n\nfunction MachineTypeDrawer({\n  machineTypeSlug\n}: Readonly<{ machineTypeSlug: string }>) {\n  const navigate = useNavigate();\n\n  const { machineTypes, refresh, isFetching } = useMachineTypeDriver({\n    includeDrivers: false\n  });\n  const machineType = useMemo(\n    () => machineTypes?.find((m) => m.slug === machineTypeSlug),\n    [machineTypes, machineTypeSlug]\n  );\n\n  return (\n    <>\n      <Stack>\n        <Group wrap='nowrap'>\n          <StylishText size='md'>\n            {machineType ? machineType.name : machineTypeSlug}\n          </StylishText>\n        </Group>\n\n        {!machineType && (\n          <Alert\n            color='red'\n            title={t`Not Found`}\n            icon={<IconExclamationCircle />}\n          >\n            <Text>{t`Machine type not found.`}</Text>\n          </Alert>\n        )}\n\n        <Accordion\n          multiple\n          defaultValue={['machine-type-info', 'machine-drivers']}\n        >\n          <Accordion.Item value='machine-type-info'>\n            <Accordion.Control>\n              <StylishText size='lg'>{t`Machine Type Information`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <Card withBorder>\n                <Stack pos='relative' gap='xs'>\n                  <LoadingOverlay\n                    visible={isFetching}\n                    overlayProps={{ opacity: 0 }}\n                  />\n                  <InfoItem\n                    name={t`Name`}\n                    value={machineType?.name}\n                    type='text'\n                  />\n                  <InfoItem\n                    name={t`Slug`}\n                    value={machineType?.slug}\n                    type='text'\n                  />\n                  <InfoItem\n                    name={t`Description`}\n                    value={machineType?.description}\n                    type='text'\n                  />\n                  {!machineType?.is_builtin && (\n                    <InfoItem\n                      name={t`Provider plugin`}\n                      value={machineType?.provider_plugin?.name}\n                      type='text'\n                      link={\n                        machineType?.provider_plugin?.pk !== null\n                          ? `../../plugin/${machineType?.provider_plugin?.pk}/`\n                          : undefined\n                      }\n                      detailDrawerLink\n                    />\n                  )}\n                  <InfoItem\n                    name={t`Provider file`}\n                    value={machineType?.provider_file}\n                    type='code'\n                  />\n                  <InfoItem\n                    name={t`Builtin`}\n                    value={machineType?.is_builtin}\n                    type='boolean'\n                  />\n                </Stack>\n              </Card>\n            </Accordion.Panel>\n          </Accordion.Item>\n          <Accordion.Item value='machine-drivers'>\n            <Accordion.Control>\n              <StylishText size='lg'>{t`Available Drivers`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <Card withBorder>\n                <MachineDriverTable machineType={machineTypeSlug} prefix='..' />\n              </Card>\n            </Accordion.Panel>\n          </Accordion.Item>\n        </Accordion>\n      </Stack>\n    </>\n  );\n}\n\nfunction MachineDriverDrawer({\n  machineDriverSlug\n}: Readonly<{\n  machineDriverSlug: string;\n}>) {\n  const { machineDrivers, machineTypes, refresh, isFetching } =\n    useMachineTypeDriver();\n  const machineDriver = useMemo(\n    () => machineDrivers?.find((d) => d.slug === machineDriverSlug),\n    [machineDrivers, machineDriverSlug]\n  );\n  const machineType = useMemo(\n    () => machineTypes?.find((t) => t.slug === machineDriver?.machine_type),\n    [machineDrivers, machineTypes]\n  );\n\n  return (\n    <Stack>\n      <Group justify='center'>\n        <Title order={4}>\n          {machineDriver ? machineDriver.name : machineDriverSlug}\n        </Title>\n      </Group>\n\n      {!machineDriver && (\n        <Text style={{ fontStyle: 'italic' }}>\n          <Trans>Machine driver not found.</Trans>\n        </Text>\n      )}\n\n      <Card withBorder>\n        <Stack gap='md'>\n          <Group justify='space-between'>\n            <Title order={4}>\n              <Trans>Machine driver information</Trans>\n            </Title>\n            <ActionIcon variant='outline' onClick={() => refresh()}>\n              <IconRefresh />\n            </ActionIcon>\n          </Group>\n\n          <Stack pos='relative' gap='xs'>\n            <LoadingOverlay\n              visible={isFetching}\n              overlayProps={{ opacity: 0 }}\n            />\n            <InfoItem name={t`Name`} value={machineDriver?.name} type='text' />\n            <InfoItem name={t`Slug`} value={machineDriver?.slug} type='text' />\n            <InfoItem\n              name={t`Description`}\n              value={machineDriver?.description}\n              type='text'\n            />\n            <InfoItem\n              name={t`Machine type`}\n              value={\n                machineType ? machineType.name : machineDriver?.machine_type\n              }\n              type='text'\n              link={\n                machineType\n                  ? `../type-${machineDriver?.machine_type}`\n                  : undefined\n              }\n              detailDrawerLink\n            />\n            {!machineDriver?.is_builtin && (\n              <InfoItem\n                name={t`Provider plugin`}\n                value={machineDriver?.provider_plugin?.name}\n                type='text'\n                link={\n                  machineDriver?.provider_plugin?.pk !== null\n                    ? `../../plugin/${machineDriver?.provider_plugin?.pk}/`\n                    : undefined\n                }\n                detailDrawerLink\n              />\n            )}\n            <InfoItem\n              name={t`Provider file`}\n              value={machineDriver?.provider_file}\n              type='code'\n            />\n            <InfoItem\n              name={t`Builtin`}\n              value={machineDriver?.is_builtin}\n              type='boolean'\n            />\n            <Group justify='space-between' gap='xs'>\n              <Text fz='sm' fw={700}>\n                <Trans>Errors</Trans>:\n              </Text>\n              {machineDriver && machineDriver?.driver_errors.length > 0 ? (\n                <Badge color='red' style={{ marginLeft: '10px' }}>\n                  {machineDriver.driver_errors.length}\n                </Badge>\n              ) : (\n                <Text fz='xs'>\n                  <Trans>No errors reported</Trans>\n                </Text>\n              )}\n              <List w='100%'>\n                {machineDriver?.driver_errors.map((error, i) => (\n                  <List.Item key={`${i}-${error}`}>\n                    <Code>{error}</Code>\n                  </List.Item>\n                ))}\n              </List>\n            </Group>\n          </Stack>\n        </Stack>\n      </Card>\n\n      <Card withBorder>\n        <Stack gap='md'>\n          <Title order={4}>\n            <Trans>Machines</Trans>\n          </Title>\n\n          <MachineListTable\n            props={{ params: { driver: machineDriverSlug } }}\n            renderMachineDrawer={false}\n            createProps={{\n              machine_type: machineDriver?.machine_type,\n              driver: machineDriverSlug\n            }}\n          />\n        </Stack>\n      </Card>\n    </Stack>\n  );\n}\n\n/**\n * Table displaying list of available machine types\n */\nexport function MachineTypeListTable({\n  props\n}: Readonly<{\n  props: InvenTreeTableProps;\n}>) {\n  const table = useTable('machineTypes');\n  const navigate = useNavigate();\n\n  const machineTypeTableColumns = useMemo<TableColumn<MachineTypeI>[]>(\n    () => [\n      {\n        accessor: 'name',\n        title: t`Name`\n      },\n      DescriptionColumn({}),\n      BooleanColumn({\n        accessor: 'is_builtin',\n        title: t`Builtin type`\n      })\n    ],\n    []\n  );\n\n  return (\n    <>\n      <DetailDrawer\n        title={t`Machine Type Detail`}\n        size={'xl'}\n        renderContent={(id) => {\n          if (!id || !id.startsWith('type-')) return false;\n          return (\n            <MachineTypeDrawer machineTypeSlug={id.replace('type-', '')} />\n          );\n        }}\n      />\n      <DetailDrawer\n        title={t`Machine Driver Detail`}\n        size={'xl'}\n        renderContent={(id) => {\n          if (!id || !id.startsWith('driver-')) return false;\n          return (\n            <MachineDriverDrawer\n              machineDriverSlug={id.replace('driver-', '')}\n            />\n          );\n        }}\n      />\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.machine_types_list)}\n        tableState={table}\n        columns={machineTypeTableColumns}\n        props={{\n          ...props,\n          enableDownload: false,\n          enableSearch: false,\n          onRowClick: (machine) => navigate(`./type-${machine.slug}/`),\n          params: {\n            ...props.params\n          }\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  Accordion,\n  ActionIcon,\n  Alert,\n  Code,\n  Group,\n  List,\n  Stack,\n  Text\n} from '@mantine/core';\nimport { IconInfoCircle, IconRefresh } from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { api } from '../../../../App';\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { GlobalSettingList } from '../../../../components/settings/SettingList';\nimport { MachineListTable } from '../../../../tables/machine/MachineListTable';\nimport {\n  MachineDriverTable,\n  MachineTypeListTable\n} from '../../../../tables/machine/MachineTypeTable';\n\ninterface MachineRegistryStatusI {\n  registry_errors: { message: string }[];\n}\n\nexport default function MachineManagementPanel() {\n  const { data: registryStatus, refetch } = useQuery<MachineRegistryStatusI>({\n    queryKey: ['machine-registry-status'],\n    queryFn: () =>\n      api\n        .get(apiUrl(ApiEndpoints.machine_registry_status))\n        .then((res) => res.data),\n    staleTime: 10 * 1000\n  });\n\n  const hasErrors = useMemo(() => {\n    return (\n      registryStatus?.registry_errors &&\n      registryStatus.registry_errors.length > 0\n    );\n  }, [registryStatus]);\n\n  return (\n    <Accordion multiple defaultValue={['machinelist']}>\n      <Accordion.Item value='machinelist'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Machines`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <MachineListTable props={{}} />\n        </Accordion.Panel>\n      </Accordion.Item>\n      <Accordion.Item value='drivertypes'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Machine Drivers`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <MachineDriverTable />\n        </Accordion.Panel>\n      </Accordion.Item>\n      <Accordion.Item value='machinetypes'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Machine Types`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <MachineTypeListTable props={{}} />\n        </Accordion.Panel>\n      </Accordion.Item>\n      <Accordion.Item value='machineerrors'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Machine Errors`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <Stack gap='xs'>\n            <Group\n              justify='space-beteen'\n              wrap='nowrap'\n              style={{ width: '100%' }}\n            >\n              {hasErrors ? (\n                <Alert\n                  flex={10}\n                  color='red'\n                  title={t`Registry Registry Errors`}\n                  icon={<IconInfoCircle />}\n                >\n                  <Text>{t`There are machine registry errors`}</Text>\n                </Alert>\n              ) : (\n                <Alert\n                  flex={10}\n                  color='green'\n                  title={t`Machine Registry Errors`}\n                  icon={<IconInfoCircle />}\n                >\n                  <Text>{t`There are no machine registry errors`}</Text>\n                </Alert>\n              )}\n              <ActionIcon variant='outline' onClick={() => refetch()}>\n                <IconRefresh />\n              </ActionIcon>\n            </Group>\n            {hasErrors && (\n              <List>\n                {registryStatus?.registry_errors?.map((error, i) => (\n                  <List.Item key={i}>\n                    <Code>{error.message}</Code>\n                  </List.Item>\n                ))}\n              </List>\n            )}\n          </Stack>\n        </Accordion.Panel>\n      </Accordion.Item>\n      <Accordion.Item value='settings'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Machine Settings`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <GlobalSettingList keys={['MACHINE_PING_ENABLED']} />\n        </Accordion.Panel>\n      </Accordion.Item>\n    </Accordion>\n  );\n}\n"],"names":["UnavailableIndicator","jsx","IconAlertCircle","MachineStatusIndicator","machine","style","marginLeft","active","Indicator","Box","color","machine_errors","length","is_driver_available","status","processing","initialized","restartMachine","machinePk","callback","api","post","apiUrl","ApiEndpoints","machine_restart","undefined","then","notifications","show","message","_i18n","_","id","icon","IconCheck","useMachineTypeDriver","includeTypes","includeDrivers","useApi","data","machineTypes","isFetching","isMachineTypesFetching","refetch","refreshMachineTypes","useQuery","enabled","queryKey","queryFn","get","machine_types_list","res","staleTime","machineDrivers","isMachineDriversFetching","refreshDrivers","machine_driver_list","refresh","useCallback","MachineDrawer","refreshTable","navigate","useNavigate","isLoading","isMachineFetching","refetchInterval","machine_list","isMachineTypeDriverFetching","machineType","useMemo","find","t","slug","machine_type","machineDriver","d","driver","refreshAll","machineEditModal","useEditApiFormModal","title","url","pk","fields","name","onClose","machineDeleteModal","useDeleteApiFormModal","successMessage","preFormContent","Alert","onFormSuccess","groupedProperties","properties","groups","groupMap","prop","includes","group","push","map","g","Fragment","jsxs","Stack","modal","Group","StylishText","restart_required","Badge","_Trans","OptionsActionDropdown","EditItemAction","tooltip","onClick","open","DeleteItemAction","IconRefresh","indicator","Accordion","Paper","LoadingOverlay","opacity","InfoItem","DetailDrawerLink","Text","YesNoButton","Flex","StatusRenderer","type","status_model","status_text","List","error","i","Code","Table","key","value","toLowerCase","Progress","Number","parseInt","max_progress","formatDecimal","parseFloat","digits","MachineSettingList","MachineListTable","props","renderMachineDrawer","createProps","table","useTable","machineTableColumns","accessor","sortable","render","record","m","BooleanColumn","renderer","TableStatusRenderer","join","createFormMachineType","setCreateFormMachineType","useState","createFormDriverOptions","filter","display_name","createMachineForm","useCreateApiFormModal","hidden","field_type","choices","onValueChange","disabled","selectedMachinePk","setSelectedMachinePk","deleteMachineForm","editMachineForm","rowActions","RowEditAction","RowDeleteAction","tableActions","AddItemButton","DetailDrawer","startsWith","replace","InvenTreeTable","enableDownload","onRowClick","params","tableFilters","label","choiceFunction","MachineDriverTable","prefix","tableColumns","DescriptionColumn","enableSearch","dataFormatter","MachineTypeDrawer","machineTypeSlug","IconExclamationCircle","Card","description","is_builtin","provider_plugin","provider_file","MachineDriverDrawer","machineDriverSlug","Title","fontStyle","ActionIcon","driver_errors","MachineTypeListTable","machineTypeTableColumns","MachineManagementPanel","registryStatus","machine_registry_status","hasErrors","registry_errors","width","IconInfoCircle","GlobalSettingList"],"mappings":"4/BAEO,SAASA,GAAuB,CACrC,OAAOC,EAAAA,IAACC,GAAA,CAAgB,KAAM,GAAI,MAAM,MAAK,CAC/C,CC+EA,SAASC,GAAuB,CAAEC,QAAAA,CAAyC,EAAG,CAC5E,MAAMC,EAAQ,CAAEC,WAAY,KAAA,EAG5B,GAAI,CAACF,EAAQG,OACX,aACGC,EAAA,CAAU,MAAAH,EAAc,MAAM,OAC7B,SAAAJ,EAAAA,IAACQ,IAAG,CAAA,CACN,EAKJ,IAAIC,EAAQ,QAEVN,EAAQO,eAAeC,OAAS,GAAK,CAACR,EAAQS,qBAE/BT,EAAQU,QAAU,IAAKJ,EAAQ,MACvCN,EAAQU,QAAU,MAAKJ,EAAQ,UAGxC,MAAMK,EACJX,EAAQY,aAAeZ,EAAQU,OAAS,GAAKV,EAAQU,OAAS,IAEhE,aACGN,EAAA,CAAU,WAAAO,EAAwB,MAAAV,EAAc,MAAAK,EAC/C,SAAAT,EAAAA,IAACQ,IAAG,CAAA,CACN,CAEJ,CAKA,SAASQ,GAAe,CACtBC,UAAAA,EACAC,SAAAA,CAIF,EAAG,CACDC,GACGC,KACCC,EAAOC,EAAaC,gBAAiBC,OAAW,CAC9CrB,QAASc,CAAAA,CACV,CACH,EACCQ,KAAK,IAAM,CACVC,GAAcC,KAAK,CACjBC,QAAOC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EAC5BtB,MAAO,QACPuB,KAAMhC,EAAAA,IAACiC,GAAA,CAAU,KAAK,MAAA,CAAM,CAAA,CAC7B,EACDf,GAAAA,MAAAA,GACF,CAAC,CACL,CAEO,SAASgB,EAAqB,CACnCC,aAAAA,EAAe,GACfC,eAAAA,EAAiB,EACmC,EAAI,GAAI,CAC5D,MAAMjB,EAAMkB,GAAAA,EAEN,CACJC,KAAMC,EACNC,WAAYC,EACZC,QAASC,CAAAA,EACPC,EAAyB,CAC3BC,QAASV,EACTW,SAAU,CAAC,eAAe,EAC1BC,QAASA,IACP5B,EAAI6B,IAAI3B,EAAOC,EAAa2B,kBAAkB,CAAC,EAAExB,KAAMyB,GAAQA,EAAIZ,IAAI,EACzEa,UAAW,GAAK,GAAA,CACjB,EACK,CACJb,KAAMc,EACNZ,WAAYa,EACZX,QAASY,CAAAA,EACPV,EAA2B,CAC7BC,QAAST,EACTU,SAAU,CAAC,iBAAiB,EAC5BC,QAASA,IACP5B,EAAI6B,IAAI3B,EAAOC,EAAaiC,mBAAmB,CAAC,EAAE9B,KAAMyB,GAAQA,EAAIZ,IAAI,EAC1Ea,UAAW,GAAK,GAAA,CACjB,EAEKK,EAAUC,EAAAA,YAAY,IAAM,CAChCd,EAAAA,EACAW,EAAAA,CACF,EAAG,CAACA,EAAgBX,CAAmB,CAAC,EAExC,MAAO,CACLJ,aAAAA,EACAa,eAAAA,EACAZ,WAAYC,GAA0BY,EACtCG,QAAAA,CAAAA,CAEJ,CAEA,SAASE,GAAc,CACrBzC,UAAAA,EACA0C,aAAAA,CAID,EAAG,CACF,MAAMxC,EAAMkB,GAAAA,EACNuB,EAAWC,EAAAA,EACX,CACJvB,KAAMnC,EACNuC,QAAAA,EACAoB,UAAWC,CAAAA,EACTnB,EAAmB,CACrBC,QAAS,GACTC,SAAU,CAAC,iBAAkB7B,CAAS,EACtC+C,gBAAiB,EAAI,IACrBjB,QAASA,IACP5B,EACG6B,IAAI3B,EAAOC,EAAa2C,aAAchD,CAAS,CAAC,EAChDQ,KAAMyB,GAAQA,EAAIZ,IAAI,CAAA,CAC5B,EACK,CACJC,aAAAA,EACAa,eAAAA,EACAZ,WAAY0B,CAAAA,EACVhC,EAAAA,EAEEM,EAAauB,GAAqBG,EAElCC,EAAcC,EAAAA,QAClB,IACE7B,GAAgBpC,EACZoC,EAAa8B,KAAMC,GAAMA,EAAEC,OAASpE,EAAQqE,YAAY,EACxDhD,OACN,CAACrB,GAAAA,YAAAA,EAASqE,aAAcjC,CAAY,CACtC,EAEMkC,EAAgBL,EAAAA,QACpB,IACEhB,GAAkBjD,EACdiD,EAAeiB,KAAMK,GAAMA,EAAEH,OAASpE,EAAQwE,MAAM,EACpDnD,OACN,CAACrB,GAAAA,YAAAA,EAASwE,OAAQvB,CAAc,CAClC,EAEMwB,EAAanB,EAAAA,YAAY,IAAM,CACnCf,EAAAA,EACAiB,EAAAA,CACF,EAAG,CAACjB,EAASiB,CAAY,CAAC,EAEpBkB,EAAmBC,GAAoB,CAC3CC,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrBiD,IAAK1D,EAAa2C,aAClBgB,GAAIhE,EACJiE,OAAQd,EAAAA,QACN,KAAO,CACLe,KAAM,CAAA,EACN7E,OAAQ,CAAA,CAAC,GAEX,CAAA,CACF,EACA8E,QAASA,IAAMR,EAAAA,CAAW,CAC3B,EAEKS,EAAqBC,GAAsB,CAC/CP,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvBwD,eAAc1D,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAA+B,EAC/CiD,IAAK1D,EAAa2C,aAClBgB,GAAIhE,EACJuE,eACExF,EAAAA,IAACyF,EAAA,CAAM,MAAM,MACX5D,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAA+C,EAClD,EAEF2D,cAAeA,IAAM,CACnB/B,EAAAA,EACAC,EAAS,EAAE,CACb,CAAA,CACD,EAEK+B,EAAoBvB,EAAAA,QAAQ,IAAM,CACtC,GAAI,EAACjE,GAAAA,MAAAA,EAASyF,YAAY,MAAO,CAAA,EACjC,MAAMC,EAAmB,CAAA,EACnBC,EAAyD,CAAA,EAC/D,UAAWC,KAAQ5F,EAAQyF,WACpBC,EAAOG,SAASD,EAAKE,KAAK,GAAGJ,EAAOK,KAAKH,EAAKE,KAAK,EACnDH,EAASC,EAAKE,KAAK,IAAGH,EAASC,EAAKE,KAAK,EAAI,CAAA,GAClDH,EAASC,EAAKE,KAAK,EAAEC,KAAKH,CAAI,EAGhC,OAAOF,EAAOM,IAAKC,IAAO,CAAEH,MAAOG,EAAGR,WAAYE,EAASM,CAAC,CAAA,EAAI,CAClE,EAAG,CAACjG,GAAAA,YAAAA,EAASyF,UAAU,CAAC,EAExB,OACE5F,EAAAA,IAAAqG,WAAA,CACE,SAAAC,EAAAA,KAACC,EAAA,CAAM,IAAI,KACR1B,SAAAA,CAAAA,EAAiB2B,MACjBnB,EAAmBmB,MACpBF,EAAAA,KAACG,EAAA,CAAM,QAAQ,gBACb,SAAA,CAAAH,OAACG,EAAA,CACEtG,SAAAA,CAAAA,GAAWH,EAAAA,IAACE,IAAuB,QAAAC,CAAA,CAAiB,QACpDuG,EAAA,CAAY,KAAK,KAAMvG,UAAAA,GAAAA,YAAAA,EAASgF,OAAItD,EAAAC,EAAI,CAAAC,GAAA,QAAA,CAAS,CAAC,CAAC,CAAA,EACtD,SACC0E,EAAA,CACEtG,SAAAA,EAAAA,GAAAA,YAAAA,EAASwG,mBACR3G,EAAAA,IAAC4G,EAAA,CAAM,MAAM,MACX,eAAAC,EAAA,CAAA9E,GAAA,SAA+B,CAAA,CACjC,EAEF/B,EAAAA,IAAC8G,GAAA,CACC,QAAQjF,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAiB,EAC1B,QAAS,CACPgF,GAAe,CACbC,QAAOnF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACvBkF,QAASpC,EAAiBqC,IAAAA,CAC3B,EACDC,GAAiB,CACfH,QAAOnF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACzBkF,QAAS5B,EAAmB6B,IAAAA,CAC7B,EACD,CACElF,WAAOoF,EAAA,EAAW,EAClBjC,KAAItD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAS,EACfiF,QACEnF,EAAAC,EAAA,CAAAC,GAAA,QAAA,CAAiB,GAChB5B,GAAAA,MAAAA,EAASwG,iBACN,KAAA9E,EAAAC,EAAK,CAAAC,GAAA,QAAA,CAAyB,CAAC,IAC/B,IACNsF,UAAWlH,GAAAA,MAAAA,EAASwG,iBAChB,CAAElG,MAAO,KAAA,EACTe,OACJyF,QAASA,IAAM,CACT9G,GACFa,GAAe,CACbC,UAAWd,GAAAA,YAAAA,EAAS8E,GACpB/D,SAAU0D,CAAAA,CACX,CAEL,CAAA,CACD,CAAA,CACD,CAAA,CAAA,CAEN,CAAA,EACF,EAEA0B,EAAAA,KAACgB,EAAA,CACC,SAAQ,GACR,aAAc,CACZ,eACA,qBACA,mBACA,iBAAiB,EAGnB,SAAA,CAAAhB,EAAAA,KAACgB,EAAU,KAAV,CAEC,MAAM,eAEN,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAS,EAAE,CAAA,CACrC,QACCuF,EAAU,MAAV,CACC,SAAAtH,EAAAA,IAACuH,EAAA,CAAM,WAAU,GAAC,EAAE,KAClB,SAAAvH,MAACuG,EAAA,CAAM,IAAI,KACT,SAAAD,EAAAA,KAACC,GAAM,IAAI,WAAW,IAAI,KACxB,SAAA,CAAAvG,EAAAA,IAACwH,EAAA,CACC,QAAShF,EACT,aAAc,CAAEiF,QAAS,CAAA,EAAI,EAE/BzH,EAAAA,IAAC0H,EAAA,CAAS,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAc,EAC5B,SAAAuE,EAAAA,KAACG,EAAA,CAAM,IAAI,KACRtC,SAAAA,CAAAA,EACCnE,EAAAA,IAAC2H,GAAA,CACC,GAAI,WAAWxH,GAAAA,YAAAA,EAASqE,YAAY,GACpC,KAAML,EAAYgB,IAAAA,CAAK,EAGzBnF,EAAAA,IAAC4H,EAAA,CAAMzH,0BAASqE,aAAa,EAE9BrE,GAAW,CAACgE,GAAenE,EAAAA,IAACD,EAAA,CAAA,CAAoB,CAAA,CAAA,CACnD,CAAA,CACF,EACAC,EAAAA,IAAC0H,EAAA,CAAS,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAgB,EAC9B,SAAAuE,EAAAA,KAACG,EAAA,CAAM,IAAI,KACRhC,SAAAA,CAAAA,EACCzE,EAAAA,IAAC2H,GAAA,CACC,GAAI,aAAaxH,GAAAA,YAAAA,EAASwE,MAAM,GAChC,KAAMF,EAAcU,IAAAA,CAAK,EAG3BnF,EAAAA,IAAC4H,EAAA,CAAMzH,0BAASwE,OAAO,EAExB,EAACxE,GAAAA,MAAAA,EAASS,sBACTZ,EAAAA,IAACD,EAAA,CAAA,CAAoB,CAAA,CAAA,CAEzB,CAAA,CACF,EACAC,EAAAA,IAAC0H,EAAA,CAAS,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAa,EAC3B,SAAA/B,MAAC6H,EAAA,CAAY,OAAO1H,GAAAA,YAAAA,EAASY,cAAe,GAAM,EACpD,EACAf,EAAAA,IAAC0H,EAAA,CAAS,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAQ,EACtB,SAAA/B,MAAC6H,EAAA,CAAY,OAAO1H,GAAAA,YAAAA,EAASG,SAAU,GAAM,EAC/C,EACAN,EAAAA,IAAC0H,EAAA,CAAS,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAQ,EACtB,SAAAuE,EAAAA,KAACwB,GAAA,CAAK,UAAU,SACb3H,SAAAA,EAAAA,GAAAA,YAAAA,EAASU,UAAW,GACnBb,EAAAA,IAAC4H,EAAA,CAAK,GAAG,KAAK,SAAA,WAAA,CAAS,EAEvBG,GAAe,CACblH,OAAQ,IAAGV,GAAAA,YAAAA,EAASU,SAAU,EAAE,GAChCmH,KAAM,GAAG7H,GAAAA,YAAAA,EAAS8H,YAAY,EAAA,CAC/B,EAEHjI,EAAAA,IAAC4H,EAAA,CAAK,GAAG,KAAMzH,0BAAS+H,WAAAA,CAAY,CAAA,CAAA,CACtC,CAAA,CACF,EACA5B,EAAAA,KAACG,EAAA,CAAM,QAAQ,gBAAgB,IAAI,KACjC,SAAA,CAAAH,EAAAA,KAACsB,EAAA,CAAK,GAAG,KAAK,GAAI,IAChB,SAAA,CAAA5H,EAAAA,IAAA6G,EAAA,CAAA9E,GAAA,SAAqB,EAAA,GAAA,EACvB,EACC5B,IAAWA,GAAAA,YAAAA,EAASO,eAAeC,QAAS,EAC3CX,MAAC4G,EAAA,CAAM,MAAM,MAAM,MAAO,CAAEvG,WAAY,MAAA,EACrCF,SAAAA,GAAAA,YAAAA,EAASO,eAAeC,MAAAA,CAC3B,QAECiH,EAAA,CAAK,GAAG,KACP,SAAA5H,EAAAA,IAAA6G,EAAA,CAAA9E,GAAA,SAAiC,CAAA,CACnC,EAEF/B,EAAAA,IAACmI,GAAK,EAAE,OACLhI,0BAASO,eAAeyF,IAAI,CAACiC,EAAOC,UAClCF,EAAK,KAAL,CACC,SAAAnI,EAAAA,IAACsI,EAAA,CAAMF,WAAM,GADCC,CAEhB,EACD,CACH,CAAA,CAAA,CACF,CAAA,EACF,CAAA,CACF,EACF,CAAA,CACF,CAAA,CAAA,EArFK,gBAAgBpH,CAAS,EAsFhC,EACAqF,EAAAA,KAACgB,EAAU,KAAV,CAEC,MAAM,qBAEN,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAY,EAAE,CAAA,CACxC,QACCuF,EAAU,MAAV,CACC,SAAAtH,EAAAA,IAACuH,GAAM,WAAU,GAAC,EAAE,KAClB,eAAChB,EAAA,CAAM,IAAI,KACRZ,SAAAA,EAAkBQ,IAAI,CAAC,CAAEF,MAAAA,EAAOL,WAAAA,CAAAA,IAC/BU,EAAAA,KAACC,EAAA,CAAkB,IAAK,EACrBN,SAAAA,CAAAA,GACCjG,EAAAA,IAAC4H,GAAK,GAAG,KAAK,GAAI,IAAK,GAAI,EACxB3B,SAAAA,CAAAA,CACH,QAEDsC,EAAA,CACC,QAAQ,WACR,gBAAe,GACf,gBAAiB,EAEjB,SAAAvI,EAAAA,IAACuI,EAAM,MAAN,CACE3C,SAAAA,EAAWO,OACVG,EAAAA,KAACiC,EAAM,GAAN,CACC,SAAA,CAAAvI,MAACuI,EAAM,GAAN,CAAS,EAAG,IAAMxC,WAAKyC,IAAI,EAC5BxI,EAAAA,IAACuI,EAAM,GAAN,CACExC,WAAKiC,OAAS,OACbhI,EAAAA,IAAC6H,EAAA,CACC,MACE,GAAG9B,EAAK0C,KAAK,GAAGC,gBAAkB,MAAA,CACnC,EAED3C,EAAKiC,OAAS,WAChB1B,EAAAA,KAACG,EAAA,CACC,SAAA,CAAAzG,EAAAA,IAAC2I,GAAA,CACC,MACGC,OAAOC,SAAS9C,EAAK0C,KAAK,EACzB1C,EAAK+C,aACP,IAEF,KAAM,CAAA,CAAE,SAETlB,EAAA,CACE7B,SAAAA,CAAAA,EAAK0C,MAAM,MAAI1C,EAAK+C,YAAAA,CAAAA,CACvB,CAAA,CAAA,CACF,EACE/C,EAAKiC,OAAS,YACfJ,EAAA,CAAK,KAAK,KAAM7B,SAAAA,EAAK0C,KAAAA,CAAM,EAC1B1C,EAAKiC,OAAS,QAChBhI,EAAAA,IAAC4H,EAAA,CAAK,KAAK,KACRmB,YACCH,OAAOI,WAAWjD,EAAK0C,KAAK,EAC5B,CAAEQ,OAAQ,CAAA,CACZ,EACF,EAEAjJ,MAAC4H,GAAK,KAAK,KAAM7B,SAAAA,EAAK0C,KAAAA,CAAM,CAAA,CAEhC,CAAA,CAAA,EAnCa1C,EAAKyC,GAoCpB,CACD,CAAA,CACH,CAAA,CACF,CAAA,CAAA,EApDUvC,CAqDZ,CACD,CAAA,CACH,CAAA,CACF,CAAA,CACF,CAAA,CAAA,EAnEK,sBAAsBhF,CAAS,EAoEtC,GACCd,GAAAA,YAAAA,EAASS,sBACR0F,EAAAA,KAACgB,EAAU,KAAV,CAEC,MAAM,mBAEN,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAkB,EAAE,CAAA,CAC9C,QACCuF,EAAU,MAAV,CACC,SAAAtH,MAACuH,EAAA,CAAM,WAAU,GAAC,EAAE,KAClB,SAAAvH,EAAAA,IAACkJ,IACC,UAAAjI,EACA,WAAW,IACX,SAAU2D,EAAW,EAEzB,CAAA,CACF,CAAA,CAAA,EAdK,oBAAoB3D,CAAS,EAepC,GAEDd,GAAAA,YAAAA,EAASS,sBACR0F,EAAAA,KAACgB,EAAU,KAAV,CAEC,MAAM,kBAEN,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAiB,EAAE,CAAA,CAC7C,QACCuF,EAAU,MAAV,CACC,SAAAtH,MAACuH,EAAA,CAAM,WAAU,GAAC,EAAE,KAClB,SAAAvH,EAAAA,IAACkJ,IACC,UAAAjI,EACA,WAAW,IACX,SAAU2D,EAAW,EAEzB,CAAA,CACF,CAAA,GAdK,mBAAmB3D,CAAS,EAenC,CAAA,CAAA,CAEJ,CAAA,CAAA,CACF,CAAA,CACF,CAEJ,CAKO,SAASkI,GAAiB,CAC/BC,MAAAA,EACAC,oBAAAA,EAAsB,GACtBC,YAAAA,CAKD,EAAG,CACF,KAAM,CAAE/G,aAAAA,EAAca,eAAAA,CAAAA,EAAmBlB,EAAAA,EAEnCqH,EAAQC,EAAS,SAAS,EAC1B5F,EAAWC,EAAAA,EAEX4F,EAAsBrF,EAAAA,QAC1B,IAAM,CACJ,CACEsF,SAAU,OACVC,SAAU,GACVC,OAASC,GACPvD,EAAAA,KAACG,GAAM,QAAQ,OAAO,KAAK,SACzB,SAAA,CAAAzG,EAAAA,IAACE,GAAA,CAAuB,QAAS2J,CAAAA,CAAO,EACxC7J,EAAAA,IAAC4H,EAAA,CAAMiC,SAAAA,EAAO1E,IAAAA,CAAK,EAClB0E,EAAOlD,kBACN3G,EAAAA,IAAC4G,GAAM,MAAM,MACX,eAAAC,EAAA,CAAA9E,GAAA,SAA+B,CAAA,CACjC,CAAA,CAAA,CAEJ,CAAA,EAGJ,CACE2H,SAAU,eACVC,SAAU,GACVC,OAASC,GAAW,CAClB,MAAM1F,EAAc5B,GAAAA,YAAAA,EAAc8B,QACzByF,EAAEvF,OAASsF,EAAOrF,cAE3B,OACE8B,EAAAA,KAACG,EAAA,CAAM,IAAI,KACT,SAAA,CAAAzG,MAAC4H,EAAA,CACEzD,SAAAA,EAAcA,EAAYgB,KAAO0E,EAAOrF,aAC3C,EACCjC,GAAgB,CAAC4B,GAAenE,EAAAA,IAACD,EAAA,CAAA,CAAoB,CAAA,EACxD,CAEJ,CAAA,EAEF,CACE2J,SAAU,SACVC,SAAU,GACVC,OAASC,GAAW,CAClB,MAAMlF,EAASvB,GAAAA,YAAAA,EAAgBiB,QAAYK,EAAEH,OAASsF,EAAOlF,QAC7D,OACE2B,EAAAA,KAACG,EAAA,CAAM,IAAI,KACT,SAAA,CAAAzG,MAAC4H,EAAA,CAAMjD,SAAAA,EAASA,EAAOQ,KAAO0E,EAAOlF,OAAO,EAC3C,CAACkF,EAAOjJ,qBAAuBZ,EAAAA,IAACD,EAAA,CAAA,CAAoB,CAAA,EACvD,CAEJ,CAAA,EAEFgK,EAAc,CACZL,SAAU,aAAA,CACX,EACDK,EAAc,CACZL,SAAU,QAAA,CACX,EACD,CACEA,SAAU,SACVC,SAAU,GACVC,OAASC,GAAW,CAClB,MAAMG,EAAWC,GAAoB,GAAGJ,EAAO5B,YAAY,EAAS,EACpE,GAAI+B,GAAYH,EAAOhJ,SAAW,GAChC,OAAOmJ,EAASH,CAAM,CAE1B,CAAA,EAEF,CACEH,SAAU,cACVC,SAAU,EAAA,EAEZ,CACED,SAAU,iBACVC,SAAU,GACVC,OAASC,GAAWA,EAAOnJ,eAAewJ,KAAK,IAAI,CAAA,CACpD,EAEH,CAAC3H,CAAY,CACf,EAEM,CAAC4H,EAAuBC,CAAwB,EAAIC,EAAAA,SAExD,IAAI,EACAC,EAA0BlG,EAAAA,QAAQ,IACjChB,EAEEA,EACJmH,OAAQ7F,GAAMA,EAAEF,eAAiB2F,CAAqB,EACtDhE,IAAKzB,IAAO,CACX+D,MAAO/D,EAAEH,KACTiG,aAAc9F,EAAES,IAAAA,EAChB,EAPwB,CAAA,EAQ3B,CAAC/B,EAAgB+G,CAAqB,CAAC,EAEpCM,EAAoBC,GAAsB,CAC9C3F,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpBiD,IAAK1D,EAAa2C,aAClBiB,OAAQ,CACNC,KAAM,CAAA,EACNX,aAAc,CACZmG,OAAQ,CAAC,EAACrB,GAAAA,MAAAA,EAAa9E,cACvB,GAAI8E,GAAAA,MAAAA,EAAa9E,aACb,CAAEiE,MAAOa,EAAY9E,YAAAA,EACrB,CAAA,EACJoG,WAAY,SACZC,QAAStI,EACLA,EAAa4D,IAAK7B,IAAO,CACvBmE,MAAOnE,EAAEC,KACTiG,aAAclG,EAAEa,IAAAA,EAChB,EACF,CAAA,EACJ2F,cAAgBrC,GAAU2B,EAAyB3B,CAAK,CAAA,EAE1D9D,OAAQ,CACNgG,OAAQ,CAAC,EAACrB,GAAAA,MAAAA,EAAa3E,QACvB,GAAI2E,GAAAA,MAAAA,EAAa3E,OAAS,CAAE8D,MAAOa,EAAY3E,MAAAA,EAAW,CAAA,EAC1DiG,WAAY,SACZG,SAAU,CAACZ,EACXU,QAASP,CAAAA,EAEXhK,OAAQ,CAAA,CAAC,EAEXoF,cAAgBpD,GAAS,CACvBiH,EAAM5F,aAAAA,EACNC,EACEyF,EAAsB,WAAW/G,EAAK2C,EAAE,IAAM,cAAc3C,EAAK2C,EAAE,GACrE,CACF,EACAG,QAASA,IAAM,CACbgF,EAAyB,IAAI,CAC/B,CAAA,CACD,EAEK,CAACY,EAAmBC,CAAoB,EAAIZ,EAAAA,SAEhD7I,MAAS,EAEL0J,EAAoB5F,GAAsB,CAC9CP,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvBwD,eAAc1D,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAA+B,EAC/CiD,IAAK1D,EAAa2C,aAClBgB,GAAI+F,EACJxF,eACExF,EAAAA,IAACyF,EAAA,CAAM,MAAM,MACX5D,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAA+C,EAClD,EAEFwH,MAAAA,CAAAA,CACD,EAEK4B,EAAkBrG,GAAoB,CAC1CC,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrBiD,IAAK1D,EAAa2C,aAClBgB,GAAI+F,EACJ9F,OAAQ,CACNC,KAAM,CAAA,EACN7E,OAAQ,CAAA,CAAC,EAEXiJ,MAAAA,CAAAA,CACD,EAEK6B,EAAa3H,cAAaoG,GACvB,CACL,CACE7H,WAAOoF,EAAA,EAAW,EAClBrC,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxBkF,QAASA,IAAM,CACbjG,GAAe,CACbC,UAAW4I,EAAO5E,GAClB/D,SAAUA,IAAM,CACdqI,EAAM5F,aAAAA,CACR,CAAA,CACD,CACH,CAAA,EAEF0H,GAAc,CACZtG,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrBkF,QAASA,IAAM,CACbgE,EAAqBpB,EAAO5E,EAAE,EAC9BkG,EAAgBjE,KAAAA,CAClB,CAAA,CACD,EACDoE,GAAgB,CACdvG,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvBkF,QAASA,IAAM,CACbgE,EAAqBpB,EAAO5E,EAAE,EAC9BiG,EAAkBhE,KAAAA,CACpB,CAAA,CACD,CAAC,EAEH,CAAA,CAAE,EAECqE,EAAenH,EAAAA,QAAQ,IACpB,CACLpE,EAAAA,IAACwL,GAAA,CAEC,QAAQ3J,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAa,EACtB,QAAS,IAAM,CACbqI,EAAyB,IAAI,EAC7BK,EAAkBvD,KAAAA,CACpB,CAAA,EALI,cAMJ,EAEH,CAACuD,EAAkBvD,IAAI,CAAC,EAE3B,OACEZ,EAAAA,KAAAD,WAAA,CACGoE,SAAAA,CAAAA,EAAkBjE,MAClB2E,EAAgB3E,MAChB0E,EAAkB1E,MAClB6C,GACCrJ,EAAAA,IAACyL,EAAA,CACC,MAAM5J,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAgB,EACvB,KAAM,KACN,cAAgBA,GACV,CAACA,GAAM,CAACA,EAAG2J,WAAW,UAAU,EAAU,GAE5C1L,MAAC0D,GAAA,CACC,UAAW3B,EAAG4J,QAAQ,WAAY,EAAE,EACpC,aAAcpC,EAAM5F,YAAAA,CAAa,EAGrC,EAGN3D,EAAAA,IAAC4L,EAAA,CACC,IAAKvK,EAAOC,EAAa2C,YAAY,EACrC,WAAYsF,EACZ,QAASE,EACT,MAAO,CACL,GAAGL,EACHyC,eAAgB,GAChBC,WAAa3L,GACXyD,EACEyF,EACI,WAAWlJ,EAAQ8E,EAAE,IACrB,cAAc9E,EAAQ8E,EAAE,GAC9B,EACFmG,WAAAA,EACAG,aAAAA,EACAQ,OAAQ,CACN,GAAG3C,EAAM2C,MAAAA,EAEXC,aAAc,CACZ,CACE7G,KAAM,SACN8G,MAAKpK,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAQ,EACfiG,KAAM,SAAA,EAER,CACE7C,KAAM,eACN8G,MAAKpK,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrBiG,KAAM,SACNkE,eAAgBA,IACd3J,EACIA,EAAa4D,IAAK7B,IAAO,CAAEmE,MAAOnE,EAAEC,KAAM0H,MAAO3H,EAAEa,IAAAA,EAAO,EAC1D,CAAA,CAAA,EAER,CACEA,KAAM,SACN8G,MAAKpK,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAQ,EACfiG,KAAM,SACNkE,eAAgBA,IACd9I,EACIA,EAAe+C,IAAKzB,IAAO,CACzB+D,MAAO/D,EAAEH,KACT0H,MAAOvH,EAAES,IAAAA,EACT,EACF,CAAA,CAAA,CACP,CAAA,CAEL,CAAE,CAAA,EAEN,CAEJ,CCvwBO,SAASgH,GAAmB,CACjChI,YAAAA,EACAiI,OAAAA,CAIF,EAAG,CACD,MAAMxI,EAAWC,EAAAA,EACX0F,EAAQC,EAAS,iBAAiB,EAElC6C,EAA8BjI,EAAAA,QAAQ,IACnC,CACL,CACEsF,SAAU,OACV3E,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAM,CAAC,EAEhBuK,GAAkB,CAAA,CAAE,EACpB,CACE5C,SAAU,eACV3E,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,CAAC,EAEvBgI,EAAc,CACZL,SAAU,aACV3E,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,CAAC,CACzB,CAAC,EAEH,CAAA,CAAE,EAEL,OACE/B,EAAAA,IAAC4L,EAAA,CACC,IAAKvK,EAAOC,EAAaiC,mBAAmB,EAC5C,WAAYgG,EACZ,QAAS8C,EACT,MAAO,CACLR,eAAgB,GAChBU,aAAc,GACdT,WAAa3L,GAAY,CACvByD,EAAS,GAAGwI,GAAU,GAAG,WAAWjM,EAAQoE,IAAI,GAAG,CACrD,EACAiI,cAAgBlK,GACV6B,EACK7B,EAAKiI,OAAQ7F,GAAWA,EAAEF,eAAiBL,CAAW,EAExD7B,CACT,EACA,CAGR,CAEA,SAASmK,GAAkB,CACzBC,gBAAAA,CACqC,EAAG,WACvB7I,EAAAA,EAEjB,KAAM,CAAEtB,aAAAA,EAAuBC,WAAAA,CAAAA,EAAeN,EAAqB,CACjEE,eAAgB,EAAA,CACjB,EACK+B,EAAcC,EAAAA,QAClB,IAAM7B,GAAAA,YAAAA,EAAc8B,KAAMyF,GAAMA,EAAEvF,OAASmI,GAC3C,CAACnK,EAAcmK,CAAe,CAChC,EAEA,OACE1M,EAAAA,IAAAqG,EAAAA,SAAA,CACE,gBAACE,EAAA,CACC,SAAA,CAAAvG,EAAAA,IAACyG,EAAA,CAAM,KAAK,SACV,SAAAzG,EAAAA,IAAC0G,EAAA,CAAY,KAAK,KACfvC,SAAAA,EAAcA,EAAYgB,KAAOuH,CAAAA,CACpC,EACF,EAEC,CAACvI,GACAnE,EAAAA,IAACyF,GACC,MAAM,MACN,MAAM5D,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAW,EAClB,KAAM/B,EAAAA,IAAC2M,OAEP,SAAA3M,EAAAA,IAAC4H,GAAK/F,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAyB,EAAE,CAAA,CACpC,EAGFuE,OAACgB,GACC,SAAQ,GACR,aAAc,CAAC,oBAAqB,iBAAiB,EAErD,SAAA,CAAAhB,EAAAA,KAACgB,EAAU,KAAV,CAAe,MAAM,oBACpB,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAA0B,EAAE,CAAA,CACtD,EACA/B,EAAAA,IAACsH,EAAU,MAAV,CACC,SAAAtH,MAAC4M,EAAA,CAAK,WAAU,GACd,SAAAtG,EAAAA,KAACC,EAAA,CAAM,IAAI,WAAW,IAAI,KACxB,SAAA,CAAAvG,EAAAA,IAACwH,EAAA,CACC,QAAShF,EACT,aAAc,CAAEiF,QAAS,CAAA,EAAI,EAE/BzH,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAM,EACZ,MAAOoC,GAAAA,YAAAA,EAAagB,KACpB,KAAK,MAAA,CAAM,EAEbnF,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAM,EACZ,MAAOoC,GAAAA,YAAAA,EAAaI,KACpB,KAAK,MAAA,CAAM,EAEbvE,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAa,EACnB,MAAOoC,GAAAA,YAAAA,EAAa0I,YACpB,KAAK,MAAA,CAAM,EAEZ,EAAC1I,GAAAA,MAAAA,EAAa2I,aACb9M,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAiB,EACvB,OAAOoC,EAAAA,GAAAA,YAAAA,EAAa4I,kBAAb5I,YAAAA,EAA8BgB,KACrC,KAAK,OACL,OACEhB,EAAAA,GAAAA,YAAAA,EAAa4I,kBAAb5I,YAAAA,EAA8Bc,MAAO,KACjC,iBAAgBd,EAAAA,GAAAA,YAAAA,EAAa4I,kBAAb5I,YAAAA,EAA8Bc,EAAE,IAChDzD,OAEN,iBAAgB,GAAA,EAGpBxB,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAe,EACrB,MAAOoC,GAAAA,YAAAA,EAAa6I,cACpB,KAAK,MAAA,CAAM,EAEbhN,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAS,EACf,MAAOoC,GAAAA,YAAAA,EAAa2I,WACpB,KAAK,SAAA,CAAS,CAAA,CAAA,CAElB,EACF,CAAA,CACF,CAAA,EACF,EACAxG,EAAAA,KAACgB,EAAU,KAAV,CAAe,MAAM,kBACpB,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAmB,EAAE,CAAA,CAC/C,EACA/B,MAACsH,EAAU,MAAV,CACC,eAACsF,EAAA,CAAK,WAAU,GACd,SAAA5M,MAACmM,IAAmB,YAAaO,EAAiB,OAAO,IAAA,CAAI,EAC/D,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAEJ,CAEA,SAASO,GAAoB,CAC3BC,kBAAAA,CAGD,EAAG,WACF,KAAM,CAAE9J,eAAAA,EAAgBb,aAAAA,EAAciB,QAAAA,EAAShB,WAAAA,CAAAA,EAC7CN,EAAAA,EACIuC,EAAgBL,EAAAA,QACpB,IAAMhB,GAAAA,YAAAA,EAAgBiB,KAAMK,GAAMA,EAAEH,OAAS2I,GAC7C,CAAC9J,EAAgB8J,CAAiB,CACpC,EACM/I,EAAcC,EAAAA,QAClB,IAAM7B,GAAAA,YAAAA,EAAc8B,KAAMC,GAAMA,EAAEC,QAASE,GAAAA,YAAAA,EAAeD,eAC1D,CAACpB,EAAgBb,CAAY,CAC/B,EAEA,cACGgE,EAAA,CACC,SAAA,CAAAvG,EAAAA,IAACyG,EAAA,CAAM,QAAQ,SACb,SAAAzG,EAAAA,IAACmN,EAAA,CAAM,MAAO,EACX1I,SAAAA,EAAgBA,EAAcU,KAAO+H,CAAAA,CACxC,EACF,EAEC,CAACzI,GACAzE,EAAAA,IAAC4H,EAAA,CAAK,MAAO,CAAEwF,UAAW,QAAA,EACxB,eAAAvG,EAAA,CAAA9E,GAAA,SAAwC,CAAA,CAC1C,QAGD6K,EAAA,CAAK,WAAU,GACd,SAAAtG,EAAAA,KAACC,EAAA,CAAM,IAAI,KACT,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAM,QAAQ,gBACb,SAAA,CAAAzG,EAAAA,IAACmN,EAAA,CAAM,MAAO,EACZ,SAAAnN,EAAAA,IAAA6G,EAAA,CAAA9E,GAAA,SAAyC,CAAA,CAC3C,EACA/B,EAAAA,IAACqN,GAAA,CAAW,QAAQ,UAAU,QAAS,IAAM7J,EAAAA,EAC3C,SAAAxD,EAAAA,IAACoH,EAAA,CAAA,CAAW,CAAA,CACd,CAAA,EACF,EAEAd,EAAAA,KAACC,EAAA,CAAM,IAAI,WAAW,IAAI,KACxB,SAAA,CAAAvG,EAAAA,IAACwH,EAAA,CACC,QAAShF,EACT,aAAc,CAAEiF,QAAS,CAAA,EAAI,EAE/BzH,EAAAA,IAAC0H,EAAA,CAAS,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAM,EAAG,MAAO0C,GAAAA,YAAAA,EAAeU,KAAM,KAAK,MAAA,CAAM,EAChEnF,EAAAA,IAAC0H,EAAA,CAAS,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAM,EAAG,MAAO0C,GAAAA,YAAAA,EAAeF,KAAM,KAAK,MAAA,CAAM,EAChEvE,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAa,EACnB,MAAO0C,GAAAA,YAAAA,EAAeoI,YACtB,KAAK,MAAA,CAAM,EAEb7M,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAc,EACpB,MACEoC,EAAcA,EAAYgB,KAAOV,GAAAA,YAAAA,EAAeD,aAElD,KAAK,OACL,KACEL,EACI,WAAWM,GAAAA,YAAAA,EAAeD,YAAY,GACtChD,OAEN,iBAAgB,GAAA,EAEjB,EAACiD,GAAAA,MAAAA,EAAeqI,aACf9M,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAiB,EACvB,OAAO0C,EAAAA,GAAAA,YAAAA,EAAesI,kBAAftI,YAAAA,EAAgCU,KACvC,KAAK,OACL,OACEV,EAAAA,GAAAA,YAAAA,EAAesI,kBAAftI,YAAAA,EAAgCQ,MAAO,KACnC,iBAAgBR,EAAAA,GAAAA,YAAAA,EAAesI,kBAAftI,YAAAA,EAAgCQ,EAAE,IAClDzD,OAEN,iBAAgB,GAAA,EAGpBxB,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAe,EACrB,MAAO0C,GAAAA,YAAAA,EAAeuI,cACtB,KAAK,MAAA,CAAM,EAEbhN,EAAAA,IAAC0H,EAAA,CACC,KAAK7F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAS,EACf,MAAO0C,GAAAA,YAAAA,EAAeqI,WACtB,KAAK,SAAA,CAAS,EAEhBxG,EAAAA,KAACG,EAAA,CAAM,QAAQ,gBAAgB,IAAI,KACjC,SAAA,CAAAH,EAAAA,KAACsB,EAAA,CAAK,GAAG,KAAK,GAAI,IAChB,SAAA,CAAA5H,EAAAA,IAAA6G,EAAA,CAAA9E,GAAA,SAAqB,EAAA,GAAA,EACvB,EACC0C,IAAiBA,GAAAA,YAAAA,EAAe6I,cAAc3M,QAAS,EACtDX,MAAC4G,EAAA,CAAM,MAAM,MAAM,MAAO,CAAEvG,WAAY,MAAA,EACrCoE,SAAAA,EAAc6I,cAAc3M,MAAAA,CAC/B,QAECiH,EAAA,CAAK,GAAG,KACP,SAAA5H,EAAAA,IAAA6G,EAAA,CAAA9E,GAAA,SAAiC,CAAA,CACnC,EAEF/B,EAAAA,IAACmI,EAAA,CAAK,EAAE,OACL1D,SAAAA,GAAAA,YAAAA,EAAe6I,cAAcnH,IAAI,CAACiC,EAAOC,IACxCrI,EAAAA,IAACmI,EAAK,KAAL,CACC,SAAAnI,EAAAA,IAACsI,EAAA,CAAMF,SAAAA,CAAAA,CAAM,GADC,GAAGC,CAAC,IAAID,CAAK,EAE7B,EACD,CACH,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,QAECwE,EAAA,CAAK,WAAU,GACd,SAAAtG,EAAAA,KAACC,EAAA,CAAM,IAAI,KACT,SAAA,CAAAvG,EAAAA,IAACmN,EAAA,CAAM,MAAO,EACZ,SAAAnN,EAAAA,IAAA6G,EAAA,CAAA9E,GAAA,SAAuB,CAAA,CACzB,EAEA/B,MAACmJ,IACC,MAAO,CAAE4C,OAAQ,CAAEpH,OAAQuI,CAAAA,CAAkB,EAC7C,oBAAqB,GACrB,YAAa,CACX1I,aAAcC,GAAAA,YAAAA,EAAeD,aAC7BG,OAAQuI,CAAAA,CACV,CAAE,CAAA,CAAA,CAEN,CAAA,CACF,CAAA,EACF,CAEJ,CAKO,SAASK,GAAqB,CACnCnE,MAAAA,CAGD,EAAG,CACF,MAAMG,EAAQC,EAAS,cAAc,EAC/B5F,EAAWC,EAAAA,EAEX2J,EAA0BpJ,EAAAA,QAC9B,IAAM,CACJ,CACEsF,SAAU,OACV3E,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAM,CAAC,EAEhBuK,GAAkB,EAAE,EACpBvC,EAAc,CACZL,SAAU,aACV3E,MAAKlD,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,CAAC,CACvB,CAAC,EAEJ,CAAA,CACF,EAEA,OACEuE,EAAAA,KAAAD,WAAA,CACE,SAAA,CAAArG,EAAAA,IAACyL,EAAA,CACC,MAAM5J,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAqB,EAC5B,KAAM,KACN,cAAgBA,GACV,CAACA,GAAM,CAACA,EAAG2J,WAAW,OAAO,EAAU,SAExCe,GAAA,CAAkB,gBAAiB1K,EAAG4J,QAAQ,QAAS,EAAE,EAAE,EAE9D,EAEJ3L,EAAAA,IAACyL,EAAA,CACC,MAAM5J,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAuB,EAC9B,KAAM,KACN,cAAgBA,GACV,CAACA,GAAM,CAACA,EAAG2J,WAAW,SAAS,EAAU,SAE1CuB,GAAA,CACC,kBAAmBlL,EAAG4J,QAAQ,UAAW,EAAE,EAAE,EAGjD,EAEJ3L,EAAAA,IAAC4L,EAAA,CACC,IAAKvK,EAAOC,EAAa2B,kBAAkB,EAC3C,WAAYsG,EACZ,QAASiE,EACT,MAAO,CACL,GAAGpE,EACHyC,eAAgB,GAChBU,aAAc,GACdT,WAAa3L,GAAYyD,EAAS,UAAUzD,EAAQoE,IAAI,GAAG,EAC3DwH,OAAQ,CACN,GAAG3C,EAAM2C,MAAAA,CACX,CACF,CAAE,CAAA,EAEN,CAEJ,CCzXA,SAAwB0B,IAAyB,OAC/C,KAAM,CAAEnL,KAAMoL,EAAgBhL,QAAAA,CAAAA,EAAYE,EAAiC,CACzEE,SAAU,CAAC,yBAAyB,EACpCC,QAASA,IACP5B,GACG6B,IAAI3B,EAAOC,EAAaqM,uBAAuB,CAAC,EAChDlM,KAAMyB,GAAQA,EAAIZ,IAAI,EAC3Ba,UAAW,GAAK,CACjB,EAEKyK,EAAYxJ,EAAAA,QAAQ,KAEtBsJ,GAAAA,YAAAA,EAAgBG,kBAChBH,EAAeG,gBAAgBlN,OAAS,EAEzC,CAAC+M,CAAc,CAAC,EAEnB,cACGpG,EAAA,CAAU,SAAQ,GAAC,aAAc,CAAC,aAAa,EAC9C,SAAA,CAAAhB,EAAAA,KAACgB,EAAU,KAAV,CAAe,MAAM,cACpB,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAU,EAAE,CAAA,CACtC,EACA/B,MAACsH,EAAU,MAAV,CACC,eAAC6B,GAAA,CAAiB,MAAO,CAAA,CAAC,CAAE,CAAA,CAC9B,CAAA,EACF,EACA7C,EAAAA,KAACgB,EAAU,KAAV,CAAe,MAAM,cACpB,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAiB,EAAE,CAAA,CAC7C,QACCuF,EAAU,MAAV,CACC,SAAAtH,MAACmM,KAAkB,CAAA,CACrB,CAAA,EACF,EACA7F,EAAAA,KAACgB,EAAU,KAAV,CAAe,MAAM,eACpB,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAe,EAAE,CAAA,CAC3C,EACA/B,MAACsH,EAAU,MAAV,CACC,eAACiG,GAAA,CAAqB,MAAO,CAAA,CAAC,CAAE,CAAA,CAClC,CAAA,EACF,EACAjH,EAAAA,KAACgB,EAAU,KAAV,CAAe,MAAM,gBACpB,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAgB,EAAE,CAAA,CAC5C,QACCuF,EAAU,MAAV,CACC,SAAAhB,OAACC,EAAA,CAAM,IAAI,KACT,SAAA,CAAAD,EAAAA,KAACG,EAAA,CACC,QAAQ,eACR,KAAK,SACL,MAAO,CAAEqH,MAAO,MAAA,EAEfF,SAAAA,CAAAA,QACEnI,EAAA,CACC,KAAM,GACN,MAAM,MACN,MAAM5D,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAA0B,EACjC,KAAM/B,EAAAA,IAAC+N,OAEP,SAAA/N,EAAAA,IAAC4H,GAAK/F,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAmC,CAAC,CAAC,CAAA,CAC9C,EAEA/B,EAAAA,IAACyF,EAAA,CACC,KAAM,GACN,MAAM,QACN,MAAM5D,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAyB,EAChC,KAAM/B,EAAAA,IAAC+N,OAEP,SAAA/N,EAAAA,IAAC4H,GAAK/F,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAsC,EAAE,CAAA,CACjD,EAEF/B,EAAAA,IAACqN,GAAA,CAAW,QAAQ,UAAU,QAAS,IAAM3K,EAAAA,EAC3C,SAAA1C,EAAAA,IAACoH,EAAA,CAAA,CAAW,CAAA,CACd,CAAA,EACF,EACCwG,SACEzF,EAAA,CACEuF,UAAAA,EAAAA,GAAAA,YAAAA,EAAgBG,kBAAhBH,YAAAA,EAAiCvH,IAAI,CAACiC,EAAOC,IAC5CrI,EAAAA,IAACmI,EAAK,KAAL,CACC,eAACG,EAAA,CAAMF,SAAAA,EAAMxG,QAAQ,GADPyG,CAEhB,EACD,CACH,CAAA,CAAA,CAEJ,CAAA,CACF,CAAA,EACF,EACA/B,EAAAA,KAACgB,EAAU,KAAV,CAAe,MAAM,WACpB,SAAA,CAAAtH,EAAAA,IAACsH,EAAU,QAAV,CACC,eAACZ,EAAA,CAAY,KAAK,KAAK7E,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAkB,EAAE,CAAA,CAC9C,EACA/B,EAAAA,IAACsH,EAAU,MAAV,CACC,SAAAtH,EAAAA,IAACgO,IAAkB,KAAM,CAAC,sBAAsB,CAAA,CAAE,CAAA,CACpD,CAAA,CAAA,CACF,CAAA,EACF,CAEJ"}