{"version":3,"file":"SalesOrderAllocationTable-iSJruf2u.js","sources":["../../../../../../frontend/src/tables/sales/SalesOrderAllocationTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { IconTruckDelivery } from '@tabler/icons-react';\nimport { formatDate } from '../../defaults/formatters';\nimport { useSalesOrderAllocationFields } from '../../forms/SalesOrderForms';\nimport type { StockOperationProps } from '../../forms/StockForms';\nimport {\n  useBulkEditApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useStockAdjustActions } from '../../hooks/UseStockAdjustActions';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport {\n  DescriptionColumn,\n  LocationColumn,\n  PartColumn,\n  ReferenceColumn,\n  StatusColumn\n} from '../ColumnRenderers';\nimport { IncludeVariantsFilter, StockLocationFilter } from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport default function SalesOrderAllocationTable({\n  partId,\n  stockId,\n  orderId,\n  lineItemId,\n  shipmentId,\n  showPartInfo,\n  showOrderInfo,\n  allowEdit,\n  isSubTable,\n  modelTarget,\n  modelField\n}: Readonly<{\n  partId?: number;\n  stockId?: number;\n  orderId?: number;\n  lineItemId?: number;\n  shipmentId?: number;\n  showPartInfo?: boolean;\n  showOrderInfo?: boolean;\n  allowEdit?: boolean;\n  isSubTable?: boolean;\n  modelTarget?: ModelType;\n  modelField?: string;\n}>) {\n  const user = useUserState();\n\n  const tableId = useMemo(() => {\n    let id = 'salesorderallocations';\n\n    if (!!partId) {\n      id += '-part';\n    }\n\n    if (isSubTable) {\n      id += '-sub';\n    }\n\n    return id;\n  }, [partId, isSubTable]);\n\n  const table = useTable(tableId);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    const filters: TableFilter[] = [\n      {\n        name: 'outstanding',\n        label: t`Outstanding`,\n        description: t`Show outstanding allocations`\n      },\n      {\n        name: 'assigned_to_shipment',\n        label: t`Assigned to Shipment`,\n        description: t`Show allocations assigned to a shipment`\n      },\n      StockLocationFilter()\n    ];\n\n    if (!!partId) {\n      filters.push(IncludeVariantsFilter());\n    }\n\n    return filters;\n  }, [partId]);\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      ReferenceColumn({\n        accessor: 'order_detail.reference',\n        title: t`Sales Order`,\n        switchable: false,\n        sortable: true,\n        hidden: showOrderInfo != true\n      }),\n      DescriptionColumn({\n        accessor: 'order_detail.description',\n        hidden: showOrderInfo != true\n      }),\n      StatusColumn({\n        accessor: 'order_detail.status',\n        model: ModelType.salesorder,\n        title: t`Order Status`,\n        hidden: showOrderInfo != true\n      }),\n      PartColumn({\n        hidden: showPartInfo != true,\n        part: 'part_detail'\n      }),\n      DescriptionColumn({\n        accessor: 'part_detail.description',\n        hidden: showPartInfo != true\n      }),\n      {\n        accessor: 'part_detail.IPN',\n        title: t`IPN`,\n        hidden: showPartInfo != true,\n        sortable: true,\n        ordering: 'IPN'\n      },\n      {\n        accessor: 'serial',\n        title: t`Serial Number`,\n        sortable: true,\n        switchable: true,\n        render: (record: any) => record?.item_detail?.serial\n      },\n      {\n        accessor: 'batch',\n        title: t`Batch Code`,\n        sortable: true,\n        switchable: true,\n        render: (record: any) => record?.item_detail?.batch\n      },\n      {\n        accessor: 'available',\n        title: t`Available Quantity`,\n        sortable: false,\n        hidden: isSubTable,\n        render: (record: any) => record?.item_detail?.quantity\n      },\n      {\n        accessor: 'quantity',\n        title: t`Allocated Quantity`,\n        sortable: true\n      },\n      LocationColumn({\n        accessor: 'location_detail',\n        switchable: true,\n        sortable: true\n      }),\n      {\n        accessor: 'shipment_detail.reference',\n        title: t`Shipment`,\n        switchable: true,\n        sortable: false,\n        render: (record: any) => {\n          return record.shipment_detail?.reference ?? t`No shipment`;\n        }\n      },\n      {\n        accessor: 'shipment_date',\n        title: t`Shipment Date`,\n        switchable: true,\n        sortable: true,\n        render: (record: any) => {\n          if (record.shipment_detail?.shipment_date) {\n            return formatDate(record.shipment_detail.shipment_date);\n          } else if (record.shipment) {\n            return t`Not shipped`;\n          } else {\n            return t`No shipment`;\n          }\n        }\n      }\n    ];\n  }, [showOrderInfo, showPartInfo, isSubTable]);\n\n  const [selectedAllocation, setSelectedAllocation] = useState<number>(0);\n\n  const [selectedShipment, setSelectedShipment] = useState<any | null>(null);\n\n  const editAllocationFields = useSalesOrderAllocationFields({\n    orderId: orderId,\n    shipment: selectedShipment\n  });\n\n  const editAllocation = useEditApiFormModal({\n    url: ApiEndpoints.sales_order_allocation_list,\n    pk: selectedAllocation,\n    fields: editAllocationFields,\n    title: t`Edit Allocation`,\n    onFormSuccess: () => table.refreshTable()\n  });\n\n  const deleteAllocation = useDeleteApiFormModal({\n    url: ApiEndpoints.sales_order_allocation_list,\n    pk: selectedAllocation,\n    title: t`Delete Allocation`,\n    onFormSuccess: () => table.refreshTable()\n  });\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      // Do not allow \"shipped\" items to be manipulated\n      const isShipped = !!record.shipment_detail?.shipment_date;\n\n      if (isShipped || !allowEdit) {\n        return [];\n      }\n\n      return [\n        RowEditAction({\n          tooltip: t`Edit Allocation`,\n          onClick: () => {\n            setSelectedAllocation(record.pk);\n            setSelectedShipment(record.shipment);\n            editAllocation.open();\n          }\n        }),\n        RowDeleteAction({\n          tooltip: t`Delete Allocation`,\n          onClick: () => {\n            setSelectedAllocation(record.pk);\n            deleteAllocation.open();\n          }\n        })\n      ];\n    },\n    [allowEdit, user]\n  );\n\n  const stockOperationProps: StockOperationProps = useMemo(() => {\n    // Extract stock items from the selected records\n    // Note that the table is actually a list of SalesOrderAllocation instances,\n    // so we need to reconstruct the stock item details\n    const stockItems: any[] = table.selectedRecords\n      .filter((item: any) => !!item.item_detail)\n      .map((item: any) => {\n        return {\n          ...item.item_detail,\n          part_detail: item.part_detail,\n          location_detail: item.location_detail\n        };\n      });\n\n    return {\n      items: stockItems,\n      model: ModelType.stockitem,\n      refresh: table.refreshTable\n    };\n  }, [table.selectedRecords, table.refreshTable]);\n\n  const stockAdjustActions = useStockAdjustActions({\n    formProps: stockOperationProps,\n    merge: false,\n    assign: false,\n    delete: false,\n    add: false,\n    count: false,\n    remove: false\n  });\n\n  // A subset of the selected allocations, which can be assigned to a shipment\n  const nonShippedAllocationIds: number[] = useMemo(() => {\n    // Only allow allocations which have not been shipped\n    return (\n      table.selectedRecords?.filter((record) => {\n        return !record.shipment_detail?.shipment_date;\n      }) ?? []\n    ).map((record: any) => record.pk);\n  }, [table.selectedRecords]);\n\n  const setShipment = useBulkEditApiFormModal({\n    url: ApiEndpoints.sales_order_allocation_list,\n    items: nonShippedAllocationIds,\n    title: t`Assign to Shipment`,\n    fields: {\n      shipment: {\n        filters: {\n          order: orderId,\n          shipped: false\n        }\n      }\n    },\n    onFormSuccess: table.refreshTable\n  });\n\n  const tableActions = useMemo(() => {\n    return [\n      stockAdjustActions.dropdown,\n      <ActionButton\n        tooltip={t`Assign to shipment`}\n        icon={<IconTruckDelivery />}\n        onClick={() => {\n          setShipment.open();\n        }}\n        disabled={nonShippedAllocationIds.length == 0}\n        hidden={\n          !orderId || !allowEdit || !user.hasChangeRole(UserRoles.sales_order)\n        }\n        // TODO: Hide if order is already shipped\n      />\n    ];\n  }, [\n    allowEdit,\n    nonShippedAllocationIds,\n    orderId,\n    user,\n    stockAdjustActions.dropdown\n  ]);\n\n  return (\n    <>\n      {setShipment.modal}\n      {editAllocation.modal}\n      {deleteAllocation.modal}\n      {!isSubTable && stockAdjustActions.modals.map((modal) => modal.modal)}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.sales_order_allocation_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          params: {\n            part_detail: showPartInfo ?? false,\n            order_detail: showOrderInfo ?? false,\n            item_detail: true,\n            location_detail: true,\n            line: lineItemId,\n            part: partId,\n            order: orderId,\n            shipment: shipmentId,\n            item: stockId\n          },\n          enableSearch: !isSubTable,\n          enableRefresh: !isSubTable,\n          enableColumnSwitching: !isSubTable,\n          enableFilters: !isSubTable,\n          enableDownload: !isSubTable,\n          enableSelection: !isSubTable,\n          minHeight: isSubTable ? 100 : undefined,\n          rowActions: rowActions,\n          tableActions: isSubTable ? undefined : tableActions,\n          tableFilters: tableFilters,\n          modelField: modelField ?? 'order',\n          enableReports: !isSubTable,\n          enableLabels: !isSubTable,\n          printingAccessor: 'item',\n          modelType: modelTarget ?? ModelType.salesorder\n        }}\n      />\n    </>\n  );\n}\n"],"names":["SalesOrderAllocationTable","partId","stockId","orderId","lineItemId","shipmentId","showPartInfo","showOrderInfo","allowEdit","isSubTable","modelTarget","modelField","user","useUserState","tableId","useMemo","id","table","useTable","tableFilters","filters","name","label","_i18n","_","description","StockLocationFilter","push","IncludeVariantsFilter","tableColumns","ReferenceColumn","accessor","title","switchable","sortable","hidden","DescriptionColumn","StatusColumn","model","ModelType","salesorder","PartColumn","part","ordering","render","record","item_detail","serial","batch","quantity","LocationColumn","shipment_detail","reference","shipment_date","formatDate","shipment","selectedAllocation","setSelectedAllocation","useState","selectedShipment","setSelectedShipment","editAllocationFields","useSalesOrderAllocationFields","editAllocation","useEditApiFormModal","url","ApiEndpoints","sales_order_allocation_list","pk","fields","onFormSuccess","refreshTable","deleteAllocation","useDeleteApiFormModal","rowActions","useCallback","RowEditAction","tooltip","onClick","open","RowDeleteAction","stockOperationProps","items","selectedRecords","filter","item","map","part_detail","location_detail","stockitem","refresh","stockAdjustActions","useStockAdjustActions","formProps","merge","assign","delete","add","count","remove","nonShippedAllocationIds","setShipment","useBulkEditApiFormModal","order","shipped","tableActions","dropdown","jsx","ActionButton","IconTruckDelivery","length","hasChangeRole","UserRoles","sales_order","jsxs","Fragment","modal","modals","InvenTreeTable","apiUrl","params","order_detail","line","enableSearch","enableRefresh","enableColumnSwitching","enableFilters","enableDownload","enableSelection","minHeight","undefined","enableReports","enableLabels","printingAccessor","modelType"],"mappings":"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"}