{"version":3,"file":"PanelGroup-CYF3auDg.js","sources":["../../../../../../frontend/src/components/plugins/PluginPanel.tsx","../../../../../../frontend/src/hooks/UsePluginPanels.tsx","../../../../../../frontend/src/components/panels/PanelGroup.tsx"],"sourcesContent":["import { Stack } from '@mantine/core';\nimport type { ReactNode } from 'react';\n\nimport type { InvenTreePluginContext } from '@lib/types/Plugins';\nimport type { PluginUIFeature } from './PluginUIFeature';\nimport RemoteComponent from './RemoteComponent';\n\n/**\n * A custom panel which can be used to display plugin content.\n *\n * - Content is loaded dynamically (via the API) when a page is first loaded\n * - Content can be provided from an external javascript module, or with raw HTML\n *\n * If content is provided from an external source, it is expected to define a function `render_panel` which will render the content.\n * const render_panel = (element: HTMLElement, params: any) => {...}\n *\n * Where:\n *  - `element` is the HTML element to render the content into\n *  - `params` is the set of run-time parameters to pass to the content rendering function\n */\nexport default function PluginPanelContent({\n  pluginFeature,\n  pluginContext\n}: Readonly<{\n  pluginFeature: PluginUIFeature;\n  pluginContext: InvenTreePluginContext;\n}>): ReactNode {\n  return (\n    <Stack gap='xs'>\n      <RemoteComponent\n        source={pluginFeature.source}\n        defaultFunctionName='renderPanel'\n        context={pluginContext}\n      />\n    </Stack>\n  );\n}\n","import { type UseQueryResult, useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { InvenTreePluginContext } from '@lib/types/Plugins';\nimport { api } from '../App';\nimport { ApiIcon } from '../components/items/ApiIcon';\nimport type { PanelType } from '../components/panels/Panel';\nimport { useInvenTreeContext } from '../components/plugins/PluginContext';\nimport PluginPanelContent from '../components/plugins/PluginPanel';\nimport {\n  type PluginUIFeature,\n  PluginUIFeatureType\n} from '../components/plugins/PluginUIFeature';\nimport { useGlobalSettingsState } from '../states/SettingsStates';\n\n/**\n * Type definition for a plugin panel which extends the standard PanelType\n * @param pluginName - The name of the plugin which provides this panel\n */\nexport type PluginPanelType = PanelType & {\n  pluginName: string;\n  isLoading: boolean;\n};\n\nexport type PluginPanelSet = {\n  panels: PluginPanelType[];\n  query: UseQueryResult;\n  isLoading: boolean;\n};\n\nexport function usePluginPanels({\n  instance,\n  reloadFunc,\n  model,\n  id\n}: {\n  instance?: any;\n  reloadFunc?: () => void;\n  model?: ModelType | string;\n  id?: string | number | null;\n}): PluginPanelSet {\n  const globalSettings = useGlobalSettingsState();\n\n  const pluginPanelsEnabled: boolean = useMemo(\n    () => globalSettings.isSet('ENABLE_PLUGINS_INTERFACE'),\n    [globalSettings]\n  );\n\n  // API query to fetch initial information on available plugin panels\n  const pluginQuery = useQuery({\n    enabled: pluginPanelsEnabled && !!model && id !== undefined,\n    queryKey: ['custom-plugin-panels', model, id, instance],\n    throwOnError: (error: any) => {\n      console.error('ERR: Failed to fetch plugin panels');\n      return false;\n    },\n    queryFn: async () => {\n      if (!pluginPanelsEnabled || !model) {\n        return Promise.resolve([]);\n      }\n\n      const url = apiUrl(ApiEndpoints.plugin_ui_features_list, undefined, {\n        feature_type: PluginUIFeatureType.panel\n      });\n\n      return api\n        .get(url, {\n          params: {\n            target_model: model,\n            target_id: id\n          }\n        })\n        .then((response: any) => response.data);\n    }\n  });\n\n  // Cache the context data which is delivered to the plugins\n  const inventreeContext = useInvenTreeContext();\n\n  const contextData: InvenTreePluginContext =\n    useMemo<InvenTreePluginContext>(() => {\n      return {\n        ...inventreeContext,\n        id: id,\n        model: model,\n        instance: instance,\n        reloadInstance: reloadFunc\n      };\n    }, [model, id, instance, inventreeContext]);\n\n  const pluginPanels: PluginPanelType[] = useMemo(() => {\n    return (\n      pluginQuery?.data?.map((props: PluginUIFeature) => {\n        const iconName: string = props?.icon || 'ti:plug:outline';\n\n        const ctx: InvenTreePluginContext = {\n          ...contextData,\n          context: props.context\n        };\n\n        return {\n          name: props.key,\n          pluginName: props.plugin_name,\n          label: props.title,\n          icon: <ApiIcon name={iconName} />,\n          content: (\n            <PluginPanelContent pluginFeature={props} pluginContext={ctx} />\n          )\n        };\n      }) ?? []\n    );\n  }, [pluginQuery.data, contextData]);\n\n  const panelSet: PluginPanelSet = useMemo(() => {\n    return {\n      panels: pluginPanels,\n      isLoading: pluginQuery.isLoading || pluginQuery.isFetching,\n      query: pluginQuery\n    };\n  }, [pluginPanels, pluginQuery]);\n\n  return panelSet;\n}\n","import {\n  ActionIcon,\n  Box,\n  Divider,\n  Group,\n  Loader,\n  Paper,\n  Stack,\n  Tabs,\n  Text,\n  Tooltip,\n  UnstyledButton\n} from '@mantine/core';\nimport {\n  IconLayoutSidebarLeftCollapse,\n  IconLayoutSidebarRightCollapse\n} from '@tabler/icons-react';\nimport {\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\nimport {\n  Navigate,\n  Route,\n  Routes,\n  useLocation,\n  useNavigate,\n  useParams\n} from 'react-router-dom';\n\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { identifierString } from '@lib/functions/Conversion';\nimport { cancelEvent } from '@lib/functions/Events';\nimport { eventModified, getBaseUrl } from '@lib/functions/Navigation';\nimport { navigateToLink } from '@lib/functions/Navigation';\nimport { t } from '@lingui/core/macro';\nimport { useShallow } from 'zustand/react/shallow';\nimport { generateUrl } from '../../functions/urls';\nimport { usePluginPanels } from '../../hooks/UsePluginPanels';\nimport { useLocalState } from '../../states/LocalState';\nimport { vars } from '../../theme';\nimport { Boundary } from '../Boundary';\nimport { StylishText } from '../items/StylishText';\nimport type { PanelGroupType, PanelType } from '../panels/Panel';\nimport * as classes from './PanelGroup.css';\n\n/**\n * Set of properties which define a panel group:\n *\n * @param pageKey - Unique key for this panel group\n * @param panels - List of panels to display\n * @param model - The target model for this panel group (e.g. 'part' / 'salesorder')\n * @param id - The target ID for this panel group (set to *null* for groups which do not target a specific model instance)\n * @param instance - The target model instance for this panel group\n * @param reloadInstance - Function to reload the model instance\n * @param selectedPanel - The currently selected panel\n * @param onPanelChange - Callback when the active panel changes\n * @param collapsible - If true, the panel group can be collapsed (defaults to true)\n */\nexport type PanelProps = {\n  pageKey: string;\n  panels: PanelType[];\n  groups?: PanelGroupType[];\n  instance?: any;\n  reloadInstance?: () => void;\n  model?: ModelType | string;\n  id?: number | null;\n  selectedPanel?: string;\n  onPanelChange?: (panel: string) => void;\n  collapsible?: boolean;\n};\n\nfunction BasePanelGroup({\n  pageKey,\n  panels,\n  groups,\n  onPanelChange,\n  selectedPanel,\n  reloadInstance,\n  instance,\n  model,\n  id,\n  collapsible = true\n}: Readonly<PanelProps>): ReactNode {\n  const localState = useLocalState();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const { panel } = useParams();\n\n  const [expanded, setExpanded] = useState<boolean>(true);\n\n  // Hook to load plugins for this panel\n  const pluginPanelSet = usePluginPanels({\n    id: id,\n    model: model,\n    instance: instance,\n    reloadFunc: reloadInstance\n  });\n\n  // Rebuild the list of panels\n  const [allPanels, groupedPanels] = useMemo(() => {\n    const _grouped_panels: PanelGroupType[] = [];\n    const _panels = [...panels];\n    const _allpanels: PanelType[] = [...panels];\n\n    groups?.forEach((group) => {\n      const newVal: any = { ...group, panels: [] };\n      // Add panel to group and remove from main list\n      group.panelIDs?.forEach((panelID) => {\n        const index = _panels.findIndex((p) => p.name === panelID);\n        if (index !== -1) {\n          newVal.panels.push(_panels[index]);\n          _panels.splice(index, 1);\n        }\n      });\n      _grouped_panels.push(newVal);\n    });\n\n    // Add remaining panels to group\n    if (_panels.length > 0) {\n      _grouped_panels.push({\n        id: 'ungrouped',\n        label: '',\n        panels: _panels\n      });\n    }\n\n    // Add plugin panels\n    const pluginPanels: any = [];\n    pluginPanelSet.panels?.forEach((panel) => {\n      let panelKey = panel.name;\n\n      // Check if panel with this name already exists\n      const existingPanel = panels.find((p) => p.name === panelKey);\n\n      if (existingPanel) {\n        // Create a unique key for the panel which includes the plugin slug\n        panelKey = identifierString(`${panel.pluginName}-${panel.name}`);\n      }\n\n      pluginPanels.push({\n        ...panel,\n        name: panelKey\n      });\n      _allpanels.push({\n        ...panel,\n        name: panelKey\n      });\n    });\n\n    if (pluginPanels.length > 0) {\n      _grouped_panels.push({\n        id: 'plugins',\n        label: t`Plugin Provided`,\n        panels: pluginPanels\n      });\n    }\n\n    return [_allpanels, _grouped_panels];\n  }, [groups, panels, pluginPanelSet]);\n\n  const activePanels = useMemo(\n    () => allPanels.filter((panel) => !panel.hidden && !panel.disabled),\n    [allPanels]\n  );\n\n  // Callback when the active panel changes\n  const handlePanelChange = useCallback(\n    (targetPanel: string, event?: any) => {\n      cancelEvent(event);\n      if (event && eventModified(event)) {\n        const url = `${location.pathname}/../${targetPanel}`;\n        navigateToLink(url, navigate, event);\n      } else {\n        navigate(`../${targetPanel}`);\n      }\n\n      localState.setLastUsedPanel(pageKey)(targetPanel);\n\n      // Optionally call external callback hook\n      if (targetPanel && onPanelChange) {\n        onPanelChange(targetPanel);\n      }\n    },\n    [activePanels, navigate, location, onPanelChange]\n  );\n\n  // if the selected panel state changes update the current panel\n  useEffect(() => {\n    if (selectedPanel && selectedPanel !== panel) {\n      handlePanelChange(selectedPanel);\n    }\n  }, [selectedPanel, panel]);\n\n  // Determine the current panels selection (must be a valid panel)\n  const currentPanel: string = useMemo(() => {\n    if (activePanels.findIndex((p) => p.name === panel) === -1) {\n      return activePanels[0]?.name ?? '';\n    } else {\n      return panel ?? '';\n    }\n  }, [activePanels, panel]);\n\n  return (\n    <Boundary label={`PanelGroup-${pageKey}`}>\n      <Paper p='sm' radius='xs' shadow='xs' aria-label={`${pageKey}`}>\n        <Tabs\n          value={currentPanel}\n          orientation='vertical'\n          keepMounted={false}\n          aria-label={`panel-group-${pageKey}`}\n          classNames={{ tab: classes.selectedPanelTab }}\n        >\n          <Tabs.List justify='left' aria-label={`panel-tabs-${pageKey}`}>\n            {groupedPanels.map((group) => (\n              <Box key={`group-${group.id}`} w={'100%'}>\n                <Text\n                  hidden={!group.label || !expanded}\n                  c={vars.colors.primaryColors[7]}\n                  key={`group-label-${group.id}`}\n                  style={{\n                    paddingLeft: '10px'\n                  }}\n                >\n                  {group.label}\n                </Text>\n                {group.label && <Divider c={vars.colors.primaryColors[7]} />}\n                {group.panels?.map(\n                  (panel) =>\n                    !panel.hidden && (\n                      <Tooltip\n                        label={panel.label ?? panel.name}\n                        key={panel.name}\n                        disabled={expanded}\n                        position='right'\n                      >\n                        <Tabs.Tab\n                          p='xs'\n                          key={`panel-label-${panel.name}`}\n                          w={'100%'}\n                          value={panel.name}\n                          leftSection={panel.icon}\n                          hidden={panel.hidden}\n                          disabled={panel.disabled}\n                          style={{\n                            cursor: panel.disabled ? 'unset' : 'pointer'\n                          }}\n                          onClick={(event: any) =>\n                            handlePanelChange(panel.name, event)\n                          }\n                        >\n                          <Group justify='left' gap='xs' wrap='nowrap'>\n                            <UnstyledButton\n                              component={'a'}\n                              style={{\n                                textAlign: 'left'\n                              }}\n                              href={generateUrl(\n                                `/${getBaseUrl()}${location.pathname}/${panel.name}`\n                              )}\n                            >\n                              {expanded && panel.label}\n                            </UnstyledButton>\n                          </Group>\n                        </Tabs.Tab>\n                      </Tooltip>\n                    )\n                )}\n              </Box>\n            ))}\n            {collapsible && <Divider />}\n            {collapsible && (\n              <Group wrap='nowrap' gap='xs'>\n                <Tooltip\n                  position='right'\n                  label={expanded ? t`Collapse panels` : t`Expand panels`}\n                >\n                  <ActionIcon\n                    style={{\n                      paddingLeft: '10px'\n                    }}\n                    onClick={() => setExpanded(!expanded)}\n                    variant='transparent'\n                    size='lg'\n                  >\n                    {expanded ? (\n                      <IconLayoutSidebarLeftCollapse opacity={0.75} />\n                    ) : (\n                      <IconLayoutSidebarRightCollapse opacity={0.75} />\n                    )}\n                  </ActionIcon>\n                </Tooltip>\n                {pluginPanelSet.isLoading && <Loader size='xs' />}\n              </Group>\n            )}\n          </Tabs.List>\n          {allPanels.map(\n            (panel) =>\n              !panel.hidden && (\n                <Tabs.Panel\n                  key={`panel-${panel.name}`}\n                  value={panel.name}\n                  aria-label={`nav-panel-${identifierString(\n                    `${pageKey}-${panel.name}`\n                  )}`}\n                  p='sm'\n                  style={{\n                    overflowX: 'scroll',\n                    width: '100%'\n                  }}\n                >\n                  <Stack gap='md'>\n                    {panel.showHeadline !== false && (\n                      <>\n                        <Group justify='space-between'>\n                          <StylishText size='xl'>{panel.label}</StylishText>\n                          {panel.controls && (\n                            <Group justify='right' wrap='nowrap'>\n                              {panel.controls}\n                            </Group>\n                          )}\n                        </Group>\n                        <Divider />\n                      </>\n                    )}\n                    <Boundary label={`PanelContent-${panel.name}`}>\n                      {panel.content}\n                    </Boundary>\n                  </Stack>\n                </Tabs.Panel>\n              )\n          )}\n        </Tabs>\n      </Paper>\n    </Boundary>\n  );\n}\n\nfunction IndexPanelComponent({\n  pageKey,\n  selectedPanel,\n  panels\n}: Readonly<PanelProps>) {\n  const lastUsedPanel = useLocalState(\n    useShallow((state) => {\n      const panelName =\n        selectedPanel || state.lastUsedPanels[pageKey] || panels[0]?.name;\n\n      const panel = panels.findIndex(\n        (p) => p.name === panelName && !p.disabled && !p.hidden\n      );\n      if (panel === -1) {\n        return panels.find((p) => !p.disabled && !p.hidden)?.name || '';\n      }\n\n      return panelName;\n    })\n  );\n\n  return <Navigate to={lastUsedPanel} replace />;\n}\n\n/**\n * Render a panel group. The current panel will be appended to the current url.\n * The last opened panel will be stored in local storage and opened if no panel is provided via url param\n * @param panels - The list of panels to display\n * @param onPanelChange - Callback when the active panel changes\n * @param collapsible - If true, the panel group can be collapsed (defaults to true)\n */\nexport function PanelGroup(props: Readonly<PanelProps>) {\n  return (\n    <Routes>\n      <Route index element={<IndexPanelComponent {...props} />} />\n      <Route path='/:panel/*' element={<BasePanelGroup {...props} />} />\n    </Routes>\n  );\n}\n"],"names":["PluginPanelContent","pluginFeature","pluginContext","jsx","Stack","RemoteComponent","source","usePluginPanels","instance","reloadFunc","model","id","globalSettings","useGlobalSettingsState","pluginPanelsEnabled","useMemo","isSet","pluginQuery","useQuery","enabled","undefined","queryKey","throwOnError","error","console","queryFn","Promise","resolve","url","apiUrl","ApiEndpoints","plugin_ui_features_list","feature_type","PluginUIFeatureType","panel","api","get","params","target_model","target_id","then","response","data","inventreeContext","useInvenTreeContext","contextData","reloadInstance","pluginPanels","map","props","iconName","icon","ctx","context","name","key","pluginName","plugin_name","label","title","ApiIcon","content","panels","isLoading","isFetching","query","BasePanelGroup","pageKey","groups","onPanelChange","selectedPanel","collapsible","localState","useLocalState","location","useLocation","navigate","useNavigate","useParams","expanded","setExpanded","useState","pluginPanelSet","allPanels","groupedPanels","_grouped_panels","_panels","_allpanels","forEach","group","newVal","panelIDs","panelID","index","findIndex","p","push","splice","length","panelKey","find","identifierString","_i18n","_","activePanels","filter","hidden","disabled","handlePanelChange","useCallback","targetPanel","event","cancelEvent","eventModified","pathname","navigateToLink","setLastUsedPanel","useEffect","currentPanel","Boundary","Paper","jsxs","Tabs","tab","classes","selectedPanelTab","Box","Text","vars","colors","primaryColors","paddingLeft","Divider","Tooltip","cursor","Group","UnstyledButton","textAlign","generateUrl","getBaseUrl","ActionIcon","IconLayoutSidebarLeftCollapse","IconLayoutSidebarRightCollapse","Loader","overflowX","width","showHeadline","Fragment","StylishText","controls","IndexPanelComponent","lastUsedPanel","useShallow","state","panelName","lastUsedPanels","Navigate","PanelGroup","Routes","Route"],"mappings":"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"}