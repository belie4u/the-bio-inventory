{"version":3,"file":"ApiTokenTable-CHr8NXRS.js","sources":["../../../../../../frontend/src/tables/settings/ApiTokenTable.tsx"],"sourcesContent":["import { AddItemButton } from '@lib/components/AddItemButton';\nimport type { RowAction } from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Badge, Code, Flex, Modal, Paper, Text } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { IconCircleX } from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\nimport { api } from '../../App';\nimport { CopyButton } from '../../components/buttons/CopyButton';\nimport { StylishText } from '../../components/items/StylishText';\nimport { RenderUser } from '../../components/render/User';\nimport { showApiErrorMessage } from '../../functions/notifications';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { BooleanColumn } from '../ColumnRenderers';\nimport { UserFilter } from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport function ApiTokenTable({\n  only_myself = true\n}: Readonly<{ only_myself: boolean }>) {\n  const [token, setToken] = useState<string>('');\n  const [opened, { open, close }] = useDisclosure(false);\n\n  const generateToken = useCreateApiFormModal({\n    url: ApiEndpoints.user_tokens,\n    title: t`Generate Token`,\n    fields: { name: {} },\n    successMessage: t`Token generated`,\n    onFormSuccess: (data: any) => {\n      setToken(data.token);\n      open();\n      table.refreshTable();\n    }\n  });\n  const tableActions = useMemo(() => {\n    if (only_myself)\n      return [\n        <AddItemButton\n          key={'generate'}\n          tooltip={t`Generate Token`}\n          onClick={() => generateToken.open()}\n        />\n      ];\n    return [];\n  }, [only_myself]);\n\n  const table = useTable('api-tokens', 'id');\n\n  const tableColumns = useMemo(() => {\n    const cols = [\n      {\n        accessor: 'name',\n        title: t`Name`,\n        sortable: true\n      },\n      BooleanColumn({\n        accessor: 'active',\n        title: t`Active`,\n        sortable: false\n      }),\n      BooleanColumn({\n        accessor: 'revoked',\n        title: t`Revoked`\n      }),\n      {\n        accessor: 'token',\n        title: t`Token`,\n        render: (record: any) => {\n          return (\n            <>\n              {record.token}{' '}\n              {record.in_use ? (\n                <Badge color='green'>\n                  <Trans>In Use</Trans>\n                </Badge>\n              ) : null}\n            </>\n          );\n        }\n      },\n      {\n        accessor: 'last_seen',\n        title: t`Last Seen`,\n        sortable: true\n      },\n      {\n        accessor: 'expiry',\n        title: t`Expiry`,\n        sortable: true\n      },\n      {\n        accessor: 'created',\n        title: t`Created`,\n        sortable: true\n      }\n    ];\n    if (!only_myself) {\n      cols.push({\n        accessor: 'user',\n        title: t`User`,\n        sortable: true,\n        render: (record: any) => {\n          if (record.user_detail) {\n            return <RenderUser instance={record.user_detail} />;\n          } else {\n            return record.user;\n          }\n        }\n      });\n    }\n    return cols;\n  }, [only_myself]);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    const filters: TableFilter[] = [\n      {\n        name: 'revoked',\n        label: t`Revoked`,\n        description: t`Show revoked tokens`\n      }\n    ];\n\n    if (!only_myself) {\n      filters.push(\n        UserFilter({\n          name: 'user',\n          label: t`User`,\n          description: t`Filter by user`\n        })\n      );\n    }\n    return filters;\n  }, [only_myself]);\n\n  const rowActions = useCallback((record: any): RowAction[] => {\n    return [\n      {\n        title: t`Revoke`,\n        color: 'red',\n        hidden: !record.active || record.in_use,\n        icon: <IconCircleX />,\n        onClick: () => {\n          revokeToken(record.id);\n        }\n      }\n    ];\n  }, []);\n\n  const revokeToken = async (id: string) => {\n    let targetUrl = apiUrl(ApiEndpoints.user_tokens, id);\n    if (!only_myself) {\n      targetUrl += '?all_users=true';\n    }\n    api\n      .delete(targetUrl)\n      .then(() => {\n        table.refreshTable();\n      })\n      .catch((error) => {\n        showApiErrorMessage({\n          error: error,\n          title: t`Error revoking token`\n        });\n      });\n  };\n\n  const urlParams = useMemo(() => {\n    if (only_myself) return {};\n    return { all_users: true };\n  }, [only_myself]);\n\n  return (\n    <>\n      {only_myself && (\n        <>\n          {generateToken.modal}\n          <Modal\n            opened={opened}\n            onClose={close}\n            title={<StylishText size='xl'>{t`Token`}</StylishText>}\n            centered\n          >\n            <Text c='dimmed'>\n              <Trans>\n                Tokens are only shown once - make sure to note it down.\n              </Trans>\n            </Text>\n            <Paper p='sm'>\n              <Flex>\n                <Code>{token}</Code>\n                <CopyButton value={token} />\n              </Flex>\n            </Paper>\n          </Modal>\n        </>\n      )}\n      <InvenTreeTable\n        tableState={table}\n        url={apiUrl(ApiEndpoints.user_tokens)}\n        columns={tableColumns}\n        props={{\n          params: urlParams,\n          rowActions: rowActions,\n          enableSearch: false,\n          enableColumnSwitching: false,\n          tableActions: tableActions,\n          tableFilters: tableFilters\n        }}\n      />\n    </>\n  );\n}\n"],"names":["ApiTokenTable","only_myself","token","setToken","useState","opened","open","close","useDisclosure","generateToken","useCreateApiFormModal","url","ApiEndpoints","user_tokens","title","_i18n","_","id","fields","name","successMessage","onFormSuccess","data","table","refreshTable","tableActions","useMemo","jsx","AddItemButton","useTable","tableColumns","cols","accessor","sortable","BooleanColumn","render","record","jsxs","Fragment","in_use","Badge","_Trans","push","user_detail","RenderUser","user","tableFilters","filters","label","description","UserFilter","rowActions","useCallback","color","hidden","active","icon","IconCircleX","onClick","revokeToken","targetUrl","apiUrl","api","delete","then","catch","error","showApiErrorMessage","urlParams","all_users","modal","Modal","StylishText","Text","Paper","Flex","Code","CopyButton","InvenTreeTable","params","enableSearch","enableColumnSwitching"],"mappings":"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"}