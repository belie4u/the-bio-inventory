{"version":3,"file":"UseStockAdjustActions-DrD9IiH8.js","sources":["../../../../../../frontend/src/forms/StockForms.tsx","../../../../../../frontend/src/hooks/UseStockAdjustActions.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport {\n  Alert,\n  Flex,\n  Group,\n  List,\n  Skeleton,\n  Stack,\n  Table,\n  Text\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { modals } from '@mantine/modals';\nimport {\n  IconCalendarExclamation,\n  IconCoins,\n  IconCurrencyDollar,\n  IconLink,\n  IconPackage,\n  IconUsersGroup\n} from '@tabler/icons-react';\nimport { useQuery, useSuspenseQuery } from '@tanstack/react-query';\nimport { type JSX, Suspense, useEffect, useMemo, useState } from 'react';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport dayjs from 'dayjs';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '../App';\nimport RemoveRowButton from '../components/buttons/RemoveRowButton';\nimport { StandaloneField } from '../components/forms/StandaloneField';\n\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport type {\n  ApiFormAdjustFilterType,\n  ApiFormFieldChoice,\n  ApiFormFieldSet,\n  ApiFormModalProps\n} from '@lib/types/Forms';\nimport {\n  TableFieldExtraRow,\n  type TableFieldRowProps\n} from '../components/forms/fields/TableField';\nimport { Thumbnail } from '../components/images/Thumbnail';\nimport { StylishText } from '../components/items/StylishText';\nimport { StatusRenderer } from '../components/render/StatusRenderer';\nimport { RenderStockLocation } from '../components/render/Stock';\nimport { InvenTreeIcon } from '../functions/icons';\nimport {\n  useApiFormModal,\n  useCreateApiFormModal,\n  useDeleteApiFormModal\n} from '../hooks/UseForm';\nimport {\n  useBatchCodeGenerator,\n  useSerialNumberGenerator\n} from '../hooks/UseGenerator';\nimport { useGlobalSettingsState } from '../states/SettingsStates';\nimport { StatusFilterOptions } from '../tables/Filter';\n\n/**\n * Construct a set of fields for creating / editing a StockItem instance\n */\nexport function useStockFields({\n  partId,\n  stockItem,\n  modalId,\n  create = false\n}: {\n  partId?: number;\n  stockItem?: any;\n  modalId: string;\n  create: boolean;\n}): ApiFormFieldSet {\n  const globalSettings = useGlobalSettingsState();\n\n  // Keep track of the \"part\" instance\n  const [partInstance, setPartInstance] = useState<any>({});\n\n  const [supplierPart, setSupplierPart] = useState<number | null>(null);\n\n  const [expiryDate, setExpiryDate] = useState<string | null>(null);\n\n  const batchGenerator = useBatchCodeGenerator({\n    modalId: modalId,\n    initialQuery: {\n      part: partId\n    }\n  });\n\n  const serialGenerator = useSerialNumberGenerator({\n    modalId: modalId,\n    initialQuery: {\n      part: partId\n    }\n  });\n\n  return useMemo(() => {\n    const fields: ApiFormFieldSet = {\n      part: {\n        value: partId || partInstance?.pk,\n        disabled: !create,\n        filters: {\n          virtual: false,\n          active: create ? true : undefined\n        },\n        onValueChange: (value, record) => {\n          // Update the tracked part instance\n          setPartInstance(record);\n\n          serialGenerator.update({\n            part: value\n          });\n\n          batchGenerator.update({\n            part: value\n          });\n\n          // Clear the 'supplier_part' field if the part is changed\n          setSupplierPart(null);\n\n          // Adjust the 'expiry date' for the stock item\n          const expiry_days = record?.default_expiry ?? 0;\n\n          if (expiry_days && expiry_days > 0) {\n            // Adjust the expiry date based on the part default expiry\n            setExpiryDate(\n              dayjs().add(expiry_days, 'days').format('YYYY-MM-DD')\n            );\n          }\n        }\n      },\n      supplier_part: {\n        hidden: partInstance?.purchaseable == false,\n        value: supplierPart,\n        onValueChange: (value) => {\n          setSupplierPart(value);\n        },\n        filters: {\n          part_detail: true,\n          supplier_detail: true,\n          part: partId\n        },\n        adjustFilters: (adjust: ApiFormAdjustFilterType) => {\n          if (adjust.data.part) {\n            adjust.filters['part'] = adjust.data.part;\n          }\n\n          return adjust.filters;\n        }\n      },\n      use_pack_size: {\n        hidden: !create,\n        description: t`Add given quantity as packs instead of individual items`\n      },\n      location: {\n        // Cannot adjust location for existing stock items\n        hidden: !create,\n        onValueChange: (value) => {\n          batchGenerator.update({ location: value });\n        },\n        filters: {\n          structural: false\n        }\n      },\n      quantity: {\n        hidden: !create,\n        description: t`Enter initial quantity for this stock item`,\n        onValueChange: (value) => {\n          batchGenerator.update({ quantity: value });\n        }\n      },\n      serial_numbers: {\n        field_type: 'string',\n        label: t`Serial Numbers`,\n        disabled: partInstance?.trackable == false,\n        description: t`Enter serial numbers for new stock (or leave blank)`,\n        required: false,\n        hidden: !create,\n        placeholder:\n          serialGenerator.result &&\n          `${t`Next serial number`}: ${serialGenerator.result}`\n      },\n      serial: {\n        placeholder:\n          serialGenerator.result &&\n          `${t`Next serial number`}: ${serialGenerator.result}`,\n        hidden:\n          create ||\n          partInstance.trackable == false ||\n          (stockItem?.quantity != undefined && stockItem?.quantity != 1)\n      },\n      batch: {\n        placeholder:\n          batchGenerator.result &&\n          `${t`Next batch code`}: ${batchGenerator.result}`\n      },\n      status_custom_key: {\n        label: t`Stock Status`\n      },\n      expiry_date: {\n        icon: <IconCalendarExclamation />,\n        hidden: !globalSettings.isSet('STOCK_ENABLE_EXPIRY'),\n        value: expiryDate,\n        onValueChange: (value) => {\n          setExpiryDate(value);\n        }\n      },\n      purchase_price: {\n        icon: <IconCurrencyDollar />\n      },\n      purchase_price_currency: {\n        icon: <IconCoins />\n      },\n      packaging: {\n        icon: <IconPackage />\n      },\n      link: {\n        icon: <IconLink />\n      },\n      owner: {\n        icon: <IconUsersGroup />\n      },\n      delete_on_deplete: {}\n    };\n\n    // Remove the expiry date field if it is not enabled\n    if (!globalSettings.isSet('STOCK_ENABLE_EXPIRY')) {\n      delete fields.expiry_date;\n    }\n\n    return fields;\n  }, [\n    stockItem,\n    expiryDate,\n    partInstance,\n    partId,\n    globalSettings,\n    supplierPart,\n    serialGenerator.result,\n    batchGenerator.result,\n    create\n  ]);\n}\n\n/**\n * Launch a form to create a new StockItem instance\n */\nexport function useCreateStockItem() {\n  const fields = useStockFields({\n    create: true,\n    modalId: 'create-stock-item'\n  });\n\n  return useCreateApiFormModal({\n    url: ApiEndpoints.stock_item_list,\n    fields: fields,\n    modalId: 'create-stock-item',\n    title: t`Add Stock Item`\n  });\n}\n\n/**\n * Form set for manually removing (uninstalling) a StockItem from an existing StockItem\n */\nexport function useStockItemUninstallFields(): ApiFormFieldSet {\n  return useMemo(() => {\n    return {\n      location: {\n        filters: {\n          structural: false\n        }\n      },\n      note: {}\n    };\n  }, []);\n}\n\n/**\n * Form set for manually installing a StockItem into an existing StockItem\n */\nexport function useStockItemInstallFields({\n  stockItem\n}: {\n  stockItem: any;\n}): ApiFormFieldSet {\n  const globalSettings = useGlobalSettingsState();\n\n  const [selectedPart, setSelectedPart] = useState<number | null>(null);\n\n  useEffect(() => {\n    setSelectedPart(null);\n  }, [stockItem]);\n\n  return useMemo(() => {\n    // Note: The 'part' field is not a part of the API endpoint, so we construct it manually\n    return {\n      part: {\n        field_type: 'related field',\n        required: true,\n        exclude: true,\n        label: t`Part`,\n        description: t`Select the part to install`,\n        model: ModelType.part,\n        api_url: apiUrl(ApiEndpoints.part_list),\n        onValueChange: (value) => {\n          setSelectedPart(value);\n        },\n        filters: {\n          trackable: true,\n          in_bom_for: globalSettings.isSet('STOCK_ENFORCE_BOM_INSTALLATION')\n            ? stockItem.part\n            : undefined\n        }\n      },\n      stock_item: {\n        disabled: !selectedPart,\n        filters: {\n          part_detail: true,\n          in_stock: true,\n          available: true,\n          tracked: true,\n          part: selectedPart ? selectedPart : undefined\n        }\n      },\n      quantity: {},\n      note: {}\n    };\n  }, [globalSettings, selectedPart, stockItem]);\n}\n\n/**\n * Form set for serializing an existing StockItem\n */\nexport function useStockItemSerializeFields({\n  partId,\n  trackable,\n  modalId\n}: {\n  partId: number;\n  trackable: boolean;\n  modalId: string;\n}): ApiFormFieldSet {\n  const serialGenerator = useSerialNumberGenerator({\n    modalId: modalId,\n    isEnabled: () => trackable,\n    initialQuery: {\n      part: partId\n    }\n  });\n\n  return useMemo(() => {\n    return {\n      quantity: {},\n      serial_numbers: {\n        placeholder:\n          serialGenerator.result &&\n          `${t`Next serial number`}: ${serialGenerator.result}`\n      },\n      destination: {}\n    };\n  }, [serialGenerator.result]);\n}\n\nfunction StockItemDefaultMove({\n  stockItem,\n  value\n}: Readonly<{\n  stockItem: any;\n  value: any;\n}>) {\n  const { data } = useSuspenseQuery({\n    queryKey: [\n      'location',\n      stockItem.part_detail?.default_location ??\n        stockItem.part_detail?.category_default_location\n    ],\n    queryFn: async () => {\n      const url = apiUrl(\n        ApiEndpoints.stock_location_list,\n        stockItem.part_detail?.default_location ??\n          stockItem.part_detail?.category_default_location\n      );\n\n      return api\n        .get(url)\n        .then((response) => {\n          switch (response.status) {\n            case 200:\n              return response.data;\n            default:\n              return null;\n          }\n        })\n        .catch(() => {\n          return null;\n        });\n    }\n  });\n\n  return (\n    <Flex gap='sm' justify='space-evenly' align='center'>\n      <Flex gap='sm' direction='column' align='center'>\n        <Text>\n          {value} x {stockItem.part_detail.name}\n        </Text>\n        <Thumbnail\n          src={stockItem.part_detail.thumbnail}\n          size={80}\n          align='center'\n        />\n      </Flex>\n      <Flex direction='column' gap='sm' align='center'>\n        <Text>{stockItem.location_detail?.pathstring ?? '-'}</Text>\n        <InvenTreeIcon icon='arrow_down' />\n        <Suspense fallback={<Skeleton width='150px' />}>\n          <Text>{data?.pathstring}</Text>\n        </Suspense>\n      </Flex>\n    </Flex>\n  );\n}\n\nfunction moveToDefault(\n  stockItem: any,\n  value: StockItemQuantity,\n  refresh: () => void\n) {\n  modals.openConfirmModal({\n    title: <StylishText>{t`Confirm Stock Transfer`}</StylishText>,\n    children: <StockItemDefaultMove stockItem={stockItem} value={value} />,\n    onConfirm: () => {\n      if (\n        stockItem.location === stockItem.part_detail?.default_location ||\n        stockItem.location === stockItem.part_detail?.category_default_location\n      ) {\n        return;\n      }\n      api\n        .post(apiUrl(ApiEndpoints.stock_transfer), {\n          items: [\n            {\n              pk: stockItem.pk,\n              quantity: value,\n              batch: stockItem.batch,\n              status: stockItem.status\n            }\n          ],\n          location:\n            stockItem.part_detail?.default_location ??\n            stockItem.part_detail?.category_default_location\n        })\n        .then((response) => {\n          refresh();\n          return response.data;\n        })\n        .catch(() => {\n          return null;\n        });\n    }\n  });\n}\n\ntype StockAdjustmentItemWithRecord = {\n  obj: any;\n} & StockAdjustmentItem;\n\ntype TableFieldRefreshFn = (idx: number) => void;\ntype TableFieldChangeFn = (idx: number, key: string, value: any) => void;\n\ntype StockRow = {\n  item: StockAdjustmentItemWithRecord;\n  idx: number;\n  changeFn: TableFieldChangeFn;\n  removeFn: TableFieldRefreshFn;\n};\n\nfunction StockOperationsRow({\n  props,\n  transfer = false,\n  changeStatus = false,\n  add = false,\n  setMax = false,\n  merge = false,\n  record\n}: {\n  props: TableFieldRowProps;\n  transfer?: boolean;\n  changeStatus?: boolean;\n  add?: boolean;\n  setMax?: boolean;\n  merge?: boolean;\n  record?: any;\n}) {\n  const statusOptions: ApiFormFieldChoice[] = useMemo(() => {\n    return (\n      StatusFilterOptions(ModelType.stockitem)()?.map((choice) => {\n        return {\n          value: choice.value,\n          display_name: choice.label\n        };\n      }) ?? []\n    );\n  }, []);\n\n  const [quantity, setQuantity] = useState<StockItemQuantity>(\n    add ? 0 : (props.item?.quantity ?? 0)\n  );\n\n  const [status, setStatus] = useState<number | undefined>(undefined);\n\n  const removeAndRefresh = () => {\n    props.removeFn(props.idx);\n  };\n\n  const callChangeFn = (idx: number, key: string, value: any) => {\n    setTimeout(() => props.changeFn(idx, key, value), 0);\n  };\n\n  const [packagingOpen, packagingHandlers] = useDisclosure(false, {\n    onOpen: () => {\n      if (transfer) {\n        callChangeFn(props.idx, 'packaging', record?.packaging || undefined);\n      }\n    },\n    onClose: () => {\n      if (transfer) {\n        callChangeFn(props.idx, 'packaging', undefined);\n      }\n    }\n  });\n\n  const [statusOpen, statusHandlers] = useDisclosure(false, {\n    onOpen: () => {\n      setStatus(record?.status_custom_key || record?.status || undefined);\n      props.changeFn(props.idx, 'status', record?.status || undefined);\n    },\n    onClose: () => {\n      setStatus(undefined);\n      callChangeFn(props.idx, 'status', undefined);\n    }\n  });\n\n  const stockString: string = useMemo(() => {\n    if (!record) {\n      return '-';\n    }\n\n    if (!record.serial) {\n      return `${record.quantity}`;\n    } else {\n      return `#${record.serial}`;\n    }\n  }, [record]);\n\n  return !record ? (\n    <div>{t`Loading...`}</div>\n  ) : (\n    <>\n      <Table.Tr>\n        <Table.Td>\n          <Stack gap='xs'>\n            <Flex gap='sm' align='center'>\n              <Thumbnail\n                size={40}\n                src={record.part_detail?.thumbnail}\n                align='center'\n              />\n              <div>{record.part_detail?.name}</div>\n            </Flex>\n            {props.rowErrors?.pk?.message && (\n              <Text c='red' size='xs'>\n                {props.rowErrors.pk.message}\n              </Text>\n            )}\n          </Stack>\n        </Table.Td>\n        <Table.Td>\n          <RenderStockLocation instance={record.location_detail} />\n        </Table.Td>\n        <Table.Td>{record.batch ? record.batch : '-'}</Table.Td>\n        <Table.Td>\n          <Group grow justify='space-between' wrap='nowrap'>\n            <Text>{stockString}</Text>\n            <StatusRenderer\n              status={record.status_custom_key}\n              type={ModelType.stockitem}\n            />\n          </Group>\n        </Table.Td>\n        {!merge && (\n          <Table.Td>\n            <StandaloneField\n              fieldName='quantity'\n              fieldDefinition={{\n                field_type: 'number',\n                value: quantity,\n                onValueChange: (value: any) => {\n                  setQuantity(value);\n                  props.changeFn(props.idx, 'quantity', value);\n                }\n              }}\n              error={props.rowErrors?.quantity?.message}\n            />\n          </Table.Td>\n        )}\n        <Table.Td>\n          <Flex gap='3px'>\n            {transfer && (\n              <ActionButton\n                onClick={() =>\n                  moveToDefault(record, props.item.quantity, removeAndRefresh)\n                }\n                icon={<InvenTreeIcon icon='default_location' />}\n                tooltip={t`Move to default location`}\n                tooltipAlignment='top'\n                disabled={\n                  !record.part_detail?.default_location &&\n                  !record.part_detail?.category_default_location\n                }\n              />\n            )}\n            {changeStatus && (\n              <ActionButton\n                size='sm'\n                icon={<InvenTreeIcon icon='status' />}\n                tooltip={t`Change Status`}\n                onClick={() => statusHandlers.toggle()}\n                variant={statusOpen ? 'filled' : 'transparent'}\n              />\n            )}\n            {transfer && (\n              <ActionButton\n                size='sm'\n                icon={<InvenTreeIcon icon='packaging' />}\n                tooltip={t`Adjust Packaging`}\n                onClick={() => packagingHandlers.toggle()}\n                variant={packagingOpen ? 'filled' : 'transparent'}\n              />\n            )}\n            <RemoveRowButton onClick={() => props.removeFn(props.idx)} />\n          </Flex>\n        </Table.Td>\n      </Table.Tr>\n      {changeStatus && (\n        <TableFieldExtraRow\n          visible={statusOpen}\n          onValueChange={(value: any) => {\n            setStatus(value);\n            props.changeFn(props.idx, 'status', value || undefined);\n          }}\n          fieldName='status'\n          fieldDefinition={{\n            field_type: 'choice',\n            label: t`Status`,\n            choices: statusOptions,\n            value: status\n          }}\n          defaultValue={status}\n        />\n      )}\n      {transfer && (\n        <TableFieldExtraRow\n          visible={transfer && packagingOpen}\n          onValueChange={(value: any) => {\n            props.changeFn(props.idx, 'packaging', value || undefined);\n          }}\n          fieldName='packaging'\n          fieldDefinition={{\n            field_type: 'string',\n            label: t`Packaging`\n          }}\n          defaultValue={record.packaging}\n        />\n      )}\n    </>\n  );\n}\n\ntype StockItemQuantity = number | '' | undefined;\n\ntype StockAdjustmentItem = {\n  pk: number;\n  quantity: StockItemQuantity;\n  batch?: string;\n  status?: number | '' | null;\n  packaging?: string;\n};\n\nfunction mapAdjustmentItems(items: any[]) {\n  const mappedItems: StockAdjustmentItemWithRecord[] = items.map((elem) => {\n    return {\n      pk: elem.pk,\n      quantity: elem.quantity,\n      batch: elem.batch || undefined,\n      status: elem.status || undefined,\n      packaging: elem.packaging || undefined,\n      obj: elem\n    };\n  });\n\n  return mappedItems;\n}\n\nfunction stockTransferFields(items: any[]): ApiFormFieldSet {\n  if (!items) {\n    return {};\n  }\n\n  const records = Object.fromEntries(items.map((item) => [item.pk, item]));\n\n  const fields: ApiFormFieldSet = {\n    items: {\n      field_type: 'table',\n      value: mapAdjustmentItems(items),\n      modelRenderer: (row: TableFieldRowProps) => {\n        const record = records[row.item.pk];\n\n        return (\n          <StockOperationsRow\n            props={row}\n            transfer\n            changeStatus\n            setMax\n            key={record.pk}\n            record={record}\n          />\n        );\n      },\n      headers: [\n        { title: t`Part` },\n        { title: t`Location` },\n        { title: t`Batch` },\n        { title: t`Stock` },\n        { title: t`Move`, style: { width: '200px' } },\n        { title: t`Actions` }\n      ]\n    },\n    location: {\n      filters: {\n        structural: false\n      }\n    },\n    notes: {}\n  };\n  return fields;\n}\n\nfunction stockReturnFields(items: any[]): ApiFormFieldSet {\n  if (!items) {\n    return {};\n  }\n\n  // Only include items that are currently *not* in stock\n  const records = Object.fromEntries(\n    items.filter((item) => !item.in_stock).map((item) => [item.pk, item])\n  );\n\n  const fields: ApiFormFieldSet = {\n    items: {\n      field_type: 'table',\n      value: mapAdjustmentItems(items),\n      modelRenderer: (row: TableFieldRowProps) => {\n        const record = records[row.item.pk];\n\n        return (\n          <StockOperationsRow\n            props={row}\n            key={record.pk}\n            record={record}\n            transfer\n            changeStatus\n          />\n        );\n      },\n      headers: [\n        { title: t`Part` },\n        { title: t`Location` },\n        { title: t`Batch` },\n        { title: t`Quantity` },\n        { title: t`Return`, style: { width: '200px' } },\n        { title: t`Actions` }\n      ]\n    },\n    location: {\n      filters: {\n        structural: false\n      }\n    },\n    merge: {},\n    notes: {}\n  };\n\n  return fields;\n}\n\nfunction stockRemoveFields(items: any[]): ApiFormFieldSet {\n  if (!items) {\n    return {};\n  }\n\n  const records = Object.fromEntries(items.map((item) => [item.pk, item]));\n\n  const fields: ApiFormFieldSet = {\n    items: {\n      field_type: 'table',\n      value: mapAdjustmentItems(items),\n      modelRenderer: (row: TableFieldRowProps) => {\n        const record = records[row.item.pk];\n\n        return (\n          <StockOperationsRow\n            props={row}\n            setMax\n            changeStatus\n            add\n            key={record.pk}\n            record={record}\n          />\n        );\n      },\n      headers: [\n        { title: t`Part` },\n        { title: t`Location` },\n        { title: t`Batch` },\n        { title: t`In Stock` },\n        { title: t`Remove`, style: { width: '200px' } },\n        { title: t`Actions` }\n      ]\n    },\n    notes: {}\n  };\n\n  return fields;\n}\n\nfunction stockAddFields(items: any[]): ApiFormFieldSet {\n  if (!items) {\n    return {};\n  }\n\n  const records = Object.fromEntries(items.map((item) => [item.pk, item]));\n\n  const fields: ApiFormFieldSet = {\n    items: {\n      field_type: 'table',\n      value: mapAdjustmentItems(items),\n      modelRenderer: (row: TableFieldRowProps) => {\n        const record = records[row.item.pk];\n\n        return (\n          <StockOperationsRow\n            changeStatus\n            props={row}\n            add\n            key={record.pk}\n            record={record}\n          />\n        );\n      },\n      headers: [\n        { title: t`Part` },\n        { title: t`Location` },\n        { title: t`Batch` },\n        { title: t`In Stock` },\n        { title: t`Add`, style: { width: '200px' } },\n        { title: t`Actions` }\n      ]\n    },\n    notes: {}\n  };\n\n  return fields;\n}\n\nfunction stockCountFields(items: any[]): ApiFormFieldSet {\n  if (!items) {\n    return {};\n  }\n\n  const records = Object.fromEntries(items.map((item) => [item.pk, item]));\n\n  const fields: ApiFormFieldSet = {\n    items: {\n      field_type: 'table',\n      value: mapAdjustmentItems(items),\n      modelRenderer: (row: TableFieldRowProps) => {\n        return (\n          <StockOperationsRow\n            props={row}\n            changeStatus\n            key={row.item.pk}\n            record={records[row.item.pk]}\n          />\n        );\n      },\n      headers: [\n        { title: t`Part` },\n        { title: t`Location` },\n        { title: t`Batch` },\n        { title: t`In Stock` },\n        { title: t`Count`, style: { width: '200px' } },\n        { title: t`Actions` }\n      ]\n    },\n    notes: {}\n  };\n\n  return fields;\n}\n\nfunction stockChangeStatusFields(items: any[]): ApiFormFieldSet {\n  if (!items) {\n    return {};\n  }\n\n  const records = Object.fromEntries(items.map((item) => [item.pk, item]));\n\n  const fields: ApiFormFieldSet = {\n    items: {\n      field_type: 'table',\n      value: items.map((elem) => {\n        return elem.pk;\n      }),\n      modelRenderer: (row: TableFieldRowProps) => {\n        return (\n          <StockOperationsRow\n            props={row}\n            key={row.item}\n            merge\n            record={records[row.item]}\n          />\n        );\n      },\n      headers: [\n        { title: t`Part` },\n        { title: t`Location` },\n        { title: t`Batch` },\n        { title: t`In Stock` },\n        { title: '', style: { width: '50px' } }\n      ]\n    },\n    status: {},\n    note: {}\n  };\n\n  return fields;\n}\n\nfunction stockMergeFields(items: any[]): ApiFormFieldSet {\n  if (!items) {\n    return {};\n  }\n\n  const records = Object.fromEntries(items.map((item) => [item.pk, item]));\n\n  const fields: ApiFormFieldSet = {\n    items: {\n      field_type: 'table',\n      value: items.map((elem) => {\n        return {\n          item: elem.pk,\n          obj: elem\n        };\n      }),\n      modelRenderer: (row: TableFieldRowProps) => {\n        return (\n          <StockOperationsRow\n            props={row}\n            key={row.item.item}\n            merge\n            changeStatus\n            record={records[row.item.item]}\n          />\n        );\n      },\n      headers: [\n        { title: t`Part` },\n        { title: t`Location` },\n        { title: t`Batch` },\n        { title: t`In Stock` },\n        { title: t`Actions` }\n      ]\n    },\n    location: {\n      default: items[0]?.part_detail?.default_location,\n      filters: {\n        structural: false\n      }\n    },\n    notes: {},\n    allow_mismatched_suppliers: {},\n    allow_mismatched_status: {}\n  };\n\n  return fields;\n}\n\nfunction stockAssignFields(items: any[]): ApiFormFieldSet {\n  if (!items) {\n    return {};\n  }\n\n  const records = Object.fromEntries(items.map((item) => [item.pk, item]));\n\n  const fields: ApiFormFieldSet = {\n    items: {\n      field_type: 'table',\n      value: items.map((elem) => {\n        return {\n          item: elem.pk,\n          obj: elem\n        };\n      }),\n      modelRenderer: (row: TableFieldRowProps) => {\n        return (\n          <StockOperationsRow\n            props={row}\n            key={row.item.item}\n            merge\n            record={records[row.item.item]}\n          />\n        );\n      },\n      headers: [\n        { title: t`Part` },\n        { title: t`Location` },\n        { title: t`Batch` },\n        { title: t`In Stock` },\n        { title: '', style: { width: '50px' } }\n      ]\n    },\n    customer: {\n      filters: {\n        is_customer: true\n      }\n    },\n    notes: {}\n  };\n\n  return fields;\n}\n\nfunction stockDeleteFields(items: any[]): ApiFormFieldSet {\n  if (!items) {\n    return {};\n  }\n\n  const records = Object.fromEntries(items.map((item) => [item.pk, item]));\n\n  const fields: ApiFormFieldSet = {\n    items: {\n      field_type: 'table',\n      value: items.map((elem) => {\n        return elem.pk;\n      }),\n      modelRenderer: (row: TableFieldRowProps) => {\n        const record = records[row.item];\n\n        return (\n          <StockOperationsRow\n            props={row}\n            key={record.pk}\n            merge\n            record={record}\n          />\n        );\n      },\n      headers: [\n        { title: t`Part` },\n        { title: t`Location` },\n        { title: t`Batch` },\n        { title: t`In Stock` },\n        { title: '', style: { width: '50px' } }\n      ]\n    }\n  };\n\n  return fields;\n}\n\ntype apiModalFunc = (props: ApiFormModalProps) => {\n  open: () => void;\n  close: () => void;\n  toggle: () => void;\n  modal: JSX.Element;\n};\n\nfunction useStockOperationModal({\n  items,\n  pk,\n  model,\n  refresh,\n  fieldGenerator,\n  endpoint,\n  filters,\n  title,\n  preFormContent,\n  successMessage,\n  modalFunc = useCreateApiFormModal\n}: {\n  items?: object;\n  pk?: number;\n  filters?: any;\n  model: ModelType | string;\n  refresh: () => void;\n  fieldGenerator: (items: any[]) => ApiFormFieldSet;\n  endpoint: ApiEndpoints;\n  title: string;\n  preFormContent?: JSX.Element;\n  successMessage?: string;\n  modalFunc?: apiModalFunc;\n}) {\n  const baseParams: any = {\n    part_detail: true,\n    location_detail: true,\n    cascade: false\n  };\n\n  const params = useMemo(() => {\n    const query_params: any = {\n      ...baseParams,\n      ...(filters ?? {})\n    };\n\n    query_params[model] =\n      pk === undefined && model === 'location' ? 'null' : pk;\n\n    return query_params;\n  }, [baseParams, filters, model, pk]);\n\n  const [opened, setOpened] = useState<boolean>(false);\n\n  const { data } = useQuery({\n    queryKey: ['stockitems', opened, model, pk, items, params],\n    queryFn: async () => {\n      if (items) {\n        // If a list of items is provided, use that directly\n        return Array.isArray(items) ? items : [items];\n      }\n\n      if (!pk || !opened) {\n        return [];\n      }\n\n      const url = apiUrl(ApiEndpoints.stock_item_list);\n\n      return api\n        .get(url, {\n          params: params\n        })\n        .then((response) => response.data ?? []);\n    }\n  });\n\n  const fields = useMemo(() => {\n    return fieldGenerator(data);\n  }, [data]);\n\n  return modalFunc({\n    url: endpoint,\n    fields: fields,\n    preFormContent: preFormContent,\n    title: title,\n    size: '80%',\n    successMessage: successMessage,\n    onFormSuccess: () => refresh(),\n    onClose: () => setOpened(false),\n    onOpen: () => setOpened(true)\n  });\n}\n\nexport type StockOperationProps = {\n  items?: any[];\n  pk?: number;\n  filters?: any;\n  model: ModelType.stockitem | 'location' | ModelType.part;\n  refresh: () => void;\n};\n\nexport function useAddStockItem(props: StockOperationProps) {\n  return useStockOperationModal({\n    ...props,\n    fieldGenerator: stockAddFields,\n    endpoint: ApiEndpoints.stock_add,\n    title: t`Add Stock`,\n    successMessage: t`Stock added`,\n    preFormContent: (\n      <Alert color='blue'>\n        {t`Increase the quantity of the selected stock items by a given amount.`}\n      </Alert>\n    )\n  });\n}\n\nexport function useRemoveStockItem(props: StockOperationProps) {\n  return useStockOperationModal({\n    ...props,\n    fieldGenerator: stockRemoveFields,\n    endpoint: ApiEndpoints.stock_remove,\n    title: t`Remove Stock`,\n    successMessage: t`Stock removed`,\n    preFormContent: (\n      <Alert color='blue'>\n        {t`Decrease the quantity of the selected stock items by a given amount.`}\n      </Alert>\n    )\n  });\n}\n\nexport function useTransferStockItem(props: StockOperationProps) {\n  return useStockOperationModal({\n    ...props,\n    fieldGenerator: stockTransferFields,\n    endpoint: ApiEndpoints.stock_transfer,\n    title: t`Transfer Stock`,\n    successMessage: t`Stock transferred`,\n    preFormContent: (\n      <Alert color='blue'>\n        {t`Transfer selected items to the specified location.`}\n      </Alert>\n    )\n  });\n}\n\nexport function useReturnStockItem(props: StockOperationProps) {\n  return useStockOperationModal({\n    ...props,\n    fieldGenerator: stockReturnFields,\n    endpoint: ApiEndpoints.stock_return,\n    title: t`Return Stock`,\n    successMessage: t`Stock returned`,\n    preFormContent: (\n      <Alert color='blue'>\n        {t`Return selected items into stock, to the specified location.`}\n      </Alert>\n    )\n  });\n}\n\nexport function useCountStockItem(props: StockOperationProps) {\n  return useStockOperationModal({\n    ...props,\n    fieldGenerator: stockCountFields,\n    endpoint: ApiEndpoints.stock_count,\n    title: t`Count Stock`,\n    successMessage: t`Stock counted`,\n    preFormContent: (\n      <Alert color='blue'>\n        {t`Count the selected stock items, and adjust the quantity accordingly.`}\n      </Alert>\n    )\n  });\n}\n\nexport function useChangeStockStatus(props: StockOperationProps) {\n  return useStockOperationModal({\n    ...props,\n    fieldGenerator: stockChangeStatusFields,\n    endpoint: ApiEndpoints.stock_change_status,\n    title: t`Change Stock Status`,\n    successMessage: t`Stock status changed`,\n    preFormContent: (\n      <Alert color='blue'>\n        {t`Change the status of the selected stock items.`}\n      </Alert>\n    )\n  });\n}\n\nexport function useMergeStockItem(props: StockOperationProps) {\n  return useStockOperationModal({\n    ...props,\n    fieldGenerator: stockMergeFields,\n    endpoint: ApiEndpoints.stock_merge,\n    title: t`Merge Stock`,\n    successMessage: t`Stock merged`,\n    preFormContent: (\n      <Alert title={t`Merge Stock Items`} color='yellow'>\n        <List>\n          <List.Item>{t`Merge operation cannot be reversed`}</List.Item>\n          <List.Item>{t`Tracking information may be lost when merging items`}</List.Item>\n          <List.Item>{t`Supplier information may be lost when merging items`}</List.Item>\n        </List>\n      </Alert>\n    )\n  });\n}\n\nexport function useAssignStockItem(props: StockOperationProps) {\n  // Filter items - only allow 'salable' items\n  const items = useMemo(() => {\n    return props.items?.filter((item) => item?.part_detail?.salable);\n  }, [props.items]);\n\n  return useStockOperationModal({\n    ...props,\n    items: items,\n    fieldGenerator: stockAssignFields,\n    endpoint: ApiEndpoints.stock_assign,\n    title: t`Assign Stock to Customer`,\n    successMessage: t`Stock assigned to customer`\n  });\n}\n\nexport function useDeleteStockItem(props: StockOperationProps) {\n  return useStockOperationModal({\n    ...props,\n    fieldGenerator: stockDeleteFields,\n    endpoint: ApiEndpoints.stock_item_list,\n    modalFunc: useDeleteApiFormModal,\n    title: t`Delete Stock Items`,\n    successMessage: t`Stock deleted`,\n    preFormContent: (\n      <Alert color='red'>\n        {t`This operation will permanently delete the selected stock items.`}\n      </Alert>\n    )\n  });\n}\n\nexport function stockLocationFields(): ApiFormFieldSet {\n  const fields: ApiFormFieldSet = {\n    parent: {\n      description: t`Parent stock location`,\n      required: false\n    },\n    name: {},\n    description: {},\n    structural: {},\n    external: {},\n    custom_icon: {\n      field_type: 'icon'\n    },\n    location_type: {}\n  };\n\n  return fields;\n}\n\n// Construct a set of fields for\nexport function useTestResultFields({\n  partId,\n  itemId,\n  templateId,\n  editing = false,\n  editTemplate = false\n}: {\n  partId: number;\n  itemId: number;\n  templateId: number | undefined;\n  editing?: boolean;\n  editTemplate?: boolean;\n}): ApiFormFieldSet {\n  // Valid field choices\n  const [choices, setChoices] = useState<any[]>([]);\n\n  // Field type for the \"value\" input\n  const [fieldType, setFieldType] = useState<'string' | 'choice'>('string');\n\n  const settings = useGlobalSettingsState();\n\n  const includeTestStation = useMemo(\n    () => settings.isSet('TEST_STATION_DATA'),\n    [settings]\n  );\n\n  return useMemo(() => {\n    const fields: ApiFormFieldSet = {\n      stock_item: {\n        value: itemId,\n        hidden: true\n      },\n      template: {\n        disabled: !editTemplate && !!templateId,\n        filters: {\n          include_inherited: true,\n          part: partId\n        },\n        onValueChange: (value: any, record: any) => {\n          // Adjust the type of the \"value\" field based on the selected template\n          if (record?.choices) {\n            const _choices: string[] = record.choices.split(',');\n\n            if (_choices.length > 0) {\n              setChoices(\n                _choices.map((choice) => {\n                  return {\n                    label: choice.trim(),\n                    value: choice.trim()\n                  };\n                })\n              );\n              setFieldType('choice');\n            } else {\n              setChoices([]);\n              setFieldType('string');\n            }\n          }\n        }\n      },\n      result: {},\n      value: {\n        field_type: fieldType,\n        choices: fieldType === 'choice' ? choices : undefined\n      },\n      attachment: {},\n      notes: {},\n      started_datetime: {\n        hidden: !includeTestStation\n      },\n      finished_datetime: {\n        hidden: !includeTestStation\n      },\n      test_station: {\n        hidden: !includeTestStation\n      }\n    };\n\n    if (editing) {\n      // Prevent changing uploaded attachments\n      delete fields.attachment;\n    }\n\n    return fields;\n  }, [\n    choices,\n    editing,\n    editTemplate,\n    fieldType,\n    partId,\n    itemId,\n    templateId,\n    includeTestStation\n  ]);\n}\n\n/**\n * Modal form for finding a particular stock item by serial number\n */\nexport function useFindSerialNumberForm({\n  partId\n}: {\n  partId: number;\n}) {\n  const navigate = useNavigate();\n\n  return useApiFormModal({\n    url: apiUrl(ApiEndpoints.stock_item_list),\n    fetchInitialData: false,\n    method: 'GET',\n    title: t`Find Serial Number`,\n    fields: {\n      serial: {},\n      part_tree: {\n        value: partId,\n        hidden: true,\n        field_type: 'integer'\n      }\n    },\n    checkClose: (data, form) => {\n      if (!data || data?.length == 0) {\n        form.setError('serial', { message: t`No matching items` });\n        return false;\n      }\n\n      if (data.length > 1) {\n        form.setError('serial', {\n          message: t`Multiple matching items`\n        });\n        return false;\n      }\n\n      if (data[0].pk) {\n        return true;\n      } else {\n        form.setError('serial', {\n          message: t`Invalid response from server`\n        });\n        return false;\n      }\n    },\n    onFormSuccess: (data) => {\n      if (data.length == 1 && data[0].pk) {\n        navigate(getDetailUrl(ModelType.stockitem, data[0].pk));\n      }\n    }\n  });\n}\n","import { UserRoles } from '@lib/index';\nimport type { UseModalReturn } from '@lib/types/Modals';\nimport { t } from '@lingui/core/macro';\nimport { type ReactNode, useMemo } from 'react';\nimport type { ActionDropdownItem } from '../components/items/ActionDropdown';\nimport { ActionDropdown } from '../components/items/ActionDropdown';\nimport {\n  type StockOperationProps,\n  useAddStockItem,\n  useAssignStockItem,\n  useChangeStockStatus,\n  useCountStockItem,\n  useDeleteStockItem,\n  useMergeStockItem,\n  useRemoveStockItem,\n  useReturnStockItem,\n  useTransferStockItem\n} from '../forms/StockForms';\nimport { InvenTreeIcon } from '../functions/icons';\nimport { useUserState } from '../states/UserState';\n\ninterface StockAdjustActionProps {\n  formProps: StockOperationProps;\n  enabled?: boolean;\n  add?: boolean;\n  assign?: boolean;\n  count?: boolean;\n  changeStatus?: boolean;\n  delete?: boolean;\n  merge?: boolean;\n  remove?: boolean;\n  transfer?: boolean;\n  return?: boolean;\n}\n\ninterface StockAdjustActionReturnProps {\n  modals: UseModalReturn[];\n  dropdown: ReactNode;\n  menuActions: ActionDropdownItem[];\n  hasActions: boolean;\n}\n\n/**\n * Hook to provide an interface for stock transfer actions.\n * - Provides a set of modals for creating, editing, and deleting stock transfers.\n * - Provides a set of menu actions for opening the modals.\n */\n\nexport function useStockAdjustActions(\n  props: StockAdjustActionProps\n): StockAdjustActionReturnProps {\n  const user = useUserState();\n\n  // The available modals for stock adjustment actions\n  const addStock = useAddStockItem(props.formProps);\n  const assignStock = useAssignStockItem(props.formProps);\n  const countStock = useCountStockItem(props.formProps);\n  const changeStatus = useChangeStockStatus(props.formProps);\n  const deleteStock = useDeleteStockItem(props.formProps);\n  const mergeStock = useMergeStockItem(props.formProps);\n  const removeStock = useRemoveStockItem(props.formProps);\n  const transferStock = useTransferStockItem(props.formProps);\n  const returnStock = useReturnStockItem(props.formProps);\n\n  // Construct a list of modals available for stock adjustment actions\n  const modals: UseModalReturn[] = useMemo(() => {\n    const modals: UseModalReturn[] = [];\n\n    if (!user.hasChangeRole(UserRoles.stock)) {\n      return [];\n    }\n\n    props.add != false && modals.push(addStock);\n    props.assign != false && modals.push(assignStock);\n    props.count != false && modals.push(countStock);\n    props.changeStatus != false && modals.push(changeStatus);\n    props.merge != false && modals.push(mergeStock);\n    props.remove != false && modals.push(removeStock);\n    props.transfer != false && modals.push(transferStock);\n    props.return === true && modals.push(returnStock);\n    props.delete != false &&\n      user.hasDeleteRole(UserRoles.stock) &&\n      modals.push(deleteStock);\n\n    return modals;\n  }, [props, user]);\n\n  // Construct a list of actions available in the stock adjustment dropdown menu\n  const menuActions: ActionDropdownItem[] = useMemo(() => {\n    const menuActions: ActionDropdownItem[] = [];\n\n    if (!user.hasChangeRole(UserRoles.stock)) {\n      return [];\n    }\n\n    props.count != false &&\n      menuActions.push({\n        name: t`Count Stock`,\n        icon: <InvenTreeIcon icon='stocktake' iconProps={{ color: 'blue' }} />,\n        tooltip: t`Count selected stock items`,\n        onClick: () => {\n          countStock.open();\n        }\n      });\n\n    props.add != false &&\n      menuActions.push({\n        name: t`Add Stock`,\n        icon: <InvenTreeIcon icon='add' iconProps={{ color: 'green' }} />,\n        tooltip: t`Add to selected stock items`,\n        onClick: () => {\n          addStock.open();\n        }\n      });\n\n    props.remove != false &&\n      menuActions.push({\n        name: t`Remove Stock`,\n        icon: <InvenTreeIcon icon='remove' iconProps={{ color: 'red' }} />,\n        tooltip: t`Remove from selected stock items`,\n        onClick: () => {\n          removeStock.open();\n        }\n      });\n\n    props.transfer != false &&\n      menuActions.push({\n        name: t`Transfer Stock`,\n        icon: <InvenTreeIcon icon='transfer' iconProps={{ color: 'blue' }} />,\n        tooltip: t`Transfer selected stock items`,\n        onClick: () => {\n          transferStock.open();\n        }\n      });\n\n    props.merge != false &&\n      menuActions.push({\n        name: t`Merge Stock`,\n        icon: <InvenTreeIcon icon='merge' />,\n        tooltip: t`Merge selected stock items`,\n        onClick: () => {\n          mergeStock.open();\n        }\n      });\n\n    props.changeStatus != false &&\n      menuActions.push({\n        name: t`Change Status`,\n        icon: <InvenTreeIcon icon='info' iconProps={{ color: 'blue' }} />,\n        tooltip: t`Change status of selected stock items`,\n        onClick: () => {\n          changeStatus.open();\n        }\n      });\n\n    props.assign != false &&\n      menuActions.push({\n        name: t`Assign Stock`,\n        icon: <InvenTreeIcon icon='customer' />,\n        tooltip: t`Assign selected stock items to a customer`,\n        onClick: () => {\n          assignStock.open();\n        }\n      });\n\n    props.return === true &&\n      menuActions.push({\n        name: t`Return Stock`,\n        icon: <InvenTreeIcon icon='return' iconProps={{ color: 'blue' }} />,\n        tooltip: t`Return selected items into stock`,\n        onClick: () => {\n          returnStock.open();\n        }\n      });\n\n    props.delete != false &&\n      menuActions.push({\n        name: t`Delete Stock`,\n        icon: <InvenTreeIcon icon='delete' iconProps={{ color: 'red' }} />,\n        tooltip: t`Delete selected stock items`,\n        disabled: !user.hasDeleteRole(UserRoles.stock),\n        onClick: () => {\n          deleteStock.open();\n        }\n      });\n\n    return menuActions;\n  }, [props, user]);\n\n  // Determine if there are any items selected\n  const hasItems: boolean = useMemo(() => {\n    return (props.formProps?.items?.length ?? 0) > 0;\n  }, [props.formProps.items]);\n\n  // Determine if there are any actions available\n  const hasActions: boolean = useMemo(() => {\n    return menuActions.length > 0;\n  }, [menuActions]);\n\n  // Construct a dropdown menu for stock actions\n  const dropdown: ReactNode = useMemo(() => {\n    return (\n      <ActionDropdown\n        key='stock-adjust-actions'\n        tooltip={t`Stock Actions`}\n        icon={<InvenTreeIcon icon='stock' />}\n        actions={menuActions}\n        disabled={\n          props.enabled != true && (props.enabled == false || !hasItems)\n        }\n        hidden={!hasActions}\n      />\n    );\n  }, [props.enabled, hasActions, hasItems, menuActions]);\n\n  return {\n    modals,\n    menuActions,\n    hasActions,\n    dropdown\n  };\n}\n"],"names":["useStockFields","partId","stockItem","modalId","create","globalSettings","useGlobalSettingsState","partInstance","setPartInstance","useState","supplierPart","setSupplierPart","expiryDate","setExpiryDate","batchGenerator","useBatchCodeGenerator","initialQuery","part","serialGenerator","useSerialNumberGenerator","useMemo","fields","value","pk","disabled","filters","virtual","active","undefined","onValueChange","record","update","expiry_days","default_expiry","dayjs","add","format","supplier_part","hidden","purchaseable","part_detail","supplier_detail","adjustFilters","adjust","data","use_pack_size","description","_i18n","_","id","location","structural","quantity","serial_numbers","field_type","label","trackable","required","placeholder","result","serial","batch","status_custom_key","expiry_date","icon","IconCalendarExclamation","isSet","purchase_price","IconCurrencyDollar","purchase_price_currency","IconCoins","packaging","IconPackage","link","IconLink","owner","IconUsersGroup","delete_on_deplete","useStockItemUninstallFields","note","useStockItemInstallFields","selectedPart","setSelectedPart","useEffect","exclude","model","ModelType","api_url","apiUrl","ApiEndpoints","part_list","in_bom_for","stock_item","in_stock","available","tracked","useStockItemSerializeFields","isEnabled","destination","StockItemDefaultMove","useSuspenseQuery","queryKey","default_location","category_default_location","queryFn","url","stock_location_list","api","get","then","response","status","catch","Flex","jsxs","Text","name","jsx","Thumbnail","thumbnail","location_detail","pathstring","InvenTreeIcon","Suspense","Skeleton","moveToDefault","refresh","modals","openConfirmModal","title","StylishText","children","onConfirm","post","stock_transfer","items","StockOperationsRow","props","transfer","changeStatus","setMax","merge","statusOptions","StatusFilterOptions","stockitem","map","choice","display_name","setQuantity","item","setStatus","removeAndRefresh","removeFn","idx","callChangeFn","key","setTimeout","changeFn","packagingOpen","packagingHandlers","useDisclosure","onOpen","onClose","statusOpen","statusHandlers","stockString","Fragment","Table","Stack","rowErrors","message","RenderStockLocation","Group","StatusRenderer","StandaloneField","ActionButton","toggle","RemoveRowButton","TableFieldExtraRow","choices","mapAdjustmentItems","elem","obj","stockTransferFields","records","Object","fromEntries","modelRenderer","row","headers","style","width","notes","stockReturnFields","filter","stockRemoveFields","stockAddFields","stockCountFields","stockChangeStatusFields","stockMergeFields","default","allow_mismatched_suppliers","allow_mismatched_status","stockAssignFields","customer","is_customer","stockDeleteFields","useStockOperationModal","fieldGenerator","endpoint","preFormContent","successMessage","modalFunc","useCreateApiFormModal","baseParams","cascade","params","query_params","opened","setOpened","useQuery","Array","isArray","stock_item_list","size","onFormSuccess","useAddStockItem","stock_add","Alert","useRemoveStockItem","stock_remove","useTransferStockItem","useReturnStockItem","stock_return","useCountStockItem","stock_count","useChangeStockStatus","stock_change_status","useMergeStockItem","stock_merge","List","useAssignStockItem","salable","stock_assign","useDeleteStockItem","useDeleteApiFormModal","stockLocationFields","parent","external","custom_icon","location_type","useTestResultFields","itemId","templateId","editing","editTemplate","setChoices","fieldType","setFieldType","settings","includeTestStation","template","include_inherited","_choices","split","length","trim","attachment","started_datetime","finished_datetime","test_station","useFindSerialNumberForm","navigate","useNavigate","useApiFormModal","fetchInitialData","method","part_tree","checkClose","form","setError","getDetailUrl","useStockAdjustActions","user","useUserState","addStock","formProps","assignStock","countStock","deleteStock","mergeStock","removeStock","transferStock","returnStock","hasChangeRole","UserRoles","stock","push","assign","count","remove","return","delete","hasDeleteRole","menuActions","color","tooltip","onClick","open","hasItems","hasActions","dropdown","ActionDropdown","enabled"],"mappings":"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"}