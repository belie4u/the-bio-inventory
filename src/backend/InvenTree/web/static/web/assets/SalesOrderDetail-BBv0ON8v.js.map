{"version":3,"file":"SalesOrderDetail-BBv0ON8v.js","sources":["../../../../../../frontend/src/tables/sales/SalesOrderLineItemTable.tsx","../../../../../../frontend/src/tables/sales/SalesOrderShipmentTable.tsx","../../../../../../frontend/src/pages/sales/SalesOrderDetail.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Group, Paper, Text } from '@mantine/core';\nimport {\n  IconArrowRight,\n  IconHash,\n  IconShoppingCart,\n  IconSquareArrowRight,\n  IconTools\n} from '@tabler/icons-react';\nimport type { DataTableRowExpansionProps } from 'mantine-datatable';\nimport { type ReactNode, useCallback, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowDuplicateAction,\n  RowEditAction,\n  RowViewAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { RenderPart } from '../../components/render/Part';\nimport OrderPartsWizard from '../../components/wizards/OrderPartsWizard';\nimport { formatCurrency, formatDecimal } from '../../defaults/formatters';\nimport { useBuildOrderFields } from '../../forms/BuildForms';\nimport {\n  useAllocateToSalesOrderForm,\n  useSalesOrderAllocateSerialsFields,\n  useSalesOrderLineItemFields\n} from '../../forms/SalesOrderForms';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport {\n  DateColumn,\n  DecimalColumn,\n  DescriptionColumn,\n  LinkColumn,\n  RenderPartColumn\n} from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport RowExpansionIcon from '../RowExpansionIcon';\nimport { TableHoverCard } from '../TableHoverCard';\nimport SalesOrderAllocationTable from './SalesOrderAllocationTable';\n\nexport default function SalesOrderLineItemTable({\n  orderId,\n  orderDetailRefresh,\n  currency,\n  customerId,\n  editable\n}: Readonly<{\n  orderId: number;\n  orderDetailRefresh: () => void;\n  currency: string;\n  customerId: number;\n  editable: boolean;\n}>) {\n  const navigate = useNavigate();\n  const user = useUserState();\n  const table = useTable('sales-order-line-item');\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'part',\n        sortable: true,\n        switchable: false,\n        minWidth: 175,\n        render: (record: any) => {\n          return (\n            <Group wrap='nowrap'>\n              {record.part_detail?.virtual || (\n                <RowExpansionIcon\n                  enabled={record.allocated}\n                  expanded={table.isRowExpanded(record.pk)}\n                />\n              )}\n              <RenderPartColumn part={record.part_detail} />\n            </Group>\n          );\n        }\n      },\n      {\n        accessor: 'part_detail.IPN',\n        title: t`IPN`,\n        switchable: true\n      },\n      DescriptionColumn({\n        accessor: 'part_detail.description'\n      }),\n      {\n        accessor: 'reference',\n        sortable: false,\n        switchable: true\n      },\n      DecimalColumn({\n        accessor: 'quantity',\n        sortable: true\n      }),\n      {\n        accessor: 'sale_price',\n        render: (record: any) =>\n          formatCurrency(record.sale_price, {\n            currency: record.sale_price_currency\n          })\n      },\n      {\n        accessor: 'total_price',\n        title: t`Total Price`,\n        render: (record: any) =>\n          formatCurrency(record.sale_price, {\n            currency: record.sale_price_currency,\n            multiplier: record.quantity\n          })\n      },\n      DateColumn({\n        accessor: 'target_date',\n        sortable: true,\n        title: t`Target Date`\n      }),\n      {\n        accessor: 'stock',\n        title: t`Available Stock`,\n        render: (record: any) => {\n          if (record.part_detail?.virtual) {\n            return <Text size='sm' fs='italic'>{t`Virtual part`}</Text>;\n          }\n\n          const part_stock = record?.available_stock ?? 0;\n          const variant_stock = record?.available_variant_stock ?? 0;\n          const available = part_stock + variant_stock;\n\n          const required = Math.max(\n            record.quantity - record.allocated - record.shipped,\n            0\n          );\n\n          let color: string | undefined = undefined;\n          let text = `${formatDecimal(available)}`;\n\n          const extra: ReactNode[] = [];\n\n          if (available <= 0) {\n            color = 'red';\n            text = t`No stock available`;\n          } else if (available < required) {\n            color = 'orange';\n          }\n\n          if (variant_stock > 0) {\n            extra.push(<Text size='sm'>{t`Includes variant stock`}</Text>);\n          }\n\n          if (record.building > 0) {\n            extra.push(\n              <Text size='sm'>\n                {t`In production`}: {formatDecimal(record.building)}\n              </Text>\n            );\n          }\n\n          if (record.on_order > 0) {\n            extra.push(\n              <Text size='sm'>\n                {t`On order`}: {formatDecimal(record.on_order)}\n              </Text>\n            );\n          }\n\n          return (\n            <TableHoverCard\n              value={<Text c={color}>{text}</Text>}\n              extra={extra}\n              title={t`Stock Information`}\n            />\n          );\n        }\n      },\n      {\n        accessor: 'allocated',\n        sortable: true,\n        render: (record: any) => {\n          if (record.part_detail?.virtual) {\n            return <Text size='sm' fs='italic'>{t`Virtual part`}</Text>;\n          }\n\n          return (\n            <ProgressBar\n              progressLabel={true}\n              value={record.allocated}\n              maximum={record.quantity}\n            />\n          );\n        }\n      },\n      {\n        accessor: 'shipped',\n        sortable: true,\n        render: (record: any) => {\n          if (record.part_detail?.virtual) {\n            return <Text size='sm' fs='italic'>{t`Virtual part`}</Text>;\n          }\n\n          return (\n            <ProgressBar\n              progressLabel={true}\n              value={record.shipped}\n              maximum={record.quantity}\n            />\n          );\n        }\n      },\n      {\n        accessor: 'notes'\n      },\n      LinkColumn({\n        accessor: 'link'\n      })\n    ];\n  }, [table.isRowExpanded]);\n\n  const [selectedLineId, setSelectedLineId] = useState<number>(0);\n\n  const [selectedSupplierPart, setSelectedSupplierPart] = useState<any>(null);\n\n  const [initialData, setInitialData] = useState({});\n\n  const createLineFields = useSalesOrderLineItemFields({\n    orderId: orderId,\n    customerId: customerId,\n    create: true\n  });\n\n  const newLine = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_line_list,\n    title: t`Add Line Item`,\n    fields: createLineFields,\n    initialData: {\n      ...initialData,\n      sale_price_currency: currency\n    },\n    onFormSuccess: orderDetailRefresh,\n    table: table\n  });\n\n  const editLineFields = useSalesOrderLineItemFields({\n    orderId: orderId,\n    customerId: customerId,\n    create: false\n  });\n\n  const editLine = useEditApiFormModal({\n    url: ApiEndpoints.sales_order_line_list,\n    pk: selectedLineId,\n    title: t`Edit Line Item`,\n    fields: editLineFields,\n    onFormSuccess: orderDetailRefresh,\n    table: table\n  });\n\n  const deleteLine = useDeleteApiFormModal({\n    url: ApiEndpoints.sales_order_line_list,\n    pk: selectedLineId,\n    title: t`Delete Line Item`,\n    onFormSuccess: orderDetailRefresh,\n    table: table\n  });\n\n  const allocateSerialFields = useSalesOrderAllocateSerialsFields({\n    itemId: selectedLineId,\n    orderId: orderId\n  });\n\n  const allocateBySerials = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_allocate_serials,\n    pk: orderId,\n    title: t`Allocate Serial Numbers`,\n    preFormContent: selectedSupplierPart ? (\n      <Paper withBorder p='sm'>\n        <RenderPart instance={selectedSupplierPart} />\n      </Paper>\n    ) : undefined,\n    initialData: initialData,\n    fields: allocateSerialFields,\n    table: table\n  });\n\n  const buildOrderFields = useBuildOrderFields({\n    create: true,\n    modalId: 'build-order-create-from-sales-order'\n  });\n\n  const newBuildOrder = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_list,\n    title: t`Create Build Order`,\n    modalId: 'build-order-create-from-sales-order',\n    fields: buildOrderFields,\n    initialData: initialData,\n    follow: true,\n    modelType: ModelType.build\n  });\n\n  const [selectedItems, setSelectedItems] = useState<any[]>([]);\n\n  const allocateStock = useAllocateToSalesOrderForm({\n    orderId: orderId,\n    lineItems: selectedItems,\n    onFormSuccess: () => {\n      table.refreshTable();\n      table.clearSelectedRecords();\n    }\n  });\n\n  const [partsToOrder, setPartsToOrder] = useState<any[]>([]);\n\n  const orderPartsWizard = OrderPartsWizard({\n    parts: partsToOrder\n  });\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'allocated',\n        label: t`Allocated`,\n        description: t`Show lines which are fully allocated`\n      },\n      {\n        name: 'completed',\n        label: t`Completed`,\n        description: t`Show lines which are completed`\n      }\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-line-item'\n        tooltip={t`Add Line Item`}\n        onClick={() => {\n          setInitialData({\n            order: orderId\n          });\n          newLine.open();\n        }}\n        hidden={!editable || !user.hasAddRole(UserRoles.sales_order)}\n      />,\n      <ActionButton\n        key='order-parts'\n        hidden={!user.hasAddRole(UserRoles.purchase_order)}\n        disabled={!table.hasSelectedRecords}\n        tooltip={t`Order Parts`}\n        icon={<IconShoppingCart />}\n        color='blue'\n        onClick={() => {\n          setPartsToOrder(table.selectedRecords.map((r) => r.part_detail));\n          orderPartsWizard.openWizard();\n        }}\n      />,\n      <ActionButton\n        key='allocate-stock'\n        tooltip={t`Allocate Stock`}\n        icon={<IconArrowRight />}\n        disabled={!table.hasSelectedRecords}\n        color='green'\n        onClick={() => {\n          setSelectedItems(\n            table.selectedRecords.filter((r) => r.allocated < r.quantity)\n          );\n          allocateStock.open();\n        }}\n      />\n    ];\n  }, [user, orderId, table.hasSelectedRecords, table.selectedRecords]);\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const allocated = (record?.allocated ?? 0) > (record?.quantity ?? 0);\n      const virtual = record?.part_detail?.virtual ?? false;\n\n      return [\n        RowViewAction({\n          title: t`View Part`,\n          modelType: ModelType.part,\n          modelId: record.part,\n          navigate: navigate,\n          hidden: !user.hasViewRole(UserRoles.part)\n        }),\n        {\n          hidden:\n            allocated ||\n            virtual ||\n            !editable ||\n            !user.hasChangeRole(UserRoles.sales_order),\n          title: t`Allocate Stock`,\n          icon: <IconSquareArrowRight />,\n          color: 'green',\n          onClick: () => {\n            setSelectedItems([record]);\n            allocateStock.open();\n          }\n        },\n        {\n          hidden:\n            !record?.part_detail?.trackable ||\n            allocated ||\n            virtual ||\n            !editable ||\n            !user.hasChangeRole(UserRoles.sales_order),\n          title: t`Allocate serials`,\n          icon: <IconHash />,\n          color: 'green',\n          onClick: () => {\n            setSelectedLineId(record.pk);\n            setSelectedSupplierPart(record?.part_detail ?? null);\n            setInitialData({\n              quantity: record.quantity - record.allocated\n            });\n            allocateBySerials.open();\n          }\n        },\n        {\n          hidden:\n            allocated ||\n            virtual ||\n            !user.hasAddRole(UserRoles.build) ||\n            !record?.part_detail?.assembly,\n          title: t`Build stock`,\n          icon: <IconTools />,\n          color: 'blue',\n          onClick: () => {\n            setInitialData({\n              part: record.part,\n              quantity: (record?.quantity ?? 1) - (record?.allocated ?? 0),\n              sales_order: orderId\n            });\n            newBuildOrder.open();\n          }\n        },\n        {\n          hidden:\n            allocated ||\n            virtual ||\n            !user.hasAddRole(UserRoles.purchase_order) ||\n            !record?.part_detail?.purchaseable,\n          title: t`Order stock`,\n          icon: <IconShoppingCart />,\n          color: 'blue',\n          onClick: () => {\n            setPartsToOrder([record.part_detail]);\n            orderPartsWizard.openWizard();\n          }\n        },\n        RowEditAction({\n          hidden: !editable || !user.hasChangeRole(UserRoles.sales_order),\n          onClick: () => {\n            setSelectedLineId(record.pk);\n            editLine.open();\n          }\n        }),\n        RowDuplicateAction({\n          hidden: !editable || !user.hasAddRole(UserRoles.sales_order),\n          onClick: () => {\n            setInitialData(record);\n            newLine.open();\n          }\n        }),\n        RowDeleteAction({\n          hidden: !editable || !user.hasDeleteRole(UserRoles.sales_order),\n          onClick: () => {\n            setSelectedLineId(record.pk);\n            deleteLine.open();\n          }\n        })\n      ];\n    },\n    [navigate, user, editable]\n  );\n\n  // Control row expansion\n  const rowExpansion: DataTableRowExpansionProps<any> = useMemo(() => {\n    return {\n      allowMultiple: true,\n      expandable: ({ record }: { record: any }) => {\n        if (record?.part_detail?.virtual) {\n          return false;\n        }\n        return table.isRowExpanded(record.pk) || record.allocated > 0;\n      },\n      content: ({ record }: { record: any }) => {\n        return (\n          <SalesOrderAllocationTable\n            showOrderInfo={false}\n            showPartInfo={false}\n            orderId={orderId}\n            lineItemId={record.pk}\n            partId={record.part}\n            allowEdit={true}\n            modelTarget={ModelType.stockitem}\n            modelField={'item'}\n            isSubTable\n          />\n        );\n      }\n    };\n  }, [orderId, table.isRowExpanded]);\n\n  return (\n    <>\n      {editLine.modal}\n      {deleteLine.modal}\n      {newLine.modal}\n      {newBuildOrder.modal}\n      {allocateBySerials.modal}\n      {allocateStock.modal}\n      {orderPartsWizard.wizard}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.sales_order_line_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          enableSelection: true,\n          enableDownload: true,\n          params: {\n            order: orderId,\n            part_detail: true\n          },\n          rowActions: rowActions,\n          tableActions: tableActions,\n          tableFilters: tableFilters,\n          rowExpansion: rowExpansion\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { IconTruckDelivery } from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowCancelAction,\n  RowEditAction,\n  RowViewAction\n} from '@lib/components/RowActions';\nimport { YesNoButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport dayjs from 'dayjs';\nimport {\n  useSalesOrderShipmentCompleteFields,\n  useSalesOrderShipmentFields\n} from '../../forms/SalesOrderForms';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { DateColumn, LinkColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport default function SalesOrderShipmentTable({\n  orderId\n}: Readonly<{\n  orderId: number;\n}>) {\n  const user = useUserState();\n  const navigate = useNavigate();\n  const table = useTable('sales-order-shipment');\n\n  const [selectedShipment, setSelectedShipment] = useState<any>({});\n\n  const newShipmentFields = useSalesOrderShipmentFields({});\n\n  const editShipmentFields = useSalesOrderShipmentFields({});\n\n  const completeShipmentFields = useSalesOrderShipmentCompleteFields({});\n\n  const newShipment = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_shipment_list,\n    fields: newShipmentFields,\n    title: t`Create Shipment`,\n    table: table,\n    initialData: {\n      order: orderId\n    }\n  });\n\n  const deleteShipment = useDeleteApiFormModal({\n    url: ApiEndpoints.sales_order_shipment_list,\n    pk: selectedShipment.pk,\n    title: t`Cancel Shipment`,\n    table: table\n  });\n\n  const editShipment = useEditApiFormModal({\n    url: ApiEndpoints.sales_order_shipment_list,\n    pk: selectedShipment.pk,\n    fields: editShipmentFields,\n    title: t`Edit Shipment`,\n    table: table\n  });\n\n  const completeShipment = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_shipment_complete,\n    pk: selectedShipment.pk,\n    fields: completeShipmentFields,\n    title: t`Complete Shipment`,\n    table: table,\n    focus: 'tracking_number',\n    initialData: {\n      ...selectedShipment,\n      shipment_date: dayjs().format('YYYY-MM-DD')\n    }\n  });\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'reference',\n        title: t`Shipment Reference`,\n        switchable: false,\n        sortable: true\n      },\n      {\n        accessor: 'allocated_items',\n        sortable: true,\n        switchable: false,\n        title: t`Items`\n      },\n      {\n        accessor: 'shipped',\n        title: t`Shipped`,\n        switchable: true,\n        sortable: false,\n        render: (record: any) => <YesNoButton value={!!record.shipment_date} />\n      },\n      DateColumn({\n        accessor: 'shipment_date',\n        title: t`Shipment Date`\n      }),\n      DateColumn({\n        accessor: 'delivery_date',\n        title: t`Delivery Date`\n      }),\n      {\n        accessor: 'tracking_number'\n      },\n      {\n        accessor: 'invoice_number'\n      },\n      LinkColumn({\n        accessor: 'link'\n      })\n    ];\n  }, []);\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const shipped: boolean = !!record.shipment_date;\n\n      return [\n        RowViewAction({\n          title: t`View Shipment`,\n          modelType: ModelType.salesordershipment,\n          modelId: record.pk,\n          navigate: navigate\n        }),\n        {\n          hidden: shipped || !user.hasChangeRole(UserRoles.sales_order),\n          title: t`Complete Shipment`,\n          color: 'green',\n          icon: <IconTruckDelivery />,\n          onClick: () => {\n            setSelectedShipment(record);\n            completeShipment.open();\n          }\n        },\n        RowEditAction({\n          hidden: !user.hasChangeRole(UserRoles.sales_order),\n          tooltip: t`Edit shipment`,\n          onClick: () => {\n            setSelectedShipment(record);\n            editShipment.open();\n          }\n        }),\n        RowCancelAction({\n          hidden: shipped || !user.hasDeleteRole(UserRoles.sales_order),\n          tooltip: t`Cancel shipment`,\n          onClick: () => {\n            setSelectedShipment(record);\n            deleteShipment.open();\n          }\n        })\n      ];\n    },\n    [user]\n  );\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-shipment'\n        tooltip={t`Add shipment`}\n        hidden={!user.hasAddRole(UserRoles.sales_order)}\n        onClick={() => {\n          newShipment.open();\n        }}\n      />\n    ];\n  }, [user]);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'shipped',\n        label: t`Shipped`,\n        description: t`Show shipments which have been shipped`\n      },\n      {\n        name: 'delivered',\n        label: t`Delivered`,\n        description: t`Show shipments which have been delivered`\n      }\n    ];\n  }, []);\n\n  return (\n    <>\n      {newShipment.modal}\n      {editShipment.modal}\n      {deleteShipment.modal}\n      {completeShipment.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.sales_order_shipment_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          tableActions: tableActions,\n          tableFilters: tableFilters,\n          modelType: ModelType.salesordershipment,\n          enableSelection: true,\n          enableReports: true,\n          rowActions: rowActions,\n          params: {\n            order: orderId\n          }\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Accordion, Grid, Skeleton, Stack } from '@mantine/core';\nimport {\n  IconBookmark,\n  IconInfoCircle,\n  IconList,\n  IconTools,\n  IconTruckDelivery\n} from '@tabler/icons-react';\nimport { type ReactNode, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport AdminButton from '../../components/buttons/AdminButton';\nimport PrimaryActionButton from '../../components/buttons/PrimaryActionButton';\nimport { PrintingActions } from '../../components/buttons/PrintingActions';\nimport {\n  type DetailsField,\n  DetailsTable\n} from '../../components/details/Details';\nimport { DetailsImage } from '../../components/details/DetailsImage';\nimport { ItemDetailsGrid } from '../../components/details/ItemDetails';\nimport {\n  BarcodeActionDropdown,\n  CancelItemAction,\n  DuplicateItemAction,\n  EditItemAction,\n  HoldItemAction,\n  OptionsActionDropdown\n} from '../../components/items/ActionDropdown';\nimport { StylishText } from '../../components/items/StylishText';\nimport InstanceDetail from '../../components/nav/InstanceDetail';\nimport { PageDetail } from '../../components/nav/PageDetail';\nimport AttachmentPanel from '../../components/panels/AttachmentPanel';\nimport NotesPanel from '../../components/panels/NotesPanel';\nimport type { PanelType } from '../../components/panels/Panel';\nimport { PanelGroup } from '../../components/panels/PanelGroup';\nimport { StatusRenderer } from '../../components/render/StatusRenderer';\nimport { formatCurrency } from '../../defaults/formatters';\nimport { useSalesOrderFields } from '../../forms/SalesOrderForms';\nimport {\n  useCreateApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport useStatusCodes from '../../hooks/UseStatusCodes';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport { BuildOrderTable } from '../../tables/build/BuildOrderTable';\nimport ExtraLineItemTable from '../../tables/general/ExtraLineItemTable';\nimport SalesOrderAllocationTable from '../../tables/sales/SalesOrderAllocationTable';\nimport SalesOrderLineItemTable from '../../tables/sales/SalesOrderLineItemTable';\nimport SalesOrderShipmentTable from '../../tables/sales/SalesOrderShipmentTable';\n\n/**\n * Detail page for a single SalesOrder\n */\nexport default function SalesOrderDetail() {\n  const { id } = useParams();\n\n  const user = useUserState();\n\n  const globalSettings = useGlobalSettingsState();\n\n  const {\n    instance: order,\n    instanceQuery,\n    refreshInstance\n  } = useInstance({\n    endpoint: ApiEndpoints.sales_order_list,\n    pk: id,\n    params: {\n      customer_detail: true\n    }\n  });\n\n  const orderCurrency = useMemo(() => {\n    return (\n      order.order_currency ||\n      order.customer_detail?.currency ||\n      globalSettings.getSetting('INVENTREE_DEFAULT_CURRENCY')\n    );\n  }, [order, globalSettings]);\n\n  const detailsPanel = useMemo(() => {\n    if (instanceQuery.isFetching) {\n      return <Skeleton />;\n    }\n\n    const tl: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'reference',\n        label: t`Reference`,\n        copy: true\n      },\n      {\n        type: 'text',\n        name: 'customer_reference',\n        label: t`Customer Reference`,\n        copy: true,\n        icon: 'reference',\n        hidden: !order.customer_reference\n      },\n      {\n        type: 'link',\n        name: 'customer',\n        icon: 'customers',\n        label: t`Customer`,\n        model: ModelType.company\n      },\n      {\n        type: 'text',\n        name: 'description',\n        label: t`Description`,\n        copy: true\n      },\n      {\n        type: 'status',\n        name: 'status',\n        label: t`Status`,\n        model: ModelType.salesorder\n      },\n      {\n        type: 'status',\n        name: 'status_custom_key',\n        label: t`Custom Status`,\n        model: ModelType.salesorder,\n        icon: 'status',\n        hidden:\n          !order.status_custom_key || order.status_custom_key == order.status\n      }\n    ];\n\n    const tr: DetailsField[] = [\n      {\n        type: 'progressbar',\n        name: 'completed',\n        icon: 'progress',\n        label: t`Completed Line Items`,\n        total: order.line_items,\n        progress: order.completed_lines,\n        hidden: !order.line_items\n      },\n      {\n        type: 'progressbar',\n        name: 'shipments',\n        icon: 'shipment',\n        label: t`Completed Shipments`,\n        total: order.shipments_count,\n        progress: order.completed_shipments_count,\n        hidden: !order.shipments_count\n      },\n      {\n        type: 'text',\n        name: 'currency',\n        label: t`Order Currency`,\n        value_formatter: () => orderCurrency\n      },\n      {\n        type: 'text',\n        name: 'total_price',\n        label: t`Total Cost`,\n        value_formatter: () => {\n          return formatCurrency(order?.total_price, {\n            currency: orderCurrency\n          });\n        }\n      }\n    ];\n\n    const bl: DetailsField[] = [\n      {\n        type: 'link',\n        external: true,\n        name: 'link',\n        label: t`Link`,\n        copy: true,\n        hidden: !order.link\n      },\n      {\n        type: 'text',\n        name: 'contact_detail.name',\n        label: t`Contact`,\n        icon: 'user',\n        copy: true,\n        hidden: !order.contact\n      },\n      {\n        type: 'text',\n        name: 'contact_detail.email',\n        label: t`Contact Email`,\n        icon: 'email',\n        copy: true,\n        hidden: !order.contact_detail?.email\n      },\n      {\n        type: 'text',\n        name: 'contact_detail.phone',\n        label: t`Contact Phone`,\n        icon: 'phone',\n        copy: true,\n        hidden: !order.contact_detail?.phone\n      },\n      {\n        type: 'text',\n        name: 'project_code_label',\n        label: t`Project Code`,\n        icon: 'reference',\n        copy: true,\n        hidden: !order.project_code\n      },\n      {\n        type: 'text',\n        name: 'responsible',\n        label: t`Responsible`,\n        badge: 'owner',\n        hidden: !order.responsible\n      }\n    ];\n\n    const br: DetailsField[] = [\n      {\n        type: 'date',\n        name: 'creation_date',\n        label: t`Creation Date`,\n        copy: true,\n        hidden: !order.creation_date\n      },\n      {\n        type: 'date',\n        name: 'issue_date',\n        label: t`Issue Date`,\n        icon: 'calendar',\n        copy: true,\n        hidden: !order.issue_date\n      },\n      {\n        type: 'date',\n        name: 'start_date',\n        label: t`Start Date`,\n        icon: 'calendar',\n        hidden: !order.start_date,\n        copy: true\n      },\n      {\n        type: 'date',\n        name: 'target_date',\n        label: t`Target Date`,\n        hidden: !order.target_date,\n        copy: true\n      },\n      {\n        type: 'date',\n        name: 'shipment_date',\n        label: t`Completion Date`,\n        hidden: !order.shipment_date,\n        copy: true\n      }\n    ];\n\n    return (\n      <ItemDetailsGrid>\n        <Grid grow>\n          <DetailsImage\n            appRole={UserRoles.purchase_order}\n            apiPath={ApiEndpoints.company_list}\n            src={order.customer_detail?.image}\n            pk={order.customer}\n          />\n          <Grid.Col span={{ base: 12, sm: 8 }}>\n            <DetailsTable fields={tl} item={order} />\n          </Grid.Col>\n        </Grid>\n        <DetailsTable fields={tr} item={order} />\n        <DetailsTable fields={bl} item={order} />\n        <DetailsTable fields={br} item={order} />\n      </ItemDetailsGrid>\n    );\n  }, [order, orderCurrency, instanceQuery]);\n\n  const soStatus = useStatusCodes({ modelType: ModelType.salesorder });\n\n  const salesOrderFields = useSalesOrderFields({});\n\n  const editSalesOrder = useEditApiFormModal({\n    url: ApiEndpoints.sales_order_list,\n    pk: order.pk,\n    title: t`Edit Sales Order`,\n    fields: salesOrderFields,\n    onFormSuccess: () => {\n      refreshInstance();\n    }\n  });\n\n  const duplicateOrderFields = useSalesOrderFields({\n    duplicateOrderId: order.pk\n  });\n\n  const duplicateSalesOrderInitialData = useMemo(() => {\n    const data = { ...order };\n    // if we set the reference to null/undefined, it will be left blank in the form\n    // if we omit the reference altogether, it will be auto-generated via reference pattern\n    // from the OPTIONS response\n    delete data.reference;\n    return data;\n  }, [order]);\n\n  const duplicateSalesOrder = useCreateApiFormModal({\n    url: ApiEndpoints.sales_order_list,\n    title: t`Add Sales Order`,\n    fields: duplicateOrderFields,\n    initialData: duplicateSalesOrderInitialData,\n    follow: true,\n    modelType: ModelType.salesorder\n  });\n\n  const orderPanels: PanelType[] = useMemo(() => {\n    return [\n      {\n        name: 'detail',\n        label: t`Order Details`,\n        icon: <IconInfoCircle />,\n        content: detailsPanel\n      },\n      {\n        name: 'line-items',\n        label: t`Line Items`,\n        icon: <IconList />,\n        content: (\n          <Accordion\n            multiple={true}\n            defaultValue={['line-items', 'extra-items']}\n          >\n            <Accordion.Item value='line-items' key='lineitems'>\n              <Accordion.Control>\n                <StylishText size='lg'>{t`Line Items`}</StylishText>\n              </Accordion.Control>\n              <Accordion.Panel>\n                <SalesOrderLineItemTable\n                  orderId={order.pk}\n                  orderDetailRefresh={refreshInstance}\n                  currency={orderCurrency}\n                  customerId={order.customer}\n                  editable={\n                    order.status != soStatus.COMPLETE &&\n                    order.status != soStatus.CANCELLED\n                  }\n                />\n              </Accordion.Panel>\n            </Accordion.Item>\n            <Accordion.Item value='extra-items' key='extraitems'>\n              <Accordion.Control>\n                <StylishText size='lg'>{t`Extra Line Items`}</StylishText>\n              </Accordion.Control>\n              <Accordion.Panel>\n                <ExtraLineItemTable\n                  endpoint={ApiEndpoints.sales_order_extra_line_list}\n                  orderId={order.pk}\n                  orderDetailRefresh={refreshInstance}\n                  currency={orderCurrency}\n                  role={UserRoles.sales_order}\n                />\n              </Accordion.Panel>\n            </Accordion.Item>\n          </Accordion>\n        )\n      },\n      {\n        name: 'shipments',\n        label: t`Shipments`,\n        icon: <IconTruckDelivery />,\n        content: <SalesOrderShipmentTable orderId={order.pk} />\n      },\n      {\n        name: 'allocations',\n        label: t`Allocated Stock`,\n        icon: <IconBookmark />,\n        content: (\n          <SalesOrderAllocationTable\n            orderId={order.pk}\n            showPartInfo\n            allowEdit\n            modelField='item'\n            modelTarget={ModelType.stockitem}\n          />\n        )\n      },\n      {\n        name: 'build-orders',\n        label: t`Build Orders`,\n        icon: <IconTools />,\n        hidden: !user.hasViewRole(UserRoles.build),\n        content: order?.pk ? (\n          <BuildOrderTable salesOrderId={order.pk} />\n        ) : (\n          <Skeleton />\n        )\n      },\n      AttachmentPanel({\n        model_type: ModelType.salesorder,\n        model_id: order.pk\n      }),\n      NotesPanel({\n        model_type: ModelType.salesorder,\n        model_id: order.pk\n      })\n    ];\n  }, [order, id, user, soStatus, user]);\n\n  const issueOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.sales_order_issue, order.pk),\n    title: t`Issue Sales Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Issue this order`,\n    successMessage: t`Order issued`\n  });\n\n  const cancelOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.sales_order_cancel, order.pk),\n    title: t`Cancel Sales Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Cancel this order`,\n    successMessage: t`Order cancelled`\n  });\n\n  const holdOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.sales_order_hold, order.pk),\n    title: t`Hold Sales Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Place this order on hold`,\n    successMessage: t`Order placed on hold`\n  });\n\n  const shipOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.sales_order_complete, order.pk),\n    title: t`Ship Sales Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Ship this order?`,\n    successMessage: t`Order shipped`,\n    fields: {\n      accept_incomplete: {}\n    }\n  });\n\n  const completeOrder = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.sales_order_complete, order.pk),\n    title: t`Complete Sales Order`,\n    onFormSuccess: refreshInstance,\n    preFormWarning: t`Mark this order as complete`,\n    successMessage: t`Order completed`,\n    fields: {\n      accept_incomplete: {}\n    }\n  });\n\n  const soActions = useMemo(() => {\n    const canEdit: boolean = user.hasChangeRole(UserRoles.sales_order);\n\n    const canIssue: boolean =\n      canEdit &&\n      (order.status == soStatus.PENDING || order.status == soStatus.ON_HOLD);\n\n    const canCancel: boolean =\n      canEdit &&\n      (order.status == soStatus.PENDING ||\n        order.status == soStatus.ON_HOLD ||\n        order.status == soStatus.IN_PROGRESS);\n\n    const canHold: boolean =\n      canEdit &&\n      (order.status == soStatus.PENDING ||\n        order.status == soStatus.IN_PROGRESS);\n\n    const autoComplete = globalSettings.isSet('SALESORDER_SHIP_COMPLETE');\n\n    const canShip: boolean =\n      !autoComplete && canEdit && order.status == soStatus.IN_PROGRESS;\n    const canComplete: boolean =\n      canEdit &&\n      (order.status == soStatus.SHIPPED ||\n        (autoComplete && order.status == soStatus.IN_PROGRESS));\n\n    return [\n      <PrimaryActionButton\n        title={t`Issue Order`}\n        icon='issue'\n        hidden={!canIssue}\n        color='blue'\n        onClick={issueOrder.open}\n      />,\n      <PrimaryActionButton\n        title={t`Ship Order`}\n        icon='deliver'\n        hidden={!canShip}\n        color='blue'\n        onClick={shipOrder.open}\n      />,\n      <PrimaryActionButton\n        title={t`Complete Order`}\n        icon='complete'\n        hidden={!canComplete}\n        color='green'\n        onClick={completeOrder.open}\n      />,\n      <AdminButton model={ModelType.salesorder} id={order.pk} />,\n      <BarcodeActionDropdown\n        model={ModelType.salesorder}\n        pk={order.pk}\n        hash={order?.barcode_hash}\n      />,\n      <PrintingActions\n        modelType={ModelType.salesorder}\n        items={[order.pk]}\n        enableReports\n      />,\n      <OptionsActionDropdown\n        tooltip={t`Order Actions`}\n        actions={[\n          EditItemAction({\n            hidden: !canEdit,\n            onClick: editSalesOrder.open,\n            tooltip: t`Edit order`\n          }),\n          DuplicateItemAction({\n            hidden: !user.hasAddRole(UserRoles.sales_order),\n            onClick: duplicateSalesOrder.open,\n            tooltip: t`Duplicate order`\n          }),\n          HoldItemAction({\n            tooltip: t`Hold order`,\n            hidden: !canHold,\n            onClick: holdOrder.open\n          }),\n          CancelItemAction({\n            tooltip: t`Cancel order`,\n            hidden: !canCancel,\n            onClick: cancelOrder.open\n          })\n        ]}\n      />\n    ];\n  }, [user, order, soStatus, globalSettings]);\n\n  const orderBadges: ReactNode[] = useMemo(() => {\n    return instanceQuery.isLoading\n      ? []\n      : [\n          <StatusRenderer\n            status={order.status_custom_key}\n            type={ModelType.salesorder}\n            options={{ size: 'lg' }}\n            key={order.pk}\n          />\n        ];\n  }, [order, instanceQuery]);\n\n  const subtitle: string = useMemo(() => {\n    let t = order.customer_detail?.name || '';\n\n    if (order.customer_reference) {\n      t += ` (${order.customer_reference})`;\n    }\n\n    return t;\n  }, [order]);\n\n  return (\n    <>\n      {issueOrder.modal}\n      {cancelOrder.modal}\n      {holdOrder.modal}\n      {shipOrder.modal}\n      {completeOrder.modal}\n      {editSalesOrder.modal}\n      {duplicateSalesOrder.modal}\n      <InstanceDetail\n        query={instanceQuery}\n        requiredRole={UserRoles.sales_order}\n      >\n        <Stack gap='xs'>\n          <PageDetail\n            title={`${t`Sales Order`}: ${order.reference}`}\n            subtitle={subtitle}\n            imageUrl={order.customer_detail?.image}\n            badges={orderBadges}\n            actions={soActions}\n            breadcrumbs={[{ name: t`Sales`, url: '/sales/' }]}\n            lastCrumb={[\n              { name: order.reference, url: `/sales/sales-order/${order.pk}` }\n            ]}\n            editAction={editSalesOrder.open}\n            editEnabled={user.hasChangePermission(ModelType.salesorder)}\n          />\n          <PanelGroup\n            pageKey='salesorder'\n            panels={orderPanels}\n            model={ModelType.salesorder}\n            reloadInstance={refreshInstance}\n            instance={order}\n            id={order.pk}\n          />\n        </Stack>\n      </InstanceDetail>\n    </>\n  );\n}\n"],"names":["SalesOrderLineItemTable","orderId","orderDetailRefresh","currency","customerId","editable","navigate","useNavigate","user","useUserState","table","useTable","tableColumns","useMemo","accessor","sortable","switchable","minWidth","render","record","jsxs","Group","part_detail","virtual","jsx","RowExpansionIcon","allocated","isRowExpanded","pk","RenderPartColumn","title","_i18n","_","id","DescriptionColumn","DecimalColumn","formatCurrency","sale_price","sale_price_currency","multiplier","quantity","DateColumn","Text","part_stock","available_stock","variant_stock","available_variant_stock","available","required","Math","max","shipped","color","text","formatDecimal","extra","push","building","on_order","TableHoverCard","ProgressBar","LinkColumn","selectedLineId","setSelectedLineId","useState","selectedSupplierPart","setSelectedSupplierPart","initialData","setInitialData","createLineFields","useSalesOrderLineItemFields","create","newLine","useCreateApiFormModal","url","ApiEndpoints","sales_order_line_list","fields","onFormSuccess","editLineFields","editLine","useEditApiFormModal","deleteLine","useDeleteApiFormModal","allocateSerialFields","useSalesOrderAllocateSerialsFields","itemId","allocateBySerials","sales_order_allocate_serials","preFormContent","Paper","RenderPart","undefined","buildOrderFields","useBuildOrderFields","modalId","newBuildOrder","build_order_list","follow","modelType","ModelType","build","selectedItems","setSelectedItems","allocateStock","useAllocateToSalesOrderForm","lineItems","refreshTable","clearSelectedRecords","partsToOrder","setPartsToOrder","orderPartsWizard","OrderPartsWizard","parts","tableFilters","name","label","description","tableActions","AddItemButton","order","open","hasAddRole","UserRoles","sales_order","ActionButton","purchase_order","hasSelectedRecords","IconShoppingCart","selectedRecords","map","r","openWizard","IconArrowRight","filter","rowActions","useCallback","RowViewAction","part","modelId","hidden","hasViewRole","hasChangeRole","icon","IconSquareArrowRight","onClick","trackable","IconHash","assembly","IconTools","purchaseable","RowEditAction","RowDuplicateAction","RowDeleteAction","hasDeleteRole","rowExpansion","allowMultiple","expandable","content","SalesOrderAllocationTable","stockitem","Fragment","modal","wizard","InvenTreeTable","apiUrl","enableSelection","enableDownload","params","SalesOrderShipmentTable","selectedShipment","setSelectedShipment","newShipmentFields","useSalesOrderShipmentFields","editShipmentFields","completeShipmentFields","useSalesOrderShipmentCompleteFields","newShipment","sales_order_shipment_list","deleteShipment","editShipment","completeShipment","sales_order_shipment_complete","focus","shipment_date","dayjs","format","YesNoButton","salesordershipment","IconTruckDelivery","tooltip","RowCancelAction","enableReports","SalesOrderDetail","useParams","globalSettings","useGlobalSettingsState","instance","instanceQuery","refreshInstance","useInstance","endpoint","sales_order_list","customer_detail","orderCurrency","order_currency","getSetting","detailsPanel","isFetching","Skeleton","tl","type","copy","customer_reference","model","company","salesorder","status_custom_key","status","tr","total","line_items","progress","completed_lines","shipments_count","completed_shipments_count","value_formatter","total_price","bl","external","link","contact","contact_detail","email","phone","project_code","badge","responsible","br","creation_date","issue_date","start_date","target_date","ItemDetailsGrid","Grid","DetailsImage","company_list","image","customer","base","sm","DetailsTable","soStatus","useStatusCodes","salesOrderFields","useSalesOrderFields","editSalesOrder","duplicateOrderFields","duplicateOrderId","duplicateSalesOrderInitialData","data","reference","duplicateSalesOrder","orderPanels","IconInfoCircle","IconList","Accordion","StylishText","COMPLETE","CANCELLED","ExtraLineItemTable","sales_order_extra_line_list","IconBookmark","BuildOrderTable","AttachmentPanel","model_type","model_id","NotesPanel","issueOrder","sales_order_issue","preFormWarning","successMessage","cancelOrder","sales_order_cancel","holdOrder","sales_order_hold","shipOrder","sales_order_complete","accept_incomplete","completeOrder","soActions","canEdit","canIssue","PENDING","ON_HOLD","canCancel","IN_PROGRESS","canHold","autoComplete","isSet","canShip","canComplete","SHIPPED","PrimaryActionButton","AdminButton","BarcodeActionDropdown","barcode_hash","PrintingActions","OptionsActionDropdown","EditItemAction","DuplicateItemAction","HoldItemAction","CancelItemAction","orderBadges","isLoading","StatusRenderer","size","subtitle","t","InstanceDetail","Stack","PageDetail","hasChangePermission","PanelGroup"],"mappings":"yxEAyDA,SAAwBA,GAAwB,CAC9CC,QAAAA,EACAC,mBAAAA,EACAC,SAAAA,EACAC,WAAAA,EACAC,SAAAA,CAOD,EAAG,CACF,MAAMC,EAAWC,GAAAA,EACXC,EAAOC,GAAAA,EACPC,EAAQC,GAAS,uBAAuB,EAExCC,EAA8BC,EAAAA,QAAQ,IACnC,CACL,CACEC,SAAU,OACVC,SAAU,GACVC,WAAY,GACZC,SAAU,IACVC,OAASC,GAAgB,OACvB,OACEC,EAAAA,KAACC,GAAA,CAAM,KAAK,SACTF,SAAAA,GAAAA,EAAAA,EAAOG,cAAPH,YAAAA,EAAoBI,UACnBC,EAAAA,IAACC,GAAA,CACC,QAASN,EAAOO,UAChB,SAAUhB,EAAMiB,cAAcR,EAAOS,EAAE,CAAA,CAAE,EAG7CJ,EAAAA,IAACK,GAAA,CAAiB,KAAMV,EAAOG,WAAAA,CAAY,CAAA,EAC7C,CAEJ,CAAA,EAEF,CACER,SAAU,kBACVgB,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAK,EACZjB,WAAY,EAAA,EAEdkB,GAAkB,CAChBpB,SAAU,yBAAA,CACX,EACD,CACEA,SAAU,YACVC,SAAU,GACVC,WAAY,EAAA,EAEdmB,GAAc,CACZrB,SAAU,WACVC,SAAU,EAAA,CACX,EACD,CACED,SAAU,aACVI,OAASC,GACPiB,EAAejB,EAAOkB,WAAY,CAChClC,SAAUgB,EAAOmB,mBAAAA,CAClB,CAAA,EAEL,CACExB,SAAU,cACVgB,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpBf,OAASC,GACPiB,EAAejB,EAAOkB,WAAY,CAChClC,SAAUgB,EAAOmB,oBACjBC,WAAYpB,EAAOqB,QAAAA,CACpB,CAAA,EAELC,EAAW,CACT3B,SAAU,cACVC,SAAU,GACVe,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,CAAC,CACtB,EACD,CACEnB,SAAU,QACVgB,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxBf,OAASC,GAAgB,QACvB,IAAIA,GAAAA,EAAOG,cAAPH,MAAAA,GAAoBI,QACtB,aAAQmB,EAAA,CAAK,KAAK,KAAK,GAAG,SAASX,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAc,EAAE,EAGtD,MAAMU,GAAaxB,GAAAA,YAAAA,EAAQyB,kBAAmB,EACxCC,GAAgB1B,GAAAA,YAAAA,EAAQ2B,0BAA2B,EACnDC,EAAYJ,EAAaE,EAEzBG,EAAWC,KAAKC,IACpB/B,EAAOqB,SAAWrB,EAAOO,UAAYP,EAAOgC,QAC5C,CACF,EAEA,IAAIC,EACAC,EAAO,GAAGC,EAAcP,CAAS,CAAC,GAEtC,MAAMQ,EAAqB,CAAA,EAE3B,OAAIR,GAAa,GACfK,EAAQ,MACRC,EAAItB,EAAAC,EAAG,CAAAC,GAAA,QAAA,CAAoB,GAClBc,EAAYC,IACrBI,EAAQ,UAGNP,EAAgB,GAClBU,EAAMC,KAAKhC,EAAAA,IAACkB,EAAA,CAAK,KAAK,KAAKX,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAwB,EAAE,CAAO,EAG3Dd,EAAOsC,SAAW,GACpBF,EAAMC,KACJpC,OAACsB,EAAA,CAAK,KAAK,KACTX,SAAAA,CAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAe,EAAE,KAAGqB,EAAcnC,EAAOsC,QAAQ,CAAA,CAAA,CACpD,CACF,EAGEtC,EAAOuC,SAAW,GACpBH,EAAMC,KACJpC,OAACsB,EAAA,CAAK,KAAK,KACTX,SAAAA,CAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAU,EAAE,KAAGqB,EAAcnC,EAAOuC,QAAQ,CAAA,CAAA,CAC/C,CACF,EAIAlC,EAAAA,IAACmC,GAAA,CACC,MAAOnC,EAAAA,IAACkB,EAAA,CAAK,EAAGU,EAAQC,SAAAA,CAAAA,CAAK,EAC7B,MAAAE,EACA,MAAMxB,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAmB,EAAE,CAGlC,CAAA,EAEF,CACEnB,SAAU,YACVC,SAAU,GACVG,OAASC,GAAgB,OACvB,OAAIA,EAAAA,EAAOG,cAAPH,MAAAA,EAAoBI,cACdmB,EAAA,CAAK,KAAK,KAAK,GAAG,SAASX,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAc,EAAE,EAIpDT,MAACoC,IACC,cAAe,GACf,MAAOzC,EAAOO,UACd,QAASP,EAAOqB,QAAAA,CAAS,CAG/B,CAAA,EAEF,CACE1B,SAAU,UACVC,SAAU,GACVG,OAASC,GAAgB,OACvB,OAAIA,EAAAA,EAAOG,cAAPH,MAAAA,EAAoBI,cACdmB,EAAA,CAAK,KAAK,KAAK,GAAG,SAASX,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAc,EAAE,EAIpDT,MAACoC,IACC,cAAe,GACf,MAAOzC,EAAOgC,QACd,QAAShC,EAAOqB,QAAAA,CAAS,CAG/B,CAAA,EAEF,CACE1B,SAAU,OAAA,EAEZ+C,GAAW,CACT/C,SAAU,MAAA,CACX,CAAC,EAEH,CAACJ,EAAMiB,aAAa,CAAC,EAElB,CAACmC,EAAgBC,CAAiB,EAAIC,EAAAA,SAAiB,CAAC,EAExD,CAACC,EAAsBC,CAAuB,EAAIF,EAAAA,SAAc,IAAI,EAEpE,CAACG,EAAaC,CAAc,EAAIJ,EAAAA,SAAS,CAAA,CAAE,EAE3CK,EAAmBC,GAA4B,CACnDrE,QAAAA,EACAG,WAAAA,EACAmE,OAAQ,EAAA,CACT,EAEKC,EAAUC,EAAsB,CACpCC,IAAKC,EAAaC,sBAClB9C,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtB4C,OAAQR,EACRF,YAAa,CACX,GAAGA,EACH7B,oBAAqBnC,CAAAA,EAEvB2E,cAAe5E,EACfQ,MAAAA,CAAAA,CACD,EAEKqE,EAAiBT,GAA4B,CACjDrE,QAAAA,EACAG,WAAAA,EACAmE,OAAQ,EAAA,CACT,EAEKS,EAAWC,GAAoB,CACnCP,IAAKC,EAAaC,sBAClBhD,GAAIkC,EACJhC,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvB4C,OAAQE,EACRD,cAAe5E,EACfQ,MAAAA,CAAAA,CACD,EAEKwE,EAAaC,GAAsB,CACvCT,IAAKC,EAAaC,sBAClBhD,GAAIkC,EACJhC,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzB6C,cAAe5E,EACfQ,MAAAA,CAAAA,CACD,EAEK0E,EAAuBC,GAAmC,CAC9DC,OAAQxB,EACR7D,QAAAA,CAAAA,CACD,EAEKsF,EAAoBd,EAAsB,CAC9CC,IAAKC,EAAaa,6BAClB5D,GAAI3B,EACJ6B,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAyB,EAChCwD,eAAgBxB,EACdzC,MAACkE,GAAA,CAAM,WAAU,GAAC,EAAE,KAClB,SAAAlE,EAAAA,IAACmE,GAAA,CAAW,SAAU1B,CAAAA,CAAqB,EAC7C,EACE2B,OACJzB,YAAAA,EACAU,OAAQO,EACR1E,MAAAA,CAAAA,CACD,EAEKmF,EAAmBC,GAAoB,CAC3CvB,OAAQ,GACRwB,QAAS,qCAAA,CACV,EAEKC,EAAgBvB,EAAsB,CAC1CC,IAAKC,EAAasB,iBAClBnE,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAoB,EAC3B8D,QAAS,sCACTlB,OAAQgB,EACR1B,YAAAA,EACA+B,OAAQ,GACRC,UAAWC,EAAUC,KAAAA,CACtB,EAEK,CAACC,EAAeC,CAAgB,EAAIvC,EAAAA,SAAgB,CAAA,CAAE,EAEtDwC,EAAgBC,GAA4B,CAChDxG,QAAAA,EACAyG,UAAWJ,EACXxB,cAAeA,IAAM,CACnBpE,EAAMiG,aAAAA,EACNjG,EAAMkG,qBAAAA,CACR,CAAA,CACD,EAEK,CAACC,EAAcC,CAAe,EAAI9C,EAAAA,SAAgB,CAAA,CAAE,EAEpD+C,EAAmBC,GAAiB,CACxCC,MAAOJ,CAAAA,CACR,EAEKK,EAA8BrG,EAAAA,QAAQ,IACnC,CACL,CACEsG,KAAM,YACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAW,EAClBoF,YAAWtF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAsC,CAAC,EAEtD,CACEkF,KAAM,YACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAW,EAClBoF,YAAWtF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgC,CAAC,CAC/C,EAEF,CAAA,CAAE,EAECqF,GAAezG,EAAAA,QAAQ,IACpB,CACLW,EAAAA,IAAC+F,GAAA,CAEC,QAAQxF,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAe,EACxB,QAAS,IAAM,CACbmC,EAAe,CACboD,MAAOvH,CAAAA,CACR,EACDuE,EAAQiD,KAAAA,CACV,EACA,OAAQ,CAACpH,GAAY,CAACG,EAAKkH,WAAWC,EAAUC,WAAW,CAAA,EARvD,eAQyD,EAE/DpG,EAAAA,IAACqG,IAEC,OAAQ,CAACrH,EAAKkH,WAAWC,EAAUG,cAAc,EACjD,SAAU,CAACpH,EAAMqH,mBACjB,QAAQhG,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAa,EACtB,KAAMT,EAAAA,IAACwG,GAAA,CAAA,CAAgB,EACvB,MAAM,OACN,QAAS,IAAM,CACblB,EAAgBpG,EAAMuH,gBAAgBC,IAAKC,GAAMA,EAAE7G,WAAW,CAAC,EAC/DyF,EAAiBqB,WAAAA,CACnB,GATI,aASF,EAEJ5G,EAAAA,IAACqG,GAAA,CAEC,QAAQ9F,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAgB,EACzB,KAAMT,EAAAA,IAAC6G,GAAA,CAAA,CAAc,EACrB,SAAU,CAAC3H,EAAMqH,mBACjB,MAAM,QACN,QAAS,IAAM,CACbxB,EACE7F,EAAMuH,gBAAgBK,OAAQH,GAAMA,EAAEzG,UAAYyG,EAAE3F,QAAQ,CAC9D,EACAgE,EAAciB,KAAAA,CAChB,CAAA,EAVI,iBAWJ,EAEH,CAACjH,EAAMP,EAASS,EAAMqH,mBAAoBrH,EAAMuH,eAAe,CAAC,EAE7DM,GAAaC,cAChBrH,GAA6B,aAC5B,MAAMO,IAAaP,GAAAA,YAAAA,EAAQO,YAAa,KAAMP,GAAAA,YAAAA,EAAQqB,WAAY,GAC5DjB,IAAUJ,EAAAA,GAAAA,YAAAA,EAAQG,cAARH,YAAAA,EAAqBI,UAAW,GAEhD,MAAO,CACLkH,GAAc,CACZ3G,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAW,EAClBkE,UAAWC,EAAUsC,KACrBC,QAASxH,EAAOuH,KAChBpI,SAAAA,EACAsI,OAAQ,CAACpI,EAAKqI,YAAYlB,EAAUe,IAAI,CAAA,CACzC,EACD,CACEE,OACElH,GACAH,GACA,CAAClB,GACD,CAACG,EAAKsI,cAAcnB,EAAUC,WAAW,EAC3C9F,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvB8G,WAAOC,GAAA,EAAoB,EAC3B5F,MAAO,QACP6F,QAASA,IAAM,CACb1C,EAAiB,CAACpF,CAAM,CAAC,EACzBqF,EAAciB,KAAAA,CAChB,CAAA,EAEF,CACEmB,OACE,GAACzH,EAAAA,GAAAA,YAAAA,EAAQG,cAARH,MAAAA,EAAqB+H,YACtBxH,GACAH,GACA,CAAClB,GACD,CAACG,EAAKsI,cAAcnB,EAAUC,WAAW,EAC3C9F,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzB8G,WAAOI,GAAA,EAAQ,EACf/F,MAAO,QACP6F,QAASA,IAAM,CACblF,EAAkB5C,EAAOS,EAAE,EAC3BsC,GAAwB/C,GAAAA,YAAAA,EAAQG,cAAe,IAAI,EACnD8C,EAAe,CACb5B,SAAUrB,EAAOqB,SAAWrB,EAAOO,SAAAA,CACpC,EACD6D,EAAkBkC,KAAAA,CACpB,CAAA,EAEF,CACEmB,OACElH,GACAH,GACA,CAACf,EAAKkH,WAAWC,EAAUtB,KAAK,GAChC,GAAClF,EAAAA,GAAAA,YAAAA,EAAQG,cAARH,MAAAA,EAAqBiI,UACxBtH,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpB8G,WAAOM,GAAA,EAAS,EAChBjG,MAAO,OACP6F,QAASA,IAAM,CACb7E,EAAe,CACbsE,KAAMvH,EAAOuH,KACblG,WAAWrB,GAAAA,YAAAA,EAAQqB,WAAY,KAAMrB,GAAAA,YAAAA,EAAQO,YAAa,GAC1DkG,YAAa3H,CAAAA,CACd,EACD+F,EAAcyB,KAAAA,CAChB,CAAA,EAEF,CACEmB,OACElH,GACAH,GACA,CAACf,EAAKkH,WAAWC,EAAUG,cAAc,GACzC,GAAC3G,EAAAA,GAAAA,YAAAA,EAAQG,cAARH,MAAAA,EAAqBmI,cACxBxH,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpB8G,WAAOf,GAAA,EAAgB,EACvB5E,MAAO,OACP6F,QAASA,IAAM,CACbnC,EAAgB,CAAC3F,EAAOG,WAAW,CAAC,EACpCyF,EAAiBqB,WAAAA,CACnB,CAAA,EAEFmB,GAAc,CACZX,OAAQ,CAACvI,GAAY,CAACG,EAAKsI,cAAcnB,EAAUC,WAAW,EAC9DqB,QAASA,IAAM,CACblF,EAAkB5C,EAAOS,EAAE,EAC3BoD,EAASyC,KAAAA,CACX,CAAA,CACD,EACD+B,GAAmB,CACjBZ,OAAQ,CAACvI,GAAY,CAACG,EAAKkH,WAAWC,EAAUC,WAAW,EAC3DqB,QAASA,IAAM,CACb7E,EAAejD,CAAM,EACrBqD,EAAQiD,KAAAA,CACV,CAAA,CACD,EACDgC,GAAgB,CACdb,OAAQ,CAACvI,GAAY,CAACG,EAAKkJ,cAAc/B,EAAUC,WAAW,EAC9DqB,QAASA,IAAM,CACblF,EAAkB5C,EAAOS,EAAE,EAC3BsD,EAAWuC,KAAAA,CACb,CAAA,CACD,CAAC,CAEN,EACA,CAACnH,EAAUE,EAAMH,CAAQ,CAC3B,EAGMsJ,GAAgD9I,EAAAA,QAAQ,KACrD,CACL+I,cAAe,GACfC,WAAYA,CAAC,CAAE1I,OAAAA,CAAAA,IAA8B,OAC3C,OAAIA,EAAAA,GAAAA,YAAAA,EAAQG,cAARH,MAAAA,EAAqBI,QAChB,GAEFb,EAAMiB,cAAcR,EAAOS,EAAE,GAAKT,EAAOO,UAAY,CAC9D,EACAoI,QAASA,CAAC,CAAE3I,OAAAA,CAAAA,IAERK,MAACuI,IACC,cAAe,GACf,aAAc,GACd,QAAA9J,EACA,WAAYkB,EAAOS,GACnB,OAAQT,EAAOuH,KACf,UAAW,GACX,YAAatC,EAAU4D,UACvB,WAAY,OACZ,WAAU,EAAA,CAAA,CAGhB,GAED,CAAC/J,EAASS,EAAMiB,aAAa,CAAC,EAEjC,OACEP,EAAAA,KAAA6I,WAAA,CACGjF,SAAAA,CAAAA,EAASkF,MACThF,EAAWgF,MACX1F,EAAQ0F,MACRlE,EAAckE,MACd3E,EAAkB2E,MAClB1D,EAAc0D,MACdnD,EAAiBoD,OAClB3I,EAAAA,IAAC4I,GAAA,CACC,IAAKC,EAAO1F,EAAaC,qBAAqB,EAC9C,WAAYlE,EACZ,QAASE,EACT,MAAO,CACL0J,gBAAiB,GACjBC,eAAgB,GAChBC,OAAQ,CACNhD,MAAOvH,EACPqB,YAAa,EAAA,EAEfiH,WAAAA,GACAjB,aAAAA,GACAJ,aAAAA,EACAyC,aAAAA,EAAAA,CACF,CAAE,CAAA,EAEN,CAEJ,CClgBA,SAAwBc,GAAwB,CAC9CxK,QAAAA,CAGD,EAAG,CACF,MAAMO,EAAOC,GAAAA,EACPH,EAAWC,GAAAA,EACXG,EAAQC,GAAS,sBAAsB,EAEvC,CAAC+J,EAAkBC,CAAmB,EAAI3G,EAAAA,SAAc,CAAA,CAAE,EAE1D4G,EAAoBC,GAA4B,EAAE,EAElDC,EAAqBD,GAA4B,EAAE,EAEnDE,EAAyBC,GAAoC,EAAE,EAE/DC,EAAcxG,EAAsB,CACxCC,IAAKC,EAAauG,0BAClBrG,OAAQ+F,EACR9I,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxBvB,MAAAA,EACAyD,YAAa,CACXqD,MAAOvH,CAAAA,CACT,CACD,EAEKkL,EAAiBhG,GAAsB,CAC3CT,IAAKC,EAAauG,0BAClBtJ,GAAI8I,EAAiB9I,GACrBE,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxBvB,MAAAA,CAAAA,CACD,EAEK0K,EAAenG,GAAoB,CACvCP,IAAKC,EAAauG,0BAClBtJ,GAAI8I,EAAiB9I,GACrBiD,OAAQiG,EACRhJ,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtBvB,MAAAA,CAAAA,CACD,EAEK2K,EAAmB5G,EAAsB,CAC7CC,IAAKC,EAAa2G,8BAClB1J,GAAI8I,EAAiB9I,GACrBiD,OAAQkG,EACRjJ,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EAC1BvB,MAAAA,EACA6K,MAAO,kBACPpH,YAAa,CACX,GAAGuG,EACHc,cAAeC,KAAQC,OAAO,YAAY,CAAA,CAC5C,CACD,EAEK9K,EAA8BC,EAAAA,QAAQ,IACnC,CACL,CACEC,SAAU,YACVgB,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAoB,EAC3BjB,WAAY,GACZD,SAAU,EAAA,EAEZ,CACED,SAAU,kBACVC,SAAU,GACVC,WAAY,GACZc,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAO,CAAC,EAEjB,CACEnB,SAAU,UACVgB,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAS,EAChBjB,WAAY,GACZD,SAAU,GACVG,OAASC,GAAgBK,MAACmK,IAAY,MAAO,CAAC,CAACxK,EAAOqK,aAAAA,CAAc,CAAA,EAEtE/I,EAAW,CACT3B,SAAU,gBACVgB,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,CAAC,CACxB,EACDQ,EAAW,CACT3B,SAAU,gBACVgB,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,CAAC,CACxB,EACD,CACEnB,SAAU,iBAAA,EAEZ,CACEA,SAAU,gBAAA,EAEZ+C,GAAW,CACT/C,SAAU,MAAA,CACX,CAAC,EAEH,CAAA,CAAE,EAECyH,EAAaC,cAChBrH,GAA6B,CAC5B,MAAMgC,EAAmB,CAAC,CAAChC,EAAOqK,cAElC,MAAO,CACL/C,GAAc,CACZ3G,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtBkE,UAAWC,EAAUwF,mBACrBjD,QAASxH,EAAOS,GAChBtB,SAAAA,CAAAA,CACD,EACD,CACEsI,OAAQzF,GAAW,CAAC3C,EAAKsI,cAAcnB,EAAUC,WAAW,EAC5D9F,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EAC1BmB,MAAO,QACP2F,WAAO8C,GAAA,EAAiB,EACxB5C,QAASA,IAAM,CACb0B,EAAoBxJ,CAAM,EAC1BkK,EAAiB5D,KAAAA,CACnB,CAAA,EAEF8B,GAAc,CACZX,OAAQ,CAACpI,EAAKsI,cAAcnB,EAAUC,WAAW,EACjDkE,QAAO/J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACxBgH,QAASA,IAAM,CACb0B,EAAoBxJ,CAAM,EAC1BiK,EAAa3D,KAAAA,CACf,CAAA,CACD,EACDsE,GAAgB,CACdnD,OAAQzF,GAAW,CAAC3C,EAAKkJ,cAAc/B,EAAUC,WAAW,EAC5DkE,QAAO/J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EAC1BgH,QAASA,IAAM,CACb0B,EAAoBxJ,CAAM,EAC1BgK,EAAe1D,KAAAA,CACjB,CAAA,CACD,CAAC,CAEN,EACA,CAACjH,CAAI,CACP,EAEM8G,EAAezG,EAAAA,QAAQ,IACpB,CACLW,EAAAA,IAAC+F,GAAA,CAEC,QAAQxF,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAc,EACvB,OAAQ,CAACzB,EAAKkH,WAAWC,EAAUC,WAAW,EAC9C,QAAS,IAAM,CACbqD,EAAYxD,KAAAA,CACd,CAAA,EALI,eAMJ,EAEH,CAACjH,CAAI,CAAC,EAEH0G,EAA8BrG,EAAAA,QAAQ,IACnC,CACL,CACEsG,KAAM,UACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAS,EAChBoF,YAAWtF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAwC,CAAC,EAExD,CACEkF,KAAM,YACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAW,EAClBoF,YAAWtF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAA0C,CAAC,CACzD,EAEF,CAAA,CAAE,EAEL,OACEb,EAAAA,KAAA6I,WAAA,CACGgB,SAAAA,CAAAA,EAAYf,MACZkB,EAAalB,MACbiB,EAAejB,MACfmB,EAAiBnB,MAClB1I,EAAAA,IAAC4I,GAAA,CACC,IAAKC,EAAO1F,EAAauG,yBAAyB,EAClD,WAAYxK,EACZ,QAASE,EACT,MAAO,CACL0G,aAAAA,EACAJ,aAAAA,EACAf,UAAWC,EAAUwF,mBACrBtB,gBAAiB,GACjB0B,cAAe,GACfzD,WAAAA,EACAiC,OAAQ,CACNhD,MAAOvH,CAAAA,CACT,CACF,CAAE,CAAA,EAEN,CAEJ,CCpKA,SAAwBgM,IAAmB,OACzC,KAAM,CAAEhK,GAAAA,CAAAA,EAAOiK,GAAAA,EAET1L,EAAOC,GAAAA,EAEP0L,EAAiBC,GAAAA,EAEjB,CACJC,SAAU7E,EACV8E,cAAAA,EACAC,gBAAAA,CAAAA,EACEC,GAAY,CACdC,SAAU9H,EAAa+H,iBACvB9K,GAAIK,EACJuI,OAAQ,CACNmC,gBAAiB,EAAA,CACnB,CACD,EAEKC,EAAgB/L,EAAAA,QAAQ,IAAM,OAClC,OACE2G,EAAMqF,kBACNrF,EAAAA,EAAMmF,kBAANnF,YAAAA,EAAuBrH,WACvBgM,EAAeW,WAAW,4BAA4B,CAE1D,EAAG,CAACtF,EAAO2E,CAAc,CAAC,EAEpBY,EAAelM,EAAAA,QAAQ,IAAM,WACjC,GAAIyL,EAAcU,WAChB,aAAQC,GAAA,EAAQ,EAGlB,MAAMC,EAAqB,CACzB,CACEC,KAAM,OACNhG,KAAM,YACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAW,EAClBmL,KAAM,EAAA,EAER,CACED,KAAM,OACNhG,KAAM,qBACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAoB,EAC3BmL,KAAM,GACNrE,KAAM,YACNH,OAAQ,CAACpB,EAAM6F,kBAAAA,EAEjB,CACEF,KAAM,OACNhG,KAAM,WACN4B,KAAM,YACN3B,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAU,EACjBqL,MAAOlH,EAAUmH,OAAAA,EAEnB,CACEJ,KAAM,OACNhG,KAAM,cACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpBmL,KAAM,EAAA,EAER,CACED,KAAM,SACNhG,KAAM,SACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAQ,EACfqL,MAAOlH,EAAUoH,UAAAA,EAEnB,CACEL,KAAM,SACNhG,KAAM,oBACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtBqL,MAAOlH,EAAUoH,WACjBzE,KAAM,SACNH,OACE,CAACpB,EAAMiG,mBAAqBjG,EAAMiG,mBAAqBjG,EAAMkG,MAAAA,CAChE,EAGGC,EAAqB,CACzB,CACER,KAAM,cACNhG,KAAM,YACN4B,KAAM,WACN3B,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAsB,EAC7B2L,MAAOpG,EAAMqG,WACbC,SAAUtG,EAAMuG,gBAChBnF,OAAQ,CAACpB,EAAMqG,UAAAA,EAEjB,CACEV,KAAM,cACNhG,KAAM,YACN4B,KAAM,WACN3B,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAqB,EAC5B2L,MAAOpG,EAAMwG,gBACbF,SAAUtG,EAAMyG,0BAChBrF,OAAQ,CAACpB,EAAMwG,eAAAA,EAEjB,CACEb,KAAM,OACNhG,KAAM,WACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvBiM,gBAAiBA,IAAMtB,CAAAA,EAEzB,CACEO,KAAM,OACNhG,KAAM,cACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACnBiM,gBAAiBA,IACR9L,EAAeoF,GAAAA,YAAAA,EAAO2G,YAAa,CACxChO,SAAUyM,CAAAA,CACX,CACH,CACD,EAGGwB,EAAqB,CACzB,CACEjB,KAAM,OACNkB,SAAU,GACVlH,KAAM,OACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAM,EACbmL,KAAM,GACNxE,OAAQ,CAACpB,EAAM8G,IAAAA,EAEjB,CACEnB,KAAM,OACNhG,KAAM,sBACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAS,EAChB8G,KAAM,OACNqE,KAAM,GACNxE,OAAQ,CAACpB,EAAM+G,OAAAA,EAEjB,CACEpB,KAAM,OACNhG,KAAM,uBACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtB8G,KAAM,QACNqE,KAAM,GACNxE,OAAQ,GAACpB,EAAAA,EAAMgH,iBAANhH,MAAAA,EAAsBiH,MAAAA,EAEjC,CACEtB,KAAM,OACNhG,KAAM,uBACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtB8G,KAAM,QACNqE,KAAM,GACNxE,OAAQ,GAACpB,EAAAA,EAAMgH,iBAANhH,MAAAA,EAAsBkH,MAAAA,EAEjC,CACEvB,KAAM,OACNhG,KAAM,qBACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrB8G,KAAM,YACNqE,KAAM,GACNxE,OAAQ,CAACpB,EAAMmH,YAAAA,EAEjB,CACExB,KAAM,OACNhG,KAAM,cACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpB2M,MAAO,QACPhG,OAAQ,CAACpB,EAAMqH,WAAAA,CAChB,EAGGC,EAAqB,CACzB,CACE3B,KAAM,OACNhG,KAAM,gBACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtBmL,KAAM,GACNxE,OAAQ,CAACpB,EAAMuH,aAAAA,EAEjB,CACE5B,KAAM,OACNhG,KAAM,aACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACnB8G,KAAM,WACNqE,KAAM,GACNxE,OAAQ,CAACpB,EAAMwH,UAAAA,EAEjB,CACE7B,KAAM,OACNhG,KAAM,aACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACnB8G,KAAM,WACNH,OAAQ,CAACpB,EAAMyH,WACf7B,KAAM,EAAA,EAER,CACED,KAAM,OACNhG,KAAM,cACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpB2G,OAAQ,CAACpB,EAAM0H,YACf9B,KAAM,EAAA,EAER,CACED,KAAM,OACNhG,KAAM,gBACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxB2G,OAAQ,CAACpB,EAAMgE,cACf4B,KAAM,EAAA,CACP,EAGH,cACG+B,GAAA,CACC,SAAA,CAAA/N,EAAAA,KAACgO,GAAA,CAAK,KAAI,GACR,SAAA,CAAA5N,EAAAA,IAAC6N,GAAA,CACC,QAAS1H,EAAUG,eACnB,QAASnD,EAAa2K,aACtB,KAAK9H,EAAAA,EAAMmF,kBAANnF,YAAAA,EAAuB+H,MAC5B,GAAI/H,EAAMgI,SAAS,EAErBhO,EAAAA,IAAC4N,GAAK,IAAL,CAAS,KAAM,CAAEK,KAAM,GAAIC,GAAI,CAAA,EAC9B,SAAAlO,EAAAA,IAACmO,EAAA,CAAa,OAAQzC,EAAI,KAAM1F,EAAM,CAAA,CACxC,CAAA,EACF,EACAhG,EAAAA,IAACmO,EAAA,CAAa,OAAQhC,EAAI,KAAMnG,EAAM,EACtChG,EAAAA,IAACmO,EAAA,CAAa,OAAQvB,EAAI,KAAM5G,EAAM,EACtChG,EAAAA,IAACmO,EAAA,CAAa,OAAQb,EAAI,KAAMtH,CAAAA,CAAM,CAAA,EACxC,CAEJ,EAAG,CAACA,EAAOoF,EAAeN,CAAa,CAAC,EAElCsD,EAAWC,GAAe,CAAE1J,UAAWC,EAAUoH,UAAAA,CAAY,EAE7DsC,EAAmBC,GAAoB,EAAE,EAEzCC,EAAiB/K,GAAoB,CACzCP,IAAKC,EAAa+H,iBAClB9K,GAAI4F,EAAM5F,GACVE,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzB4C,OAAQiL,EACRhL,cAAeA,IAAM,CACnByH,EAAAA,CACF,CAAA,CACD,EAEK0D,EAAuBF,GAAoB,CAC/CG,iBAAkB1I,EAAM5F,EAAAA,CACzB,EAEKuO,EAAiCtP,EAAAA,QAAQ,IAAM,CACnD,MAAMuP,EAAO,CAAE,GAAG5I,CAAAA,EAIlB,cAAO4I,EAAKC,UACLD,CACT,EAAG,CAAC5I,CAAK,CAAC,EAEJ8I,EAAsB7L,EAAsB,CAChDC,IAAKC,EAAa+H,iBAClB5K,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxB4C,OAAQoL,EACR9L,YAAagM,EACbjK,OAAQ,GACRC,UAAWC,EAAUoH,UAAAA,CACtB,EAEK+C,EAA2B1P,EAAAA,QAAQ,IAChC,CACL,CACEsG,KAAM,SACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EACtB8G,WAAOyH,GAAA,EAAc,EACrB1G,QAASiD,CAAAA,EAEX,CACE5F,KAAM,aACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACnB8G,WAAO0H,GAAA,EAAQ,EACf3G,eACG4G,EAAA,CACC,SAAU,GACV,aAAc,CAAC,aAAc,aAAa,EAE1C,SAAA,CAAAtP,EAAAA,KAACsP,EAAU,KAAV,CAAe,MAAM,aACpB,SAAA,CAAAlP,EAAAA,IAACkP,EAAU,QAAV,CACC,eAACC,GAAA,CAAY,KAAK,KAAK5O,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAY,EAAE,CAAA,CACxC,EACAT,EAAAA,IAACkP,EAAU,MAAV,CACC,SAAAlP,EAAAA,IAACxB,IACC,QAASwH,EAAM5F,GACf,mBAAoB2K,EACpB,SAAUK,EACV,WAAYpF,EAAMgI,SAClB,SACEhI,EAAMkG,QAAUkC,EAASgB,UACzBpJ,EAAMkG,QAAUkC,EAASiB,SAAAA,CAC1B,CAAA,CAEL,CAAA,CAAA,EAfqC,WAgBvC,EACAzP,EAAAA,KAACsP,EAAU,KAAV,CAAe,MAAM,cACpB,SAAA,CAAAlP,EAAAA,IAACkP,EAAU,QAAV,CACC,eAACC,GAAA,CAAY,KAAK,KAAK5O,SAAAA,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAkB,EAAE,CAAA,CAC9C,QACCyO,EAAU,MAAV,CACC,SAAAlP,EAAAA,IAACsP,GAAA,CACC,SAAUnM,EAAaoM,4BACvB,QAASvJ,EAAM5F,GACf,mBAAoB2K,EACpB,SAAUK,EACV,KAAMjF,EAAUC,YAAY,CAAA,CAEhC,CAAA,CAAA,EAZsC,YAaxC,CAAA,CAAA,CACF,CAAA,EAGJ,CACET,KAAM,YACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAW,EAClB8G,WAAO8C,GAAA,EAAiB,EACxB/B,QAAStI,EAAAA,IAACiJ,GAAA,CAAwB,QAASjD,EAAM5F,EAAAA,CAAG,CAAA,EAEtD,CACEuF,KAAM,cACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxB8G,WAAOiI,GAAA,EAAY,EACnBlH,QACEtI,EAAAA,IAACuI,GAAA,CACC,QAASvC,EAAM5F,GACf,aAAY,GACZ,UAAS,GACT,WAAW,OACX,YAAawE,EAAU4D,SAAAA,CAAU,CAAA,EAIvC,CACE7C,KAAM,eACNC,MAAKrF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrB8G,WAAOM,GAAA,EAAS,EAChBT,OAAQ,CAACpI,EAAKqI,YAAYlB,EAAUtB,KAAK,EACzCyD,QAAStC,GAAAA,MAAAA,EAAO5F,GACdJ,EAAAA,IAACyP,GAAA,CAAgB,aAAczJ,EAAM5F,EAAAA,CAAG,EAExCJ,EAAAA,IAACyL,GAAA,CAAA,CAAQ,CAAA,EAGbiE,GAAgB,CACdC,WAAY/K,EAAUoH,WACtB4D,SAAU5J,EAAM5F,EAAAA,CACjB,EACDyP,GAAW,CACTF,WAAY/K,EAAUoH,WACtB4D,SAAU5J,EAAM5F,EAAAA,CACjB,CAAC,EAEH,CAAC4F,EAAOvF,EAAIzB,EAAMoP,EAAUpP,CAAI,CAAC,EAE9B8Q,EAAa7M,EAAsB,CACvCC,IAAK2F,EAAO1F,EAAa4M,kBAAmB/J,EAAM5F,EAAE,EACpDE,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EAC1B6C,cAAeyH,EACfiF,eAAczP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EAClCwP,eAAc1P,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,CAAC,CAChC,EAEKyP,EAAcjN,EAAsB,CACxCC,IAAK2F,EAAO1F,EAAagN,mBAAoBnK,EAAM5F,EAAE,EACrDE,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAoB,EAC3B6C,cAAeyH,EACfiF,eAAczP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAmB,EACnCwP,eAAc1P,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,CAAC,CACnC,EAEK2P,EAAYnN,EAAsB,CACtCC,IAAK2F,EAAO1F,EAAakN,iBAAkBrK,EAAM5F,EAAE,EACnDE,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzB6C,cAAeyH,EACfiF,eAAczP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAA0B,EAC1CwP,eAAc1P,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAsB,CAAC,CACxC,EAEK6P,EAAYrN,EAAsB,CACtCC,IAAK2F,EAAO1F,EAAaoN,qBAAsBvK,EAAM5F,EAAE,EACvDE,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EACzB6C,cAAeyH,EACfiF,eAAczP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAkB,EAClCwP,eAAc1P,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAe,EAC/B4C,OAAQ,CACNmN,kBAAmB,CAAA,CAAC,CACtB,CACD,EAEKC,EAAgBxN,EAAsB,CAC1CC,IAAK2F,EAAO1F,EAAaoN,qBAAsBvK,EAAM5F,EAAE,EACvDE,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAsB,EAC7B6C,cAAeyH,EACfiF,eAAczP,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAA6B,EAC7CwP,eAAc1P,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACjC4C,OAAQ,CACNmN,kBAAmB,CAAA,CAAC,CACtB,CACD,EAEKE,EAAYrR,EAAAA,QAAQ,IAAM,CAC9B,MAAMsR,EAAmB3R,EAAKsI,cAAcnB,EAAUC,WAAW,EAE3DwK,EACJD,IACC3K,EAAMkG,QAAUkC,EAASyC,SAAW7K,EAAMkG,QAAUkC,EAAS0C,SAE1DC,EACJJ,IACC3K,EAAMkG,QAAUkC,EAASyC,SACxB7K,EAAMkG,QAAUkC,EAAS0C,SACzB9K,EAAMkG,QAAUkC,EAAS4C,aAEvBC,EACJN,IACC3K,EAAMkG,QAAUkC,EAASyC,SACxB7K,EAAMkG,QAAUkC,EAAS4C,aAEvBE,EAAevG,EAAewG,MAAM,0BAA0B,EAE9DC,EACJ,CAACF,GAAgBP,GAAW3K,EAAMkG,QAAUkC,EAAS4C,YACjDK,EACJV,IACC3K,EAAMkG,QAAUkC,EAASkD,SACvBJ,GAAgBlL,EAAMkG,QAAUkC,EAAS4C,aAE9C,MAAO,CACLhR,EAAAA,IAACuR,EAAA,CACC,MAAMhR,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAa,EACpB,KAAK,QACL,OAAQ,CAACmQ,EACT,MAAM,OACN,QAASd,EAAW7J,IAAAA,CAAK,EAE3BjG,EAAAA,IAACuR,EAAA,CACC,MAAMhR,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAY,EACnB,KAAK,UACL,OAAQ,CAAC2Q,EACT,MAAM,OACN,QAASd,EAAUrK,IAAAA,CAAK,EAE1BjG,EAAAA,IAACuR,EAAA,CACC,MAAMhR,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAgB,EACvB,KAAK,WACL,OAAQ,CAAC4Q,EACT,MAAM,QACN,QAASZ,EAAcxK,IAAAA,CAAK,EAE9BjG,EAAAA,IAACwR,GAAA,CAAY,MAAO5M,EAAUoH,WAAY,GAAIhG,EAAM5F,EAAAA,CAAG,EACvDJ,EAAAA,IAACyR,GAAA,CACC,MAAO7M,EAAUoH,WACjB,GAAIhG,EAAM5F,GACV,KAAM4F,GAAAA,YAAAA,EAAO0L,aAAa,EAE5B1R,MAAC2R,GAAA,CACC,UAAW/M,EAAUoH,WACrB,MAAO,CAAChG,EAAM5F,EAAE,EAChB,cAAa,GAAA,EAEfJ,EAAAA,IAAC4R,GAAA,CACC,QAAQrR,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAe,EACxB,QAAS,CACPoR,GAAe,CACbzK,OAAQ,CAACuJ,EACTlJ,QAAS+G,EAAevI,KACxBqE,QAAO/J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,CAAC,CACvB,EACDqR,GAAoB,CAClB1K,OAAQ,CAACpI,EAAKkH,WAAWC,EAAUC,WAAW,EAC9CqB,QAASqH,EAAoB7I,KAC7BqE,QAAO/J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,CAAC,CAC5B,EACDsR,GAAe,CACbzH,QAAO/J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EACrB2G,OAAQ,CAAC6J,EACTxJ,QAAS2I,EAAUnK,IAAAA,CACpB,EACD+L,GAAiB,CACf1H,QAAO/J,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACvB2G,OAAQ,CAAC2J,EACTtJ,QAASyI,EAAYjK,IAAAA,CACtB,CAAC,CAAA,CACF,CACF,CAEN,EAAG,CAACjH,EAAMgH,EAAOoI,EAAUzD,CAAc,CAAC,EAEpCsH,EAA2B5S,EAAAA,QAAQ,IAChCyL,EAAcoH,UACjB,CAAA,EACA,CACElS,EAAAA,IAACmS,GAAA,CACC,OAAQnM,EAAMiG,kBACd,KAAMrH,EAAUoH,WAChB,QAAS,CAAEoG,KAAM,IAAA,GACZpM,EAAM5F,EAAG,CACd,EAEP,CAAC4F,EAAO8E,CAAa,CAAC,EAEnBuH,EAAmBhT,EAAAA,QAAQ,IAAM,OACrC,IAAIiT,IAAItM,EAAAA,EAAMmF,kBAANnF,YAAAA,EAAuBL,OAAQ,GAEvC,OAAIK,EAAM6F,qBACRyG,GAAK,KAAKtM,EAAM6F,kBAAkB,KAG7ByG,CACT,EAAG,CAACtM,CAAK,CAAC,EAEV,OACEpG,EAAAA,KAAA6I,WAAA,CACGqH,SAAAA,CAAAA,EAAWpH,MACXwH,EAAYxH,MACZ0H,EAAU1H,MACV4H,EAAU5H,MACV+H,EAAc/H,MACd8F,EAAe9F,MACfoG,EAAoBpG,MACrB1I,EAAAA,IAACuS,GAAA,CACC,MAAOzH,EACP,aAAc3E,EAAUC,YAExB,SAAAxG,EAAAA,KAAC4S,GAAA,CAAM,IAAI,KACT,SAAA,CAAAxS,EAAAA,IAACyS,GAAA,CACC,MAAO,GAAAlS,EAAAC,EAAG,CAAAC,GAAA,QAAA,CAAa,MAAMuF,EAAM6I,SAAS,GAC5C,SAAAwD,EACA,UAAUrM,EAAAA,EAAMmF,kBAANnF,YAAAA,EAAuB+H,MACjC,OAAQkE,EACR,QAASvB,EACT,YAAa,CAAC,CAAE/K,KAAIpF,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAO,EAAGyC,IAAK,SAAA,CAAW,EAChD,UAAW,CACT,CAAEyC,KAAMK,EAAM6I,UAAW3L,IAAK,sBAAsB8C,EAAM5F,EAAE,EAAA,CAAI,EAElE,WAAYoO,EAAevI,KAC3B,YAAajH,EAAK0T,oBAAoB9N,EAAUoH,UAAU,EAAE,EAE9DhM,EAAAA,IAAC2S,GAAA,CACC,QAAQ,aACR,OAAQ5D,EACR,MAAOnK,EAAUoH,WACjB,eAAgBjB,EAChB,SAAU/E,EACV,GAAIA,EAAM5F,EAAAA,CAAG,CAAA,CAAA,CAEjB,CAAA,CACF,CAAA,EACF,CAEJ"}