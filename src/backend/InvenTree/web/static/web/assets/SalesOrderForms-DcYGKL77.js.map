{"version":3,"file":"SalesOrderForms-DcYGKL77.js","sources":["../../../../../../frontend/src/forms/SalesOrderForms.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Table } from '@mantine/core';\nimport {\n  IconAddressBook,\n  IconCalendar,\n  IconUser,\n  IconUsers\n} from '@tabler/icons-react';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport RemoveRowButton from '../components/buttons/RemoveRowButton';\nimport { StandaloneField } from '../components/forms/StandaloneField';\n\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport { apiUrl } from '@lib/functions/Api';\nimport type {\n  ApiFormAdjustFilterType,\n  ApiFormFieldSet,\n  ApiFormFieldType\n} from '@lib/types/Forms';\nimport type { TableFieldRowProps } from '../components/forms/fields/TableField';\nimport { useCreateApiFormModal } from '../hooks/UseForm';\nimport { useGlobalSettingsState } from '../states/SettingsStates';\nimport { RenderPartColumn } from '../tables/ColumnRenderers';\n\nexport function useSalesOrderFields({\n  duplicateOrderId\n}: {\n  duplicateOrderId?: number;\n}): ApiFormFieldSet {\n  const globalSettings = useGlobalSettingsState();\n\n  return useMemo(() => {\n    const fields: ApiFormFieldSet = {\n      reference: {},\n      description: {},\n      customer: {\n        disabled: duplicateOrderId != undefined,\n        filters: {\n          is_customer: true,\n          active: true\n        }\n      },\n      customer_reference: {},\n      project_code: {},\n      order_currency: {},\n      start_date: {\n        icon: <IconCalendar />\n      },\n      target_date: {\n        icon: <IconCalendar />\n      },\n      link: {},\n      contact: {\n        icon: <IconUser />,\n        adjustFilters: (value: ApiFormAdjustFilterType) => {\n          return {\n            ...value.filters,\n            company: value.data.customer\n          };\n        }\n      },\n      address: {\n        icon: <IconAddressBook />,\n        adjustFilters: (value: ApiFormAdjustFilterType) => {\n          return {\n            ...value.filters,\n            company: value.data.customer\n          };\n        }\n      },\n      responsible: {\n        icon: <IconUsers />\n      }\n    };\n\n    // Order duplication fields\n    if (!!duplicateOrderId) {\n      fields.duplicate = {\n        children: {\n          order_id: {\n            hidden: true,\n            value: duplicateOrderId\n          },\n          copy_lines: {},\n          copy_extra_lines: {}\n        }\n      };\n    }\n\n    if (!globalSettings.isSet('PROJECT_CODES_ENABLED', true)) {\n      delete fields.project_code;\n    }\n\n    return fields;\n  }, [duplicateOrderId, globalSettings]);\n}\n\nexport function useSalesOrderLineItemFields({\n  customerId,\n  orderId,\n  create\n}: {\n  customerId?: number;\n  orderId?: number;\n  create?: boolean;\n}): ApiFormFieldSet {\n  const fields = useMemo(() => {\n    return {\n      order: {\n        filters: {\n          customer_detail: true\n        },\n        disabled: true,\n        value: create ? orderId : undefined\n      },\n      part: {\n        filters: {\n          active: true,\n          salable: true\n        }\n      },\n      reference: {},\n      quantity: {},\n      sale_price: {},\n      sale_price_currency: {},\n      target_date: {},\n      notes: {},\n      link: {}\n    };\n  }, []);\n\n  return fields;\n}\n\nfunction SalesOrderAllocateLineRow({\n  props,\n  record,\n  sourceLocation\n}: Readonly<{\n  props: TableFieldRowProps;\n  record: any;\n  sourceLocation?: number | null;\n}>) {\n  // Statically defined field for selecting the stock item\n  const stockItemField: ApiFormFieldType = useMemo(() => {\n    return {\n      field_type: 'related field',\n      api_url: apiUrl(ApiEndpoints.stock_item_list),\n      model: ModelType.stockitem,\n      filters: {\n        available: true,\n        part_detail: true,\n        location_detail: true,\n        location: sourceLocation,\n        cascade: sourceLocation ? true : undefined,\n        part: record.part\n      },\n      value: props.item.stock_item,\n      name: 'stock_item',\n      onValueChange: (value: any, instance: any) => {\n        props.changeFn(props.idx, 'stock_item', value);\n\n        // Update the allocated quantity based on the selected stock item\n        if (instance) {\n          const available = instance.quantity - instance.allocated;\n          const required = record.quantity - record.allocated;\n\n          let quantity = props.item?.quantity ?? 0;\n\n          quantity = Math.max(quantity, required);\n          quantity = Math.min(quantity, available);\n\n          if (quantity != props.item.quantity) {\n            props.changeFn(props.idx, 'quantity', quantity);\n          }\n        }\n      }\n    };\n  }, [sourceLocation, record, props]);\n\n  // Statically defined field for selecting the allocation quantity\n  const quantityField: ApiFormFieldType = useMemo(() => {\n    return {\n      field_type: 'number',\n      name: 'quantity',\n      required: true,\n      value: props.item.quantity,\n      onValueChange: (value: any) => {\n        props.changeFn(props.idx, 'quantity', value);\n      }\n    };\n  }, [props]);\n\n  return (\n    <Table.Tr key={`table-row-${props.idx}-${record.pk}`}>\n      <Table.Td>\n        <RenderPartColumn part={record.part_detail} />\n      </Table.Td>\n      <Table.Td>\n        <ProgressBar\n          value={record.allocated}\n          maximum={record.quantity}\n          progressLabel\n        />\n      </Table.Td>\n      <Table.Td>\n        <StandaloneField\n          fieldName='stock_item'\n          fieldDefinition={stockItemField}\n          error={props.rowErrors?.stock_item?.message}\n        />\n      </Table.Td>\n      <Table.Td>\n        <StandaloneField\n          fieldName='quantity'\n          fieldDefinition={quantityField}\n          error={props.rowErrors?.quantity?.message}\n        />\n      </Table.Td>\n      <Table.Td>\n        <RemoveRowButton onClick={() => props.removeFn(props.idx)} />\n      </Table.Td>\n    </Table.Tr>\n  );\n}\n\nexport function useAllocateToSalesOrderForm({\n  orderId,\n  shipmentId,\n  lineItems,\n  onFormSuccess\n}: {\n  orderId: number;\n  shipmentId?: number;\n  lineItems: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const [sourceLocation, setSourceLocation] = useState<number | null>(null);\n\n  // Reset source location to known state\n  useEffect(() => {\n    setSourceLocation(null);\n  }, [orderId, shipmentId, lineItems]);\n\n  const fields: ApiFormFieldSet = useMemo(() => {\n    return {\n      // Non-submitted field to select the source location\n      source_location: {\n        exclude: true,\n        required: false,\n        field_type: 'related field',\n        api_url: apiUrl(ApiEndpoints.stock_location_list),\n        model: ModelType.stocklocation,\n        label: t`Source Location`,\n        description: t`Select the source location for the stock allocation`,\n        onValueChange: (value: any) => {\n          setSourceLocation(value);\n        }\n      },\n      items: {\n        field_type: 'table',\n        value: [],\n        headers: [\n          { title: t`Part`, style: { minWidth: '200px' } },\n          { title: t`Allocated`, style: { minWidth: '200px' } },\n          { title: t`Stock Item`, style: { width: '100%' } },\n          { title: t`Quantity`, style: { minWidth: '200px' } },\n          { title: '', style: { width: '50px' } }\n        ],\n        modelRenderer: (row: TableFieldRowProps) => {\n          const record =\n            lineItems.find((item) => item.pk == row.item.line_item) ?? {};\n\n          return (\n            <SalesOrderAllocateLineRow\n              key={`table-row-${row.idx}-${record.pk}`}\n              props={row}\n              record={record}\n              sourceLocation={sourceLocation}\n            />\n          );\n        }\n      },\n      shipment: {\n        filters: {\n          shipped: false,\n          order_detail: true,\n          order: orderId\n        }\n      }\n    };\n  }, [orderId, shipmentId, lineItems, sourceLocation]);\n\n  return useCreateApiFormModal({\n    title: t`Allocate Stock`,\n    url: ApiEndpoints.sales_order_allocate,\n    pk: orderId,\n    fields: fields,\n    onFormSuccess: onFormSuccess,\n    successMessage: t`Stock items allocated`,\n    size: '80%',\n    initialData: {\n      items: lineItems.map((item) => {\n        return {\n          line_item: item.pk,\n          quantity: 0,\n          stock_item: null\n        };\n      })\n    }\n  });\n}\n\nexport function useSalesOrderAllocateSerialsFields({\n  itemId,\n  orderId\n}: {\n  itemId: number;\n  orderId: number;\n}): ApiFormFieldSet {\n  return useMemo(() => {\n    return {\n      line_item: {\n        value: itemId,\n        hidden: true\n      },\n      quantity: {},\n      serial_numbers: {},\n      shipment: {\n        filters: {\n          order_detail: true,\n          order: orderId,\n          shipped: false\n        }\n      }\n    };\n  }, [itemId, orderId]);\n}\n\nexport function useSalesOrderShipmentFields({\n  pending\n}: {\n  pending?: boolean;\n}): ApiFormFieldSet {\n  return useMemo(() => {\n    return {\n      order: {\n        disabled: true\n      },\n      reference: {},\n      shipment_date: {\n        hidden: pending ?? true\n      },\n      delivery_date: {\n        hidden: pending ?? true\n      },\n      tracking_number: {},\n      invoice_number: {},\n      link: {}\n    };\n  }, [pending]);\n}\n\nexport function useSalesOrderShipmentCompleteFields({\n  shipmentId\n}: {\n  shipmentId?: number;\n}): ApiFormFieldSet {\n  return useMemo(() => {\n    return {\n      shipment_date: {},\n      tracking_number: {},\n      invoice_number: {},\n      link: {}\n    };\n  }, [shipmentId]);\n}\n\nexport function useSalesOrderAllocationFields({\n  orderId,\n  shipment\n}: {\n  orderId?: number;\n  shipment: any;\n}): ApiFormFieldSet {\n  return useMemo(() => {\n    return {\n      item: {\n        // Cannot change item, but display for reference\n        disabled: true\n      },\n      quantity: {},\n      shipment: {\n        // Cannot change shipment once it has been shipped\n        disabled: !!shipment?.shipment_date,\n        // Order ID is required for this field to be accessed\n        hidden: !orderId,\n        filters: {\n          order: orderId,\n          shipped: false\n        }\n      }\n    };\n  }, [orderId, shipment]);\n}\n"],"names":["useSalesOrderFields","duplicateOrderId","globalSettings","useGlobalSettingsState","useMemo","fields","reference","description","customer","disabled","undefined","filters","is_customer","active","customer_reference","project_code","order_currency","start_date","icon","IconCalendar","target_date","link","contact","IconUser","adjustFilters","value","company","data","address","IconAddressBook","responsible","IconUsers","duplicate","children","order_id","hidden","copy_lines","copy_extra_lines","isSet","useSalesOrderLineItemFields","customerId","orderId","create","order","customer_detail","part","salable","quantity","sale_price","sale_price_currency","notes","SalesOrderAllocateLineRow","props","record","sourceLocation","stockItemField","field_type","api_url","apiUrl","ApiEndpoints","stock_item_list","model","ModelType","stockitem","available","part_detail","location_detail","location","cascade","item","stock_item","name","onValueChange","instance","changeFn","idx","allocated","required","Math","max","min","quantityField","jsxs","Table","jsx","RenderPartColumn","ProgressBar","StandaloneField","rowErrors","message","RemoveRowButton","removeFn","pk","useAllocateToSalesOrderForm","shipmentId","lineItems","onFormSuccess","setSourceLocation","useState","useEffect","source_location","exclude","stock_location_list","stocklocation","label","_i18n","_","id","items","headers","title","style","minWidth","width","modelRenderer","row","find","line_item","shipment","shipped","order_detail","useCreateApiFormModal","url","sales_order_allocate","successMessage","size","initialData","map","useSalesOrderAllocateSerialsFields","itemId","serial_numbers","useSalesOrderShipmentFields","pending","shipment_date","delivery_date","tracking_number","invoice_number","useSalesOrderShipmentCompleteFields","useSalesOrderAllocationFields"],"mappings":"yVA2BO,SAASA,EAAoB,CAClCC,iBAAAA,CAGF,EAAoB,CAClB,MAAMC,EAAiBC,EAAAA,EAEvB,OAAOC,EAAAA,QAAQ,IAAM,CACnB,MAAMC,EAA0B,CAC9BC,UAAW,CAAA,EACXC,YAAa,CAAA,EACbC,SAAU,CACRC,SAAUR,GAAoBS,KAC9BC,QAAS,CACPC,YAAa,GACbC,OAAQ,EAAA,CACV,EAEFC,mBAAoB,CAAA,EACpBC,aAAc,CAAA,EACdC,eAAgB,CAAA,EAChBC,WAAY,CACVC,WAAOC,EAAA,CAAA,CAAY,CAAA,EAErBC,YAAa,CACXF,WAAOC,EAAA,CAAA,CAAY,CAAA,EAErBE,KAAM,CAAA,EACNC,QAAS,CACPJ,WAAOK,EAAA,EAAQ,EACfC,cAAgBC,IACP,CACL,GAAGA,EAAMd,QACTe,QAASD,EAAME,KAAKnB,QAAAA,EAExB,EAEFoB,QAAS,CACPV,WAAOW,EAAA,EAAe,EACtBL,cAAgBC,IACP,CACL,GAAGA,EAAMd,QACTe,QAASD,EAAME,KAAKnB,QAAAA,EAExB,EAEFsB,YAAa,CACXZ,WAAOa,EAAA,CAAA,CAAS,CAAA,CAClB,EAIF,OAAM9B,IACJI,EAAO2B,UAAY,CACjBC,SAAU,CACRC,SAAU,CACRC,OAAQ,GACRV,MAAOxB,CAAAA,EAETmC,WAAY,CAAA,EACZC,iBAAkB,CAAA,CAAC,CACrB,GAICnC,EAAeoC,MAAM,wBAAyB,EAAI,GACrD,OAAOjC,EAAOU,aAGTV,CACT,EAAG,CAACJ,EAAkBC,CAAc,CAAC,CACvC,CAEO,SAASqC,EAA4B,CAC1CC,WAAAA,EACAC,QAAAA,EACAC,OAAAA,CAKF,EAAoB,CA0BlB,OAzBetC,EAAAA,QAAQ,KACd,CACLuC,MAAO,CACLhC,QAAS,CACPiC,gBAAiB,EAAA,EAEnBnC,SAAU,GACVgB,MAAOiB,EAASD,EAAU/B,MAAAA,EAE5BmC,KAAM,CACJlC,QAAS,CACPE,OAAQ,GACRiC,QAAS,EAAA,CACX,EAEFxC,UAAW,CAAA,EACXyC,SAAU,CAAA,EACVC,WAAY,CAAA,EACZC,oBAAqB,CAAA,EACrB7B,YAAa,CAAA,EACb8B,MAAO,CAAA,EACP7B,KAAM,CAAA,CAAC,GAER,CAAA,CAAE,CAGP,CAEA,SAAS8B,EAA0B,CACjCC,MAAAA,EACAC,OAAAA,EACAC,eAAAA,CAKD,EAAG,aAEF,MAAMC,EAAmCnD,EAAAA,QAAQ,KACxC,CACLoD,WAAY,gBACZC,QAASC,EAAOC,EAAaC,eAAe,EAC5CC,MAAOC,EAAUC,UACjBpD,QAAS,CACPqD,UAAW,GACXC,YAAa,GACbC,gBAAiB,GACjBC,SAAUb,EACVc,QAASd,EAAiB,GAAO5C,OACjCmC,KAAMQ,EAAOR,IAAAA,EAEfpB,MAAO2B,EAAMiB,KAAKC,WAClBC,KAAM,aACNC,cAAeA,CAAC/C,EAAYgD,IAAkB,OAI5C,GAHArB,EAAMsB,SAAStB,EAAMuB,IAAK,aAAclD,CAAK,EAGzCgD,EAAU,CACZ,MAAMT,EAAYS,EAAS1B,SAAW0B,EAASG,UACzCC,EAAWxB,EAAON,SAAWM,EAAOuB,UAE1C,IAAI7B,IAAWK,EAAAA,EAAMiB,OAANjB,YAAAA,EAAYL,WAAY,EAEvCA,EAAW+B,KAAKC,IAAIhC,EAAU8B,CAAQ,EACtC9B,EAAW+B,KAAKE,IAAIjC,EAAUiB,CAAS,EAEnCjB,GAAYK,EAAMiB,KAAKtB,UACzBK,EAAMsB,SAAStB,EAAMuB,IAAK,WAAY5B,CAAQ,CAElD,CACF,CAAA,GAED,CAACO,EAAgBD,EAAQD,CAAK,CAAC,EAG5B6B,EAAkC7E,EAAAA,QAAQ,KACvC,CACLoD,WAAY,SACZe,KAAM,WACNM,SAAU,GACVpD,MAAO2B,EAAMiB,KAAKtB,SAClByB,cAAgB/C,GAAe,CAC7B2B,EAAMsB,SAAStB,EAAMuB,IAAK,WAAYlD,CAAK,CAC7C,CAAA,GAED,CAAC2B,CAAK,CAAC,EAEV,OACE8B,OAACC,EAAM,GAAN,CACC,SAAA,CAAAC,EAAAA,IAACD,EAAM,GAAN,CACC,SAAAC,EAAAA,IAACC,GAAiB,KAAMhC,EAAOY,YAAY,CAAA,CAC7C,EACAmB,EAAAA,IAACD,EAAM,GAAN,CACC,eAACG,EAAA,CACC,MAAOjC,EAAOuB,UACd,QAASvB,EAAON,SAChB,cAAa,GAAA,EAEjB,EACAqC,EAAAA,IAACD,EAAM,GAAN,CACC,eAACI,EAAA,CACC,UAAU,aACV,gBAAiBhC,EACjB,OAAOH,GAAAA,EAAAA,EAAMoC,YAANpC,YAAAA,EAAiBkB,aAAjBlB,YAAAA,EAA6BqC,QAAQ,EAEhD,EACAL,EAAAA,IAACD,EAAM,GAAN,CACC,eAACI,EAAA,CACC,UAAU,WACV,gBAAiBN,EACjB,OAAO7B,GAAAA,EAAAA,EAAMoC,YAANpC,YAAAA,EAAiBL,WAAjBK,YAAAA,EAA2BqC,QAAQ,EAE9C,EACAL,EAAAA,IAACD,EAAM,GAAN,CACC,SAAAC,EAAAA,IAACM,EAAA,CAAgB,QAAS,IAAMtC,EAAMuC,SAASvC,EAAMuB,GAAG,EAAE,CAAA,CAC5D,CAAA,GA3Ba,aAAavB,EAAMuB,GAAG,IAAItB,EAAOuC,EAAE,EA4BlD,CAEJ,CAEO,SAASC,EAA4B,CAC1CpD,QAAAA,EACAqD,WAAAA,EACAC,UAAAA,EACAC,cAAAA,CAMF,EAAG,CACD,KAAM,CAAC1C,EAAgB2C,CAAiB,EAAIC,EAAAA,SAAwB,IAAI,EAGxEC,EAAAA,UAAU,IAAM,CACdF,EAAkB,IAAI,CACxB,EAAG,CAACxD,EAASqD,EAAYC,CAAS,CAAC,EAEnC,MAAM1F,EAA0BD,EAAAA,QAAQ,KAC/B,CAELgG,gBAAiB,CACfC,QAAS,GACTxB,SAAU,GACVrB,WAAY,gBACZC,QAASC,EAAOC,EAAa2C,mBAAmB,EAChDzC,MAAOC,EAAUyC,cACjBC,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAiB,EACxBpG,YAAWkG,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAqD,EAClEnC,cAAgB/C,GAAe,CAC7BwE,EAAkBxE,CAAK,CACzB,CAAA,EAEFmF,MAAO,CACLpD,WAAY,QACZ/B,MAAO,CAAA,EACPoF,QAAS,CACP,CAAEC,MAAKL,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAM,EAAGI,MAAO,CAAEC,SAAU,OAAA,CAAQ,EAC7C,CAAEF,MAAKL,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAW,EAAGI,MAAO,CAAEC,SAAU,OAAA,CAAQ,EAClD,CAAEF,MAAKL,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAY,EAAGI,MAAO,CAAEE,MAAO,MAAA,CAAO,EAC/C,CAAEH,MAAKL,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAU,EAAGI,MAAO,CAAEC,SAAU,OAAA,CAAQ,EACjD,CAAEF,MAAO,GAAIC,MAAO,CAAEE,MAAO,MAAA,CAAO,CAAG,EAEzCC,cAAgBC,GAA4B,CAC1C,MAAM9D,EACJ0C,EAAUqB,KAAM/C,GAASA,EAAKuB,IAAMuB,EAAI9C,KAAKgD,SAAS,GAAK,CAAA,EAE7D,OACEjC,EAAAA,IAACjC,EAAA,CAEC,MAAOgE,EACP,OAAA9D,EACA,eAAAC,CAAA,EAHK,aAAa6D,EAAIxC,GAAG,IAAItB,EAAOuC,EAAE,EAGP,CAGrC,CAAA,EAEF0B,SAAU,CACR3G,QAAS,CACP4G,QAAS,GACTC,aAAc,GACd7E,MAAOF,CAAAA,CACT,CACF,GAED,CAACA,EAASqD,EAAYC,EAAWzC,CAAc,CAAC,EAEnD,OAAOmE,EAAsB,CAC3BX,MAAKL,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAgB,EACvBe,IAAK/D,EAAagE,qBAClB/B,GAAInD,EACJpC,OAAAA,EACA2F,cAAAA,EACA4B,eAAcnB,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAuB,EACvCkB,KAAM,MACNC,YAAa,CACXlB,MAAOb,EAAUgC,IAAK1D,IACb,CACLgD,UAAWhD,EAAKuB,GAChB7C,SAAU,EACVuB,WAAY,IAAA,EAEf,CAAA,CACH,CACD,CACH,CAEO,SAAS0D,EAAmC,CACjDC,OAAAA,EACAxF,QAAAA,CAIF,EAAoB,CAClB,OAAOrC,EAAAA,QAAQ,KACN,CACLiH,UAAW,CACT5F,MAAOwG,EACP9F,OAAQ,EAAA,EAEVY,SAAU,CAAA,EACVmF,eAAgB,CAAA,EAChBZ,SAAU,CACR3G,QAAS,CACP6G,aAAc,GACd7E,MAAOF,EACP8E,QAAS,EAAA,CACX,CACF,GAED,CAACU,EAAQxF,CAAO,CAAC,CACtB,CAEO,SAAS0F,EAA4B,CAC1CC,QAAAA,CAGF,EAAoB,CAClB,OAAOhI,EAAAA,QAAQ,KACN,CACLuC,MAAO,CACLlC,SAAU,EAAA,EAEZH,UAAW,CAAA,EACX+H,cAAe,CACblG,OAAQiG,GAAW,EAAA,EAErBE,cAAe,CACbnG,OAAQiG,GAAW,EAAA,EAErBG,gBAAiB,CAAA,EACjBC,eAAgB,CAAA,EAChBnH,KAAM,CAAA,CAAC,GAER,CAAC+G,CAAO,CAAC,CACd,CAEO,SAASK,EAAoC,CAClD3C,WAAAA,CAGF,EAAoB,CAClB,OAAO1F,EAAAA,QAAQ,KACN,CACLiI,cAAe,CAAA,EACfE,gBAAiB,CAAA,EACjBC,eAAgB,CAAA,EAChBnH,KAAM,CAAA,CAAC,GAER,CAACyE,CAAU,CAAC,CACjB,CAEO,SAAS4C,EAA8B,CAC5CjG,QAAAA,EACA6E,SAAAA,CAIF,EAAoB,CAClB,OAAOlH,EAAAA,QAAQ,KACN,CACLiE,KAAM,CAEJ5D,SAAU,EAAA,EAEZsC,SAAU,CAAA,EACVuE,SAAU,CAER7G,SAAU,CAAC,EAAC6G,GAAAA,MAAAA,EAAUe,eAEtBlG,OAAQ,CAACM,EACT9B,QAAS,CACPgC,MAAOF,EACP8E,QAAS,EAAA,CACX,CACF,GAED,CAAC9E,EAAS6E,CAAQ,CAAC,CACxB"}