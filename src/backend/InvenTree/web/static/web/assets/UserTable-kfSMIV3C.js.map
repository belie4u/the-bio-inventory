{"version":3,"file":"UserTable-kfSMIV3C.js","sources":["../../../../../../frontend/src/tables/settings/GroupTable.tsx","../../../../../../frontend/src/components/items/TransferList.tsx","../../../../../../frontend/src/tables/settings/UserTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Accordion, LoadingOverlay, Stack, Text } from '@mantine/core';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/index';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { IconUsersGroup } from '@tabler/icons-react';\nimport { useNavigate } from 'react-router-dom';\nimport { EditApiForm } from '../../components/forms/ApiForm';\nimport { RoleTable, type RuleSet } from '../../components/items/RoleTable';\nimport { StylishText } from '../../components/items/StylishText';\nimport { DetailDrawer } from '../../components/nav/DetailDrawer';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport interface GroupDetailI {\n  pk: number;\n  name: string;\n}\n\nexport function GroupDrawer({\n  id,\n  refreshTable\n}: Readonly<{\n  id: string;\n  refreshTable: () => void;\n}>) {\n  const {\n    instance,\n    refreshInstance,\n    instanceQuery: { isFetching, error }\n  } = useInstance({\n    endpoint: ApiEndpoints.group_list,\n    pk: id,\n    params: {\n      permission_detail: true,\n      role_detail: true,\n      user_detail: true\n    }\n  });\n\n  const groupRoles: RuleSet[] = useMemo(() => {\n    return instance?.roles ?? [];\n  }, [instance]);\n\n  if (isFetching) {\n    return <LoadingOverlay visible={true} />;\n  }\n\n  if (error) {\n    return (\n      <Text>\n        {(error as any)?.response?.status === 404 ? (\n          <Trans>Group with id {id} not found</Trans>\n        ) : (\n          <Trans>An error occurred while fetching group details</Trans>\n        )}\n      </Text>\n    );\n  }\n\n  return (\n    <Stack>\n      <Accordion defaultValue={'details'}>\n        <Accordion.Item key='details' value='details'>\n          <Accordion.Control>\n            <StylishText size='lg'>\n              <Trans>Group Details</Trans>\n            </StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <EditApiForm\n              props={{\n                url: ApiEndpoints.group_list,\n                pk: id,\n                fields: {\n                  name: {\n                    label: t`Name`,\n                    description: t`Name of the user group`\n                  }\n                },\n                onFormSuccess: () => {\n                  refreshTable();\n                  refreshInstance();\n                }\n              }}\n              id={`group-detail-drawer-${id}`}\n            />\n          </Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item key='roles' value='roles'>\n          <Accordion.Control>\n            <StylishText size='lg'>\n              <Trans>Group Roles</Trans>\n            </StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <RoleTable roles={groupRoles} editable />\n          </Accordion.Panel>\n        </Accordion.Item>\n      </Accordion>\n    </Stack>\n  );\n}\n\n/**\n * Table for displaying list of groups\n */\nexport function GroupTable({\n  directLink = false\n}: Readonly<{ directLink?: boolean }>) {\n  const table = useTable('groups');\n  const navigate = useNavigate();\n  const user = useUserState();\n\n  const openDetailDrawer = useCallback(\n    (pk: number) => {\n      if (user.hasChangePermission(ModelType.group)) {\n        navigate(`group-${pk}/`);\n      }\n    },\n    [user]\n  );\n\n  const columns: TableColumn<GroupDetailI>[] = useMemo(() => {\n    return [\n      {\n        accessor: 'name',\n        sortable: true,\n        title: t`Name`,\n        switchable: false\n      }\n    ];\n  }, []);\n\n  const rowActions = useCallback(\n    (record: GroupDetailI): RowAction[] => {\n      return [\n        RowEditAction({\n          onClick: () => openDetailDrawer(record.pk),\n          hidden: !user.hasChangePermission(ModelType.group)\n        }),\n        RowDeleteAction({\n          hidden: !user.hasDeletePermission(ModelType.group),\n          onClick: () => {\n            setSelectedGroup(record.pk);\n            deleteGroup.open();\n          }\n        }),\n        {\n          icon: <IconUsersGroup />,\n          title: t`Open Profile`,\n          onClick: () => {\n            navigate(getDetailUrl(ModelType.group, record.pk));\n          }\n        }\n      ];\n    },\n    [user]\n  );\n\n  const [selectedGroup, setSelectedGroup] = useState<number>(-1);\n\n  const deleteGroup = useDeleteApiFormModal({\n    url: ApiEndpoints.group_list,\n    pk: selectedGroup,\n    title: t`Delete group`,\n    successMessage: t`Group deleted`,\n    table: table,\n    preFormWarning: t`Are you sure you want to delete this group?`\n  });\n\n  const newGroup = useCreateApiFormModal({\n    url: ApiEndpoints.group_list,\n    title: t`Add Group`,\n    fields: {\n      name: {\n        label: t`Name`,\n        description: t`Name of the user group`\n      }\n    },\n    table: table\n  });\n\n  const tableActions = useMemo(() => {\n    const actions = [];\n\n    actions.push(\n      <AddItemButton\n        key={'add-group'}\n        onClick={() => newGroup.open()}\n        tooltip={t`Add group`}\n        hidden={!user.hasAddPermission(ModelType.group)}\n      />\n    );\n\n    return actions;\n  }, [user]);\n\n  // Determine whether the GroupTable is editable\n  const editable: boolean = useMemo(\n    () => !directLink && user.isStaff() && user.hasChangeRole(UserRoles.admin),\n    [user, directLink]\n  );\n\n  return (\n    <>\n      {editable && newGroup.modal}\n      {editable && deleteGroup.modal}\n      {editable && (\n        <DetailDrawer\n          size='xl'\n          title={t`Edit Group`}\n          renderContent={(id) => {\n            if (!id || !id.startsWith('group-')) return false;\n            return (\n              <GroupDrawer\n                id={id.replace('group-', '')}\n                refreshTable={table.refreshTable}\n              />\n            );\n          }}\n        />\n      )}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.group_list)}\n        tableState={table}\n        columns={columns}\n        props={{\n          rowActions: editable ? rowActions : undefined,\n          tableActions: editable ? tableActions : undefined,\n          modelType: directLink ? ModelType.group : undefined,\n          onRowClick: editable\n            ? (record) => openDetailDrawer(record.pk)\n            : undefined\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  ActionIcon,\n  Button,\n  Divider,\n  Group,\n  Paper,\n  Stack,\n  Text,\n  Tooltip\n} from '@mantine/core';\nimport {\n  IconChevronLeft,\n  IconChevronRight,\n  IconCircleCheck,\n  IconCircleChevronLeft,\n  IconCircleChevronRight\n} from '@tabler/icons-react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nexport interface TransferListItem {\n  value: string | number;\n  label: string;\n  selected?: boolean;\n}\n\nfunction TransferListGroup({\n  items,\n  itemSelected,\n  itemSwitched\n}: {\n  items: TransferListItem[];\n  itemSelected: (item: TransferListItem) => void;\n  itemSwitched: (item: TransferListItem) => void;\n}) {\n  return (\n    <Paper\n      p='sm'\n      withBorder\n      style={{ width: '100%', height: '100%', verticalAlign: 'top' }}\n    >\n      <Stack\n        gap='xs'\n        justify='flex-start'\n        align='stretch'\n        style={{ width: '100%' }}\n      >\n        {items.map((item) => (\n          <Text\n            p={2}\n            key={item.value}\n            onClick={() => itemSelected(item)}\n            onDoubleClick={() => itemSwitched(item)}\n            style={{\n              width: '100%',\n              cursor: 'pointer',\n              backgroundColor: item.selected\n                ? 'var(--mantine-primary-color-light)'\n                : undefined\n            }}\n          >\n            {item.label || item.value}\n          </Text>\n        ))}\n        {items.length == 0 && <Text size='sm' fs='italic'>{t`No items`}</Text>}\n      </Stack>\n    </Paper>\n  );\n}\n\nexport function TransferList({\n  available,\n  selected,\n  onSave\n}: {\n  available: TransferListItem[];\n  selected: TransferListItem[];\n  onSave?: (selected: TransferListItem[]) => void;\n}) {\n  const [leftItems, setLeftItems] = useState<TransferListItem[]>([]);\n  const [rightItems, setRightItems] = useState<TransferListItem[]>([]);\n\n  useEffect(() => {\n    setRightItems(selected);\n    setLeftItems(\n      available.filter((item) => !selected.some((i) => i.value === item.value))\n    );\n  }, [available, selected]);\n\n  const leftToggled = useCallback(\n    (item: TransferListItem) => {\n      setLeftItems((items) =>\n        items.map((i) => {\n          if (i.value === item.value) {\n            return { ...i, selected: !i.selected };\n          }\n          return i;\n        })\n      );\n    },\n    [setLeftItems]\n  );\n\n  const rightToggled = useCallback(\n    (item: TransferListItem) => {\n      setRightItems((items) =>\n        items.map((i) => {\n          if (i.value === item.value) {\n            return { ...i, selected: !i.selected };\n          }\n          return i;\n        })\n      );\n    },\n    [setRightItems]\n  );\n\n  const leftSelected: boolean = useMemo(\n    () => leftItems.some((i) => i.selected),\n    [leftItems]\n  );\n  const rightSelected: boolean = useMemo(\n    () => rightItems.some((i) => i.selected),\n    [rightItems]\n  );\n\n  const transferLeftToRight = useCallback(\n    (transferAll: boolean) => {\n      if (transferAll) {\n        setRightItems((items) => items.concat(leftItems));\n        setLeftItems([]);\n      } else {\n        setRightItems((items) =>\n          items.concat(leftItems.filter((i) => i.selected))\n        );\n        setLeftItems((items) => items.filter((i) => !i.selected));\n      }\n    },\n    [leftItems, setLeftItems, setRightItems]\n  );\n\n  const transferRightToLeft = useCallback(\n    (transferAll: boolean) => {\n      if (transferAll) {\n        setLeftItems((items) => items.concat(rightItems));\n        setRightItems([]);\n      } else {\n        setLeftItems((items) =>\n          items.concat(rightItems.filter((i) => i.selected))\n        );\n        setRightItems((items) => items.filter((i) => !i.selected));\n      }\n    },\n    [rightItems, setLeftItems, setRightItems]\n  );\n\n  return (\n    <Paper p='sm' withBorder style={{ width: '100%' }}>\n      <Stack gap='xs'>\n        <Group justify='space-between'>\n          <Text>{t`Available`}</Text>\n          <Text>{t`Selected`}</Text>\n        </Group>\n\n        <Group justify='space-aprt' wrap='nowrap' align='flex-start'>\n          <TransferListGroup\n            items={leftItems}\n            itemSwitched={() => {}}\n            itemSelected={leftToggled}\n          />\n\n          <Stack gap='xs' flex={1}>\n            <ActionIcon\n              variant='outline'\n              size='md'\n              disabled={leftItems.length == 0}\n              onClick={() => transferLeftToRight(true)}\n            >\n              <IconCircleChevronRight />\n            </ActionIcon>\n            <ActionIcon\n              variant='outline'\n              size='md'\n              disabled={!leftSelected}\n              onClick={() => transferLeftToRight(false)}\n            >\n              <IconChevronRight />\n            </ActionIcon>\n            <ActionIcon\n              variant='outline'\n              size='md'\n              disabled={!rightSelected}\n              onClick={() => transferRightToLeft(false)}\n            >\n              <IconChevronLeft />\n            </ActionIcon>\n            <ActionIcon\n              variant='outline'\n              size='md'\n              disabled={rightItems.length == 0}\n              onClick={() => transferRightToLeft(true)}\n            >\n              <IconCircleChevronLeft />\n            </ActionIcon>\n          </Stack>\n\n          <TransferListGroup\n            items={rightItems}\n            itemSelected={rightToggled}\n            itemSwitched={() => {}}\n          />\n        </Group>\n        <Divider />\n        <Group justify='right' gap='xs'>\n          <Tooltip label={t`Save`}>\n            <Button\n              color='green'\n              onClick={() => {\n                onSave?.(rightItems);\n              }}\n              leftSection={<IconCircleCheck />}\n            >\n              {t`Save`}\n            </Button>\n          </Tooltip>\n        </Group>\n      </Stack>\n    </Paper>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Accordion, Alert, LoadingOverlay, Stack, Text } from '@mantine/core';\nimport {\n  IconInfoCircle,\n  IconKey,\n  IconLock,\n  IconLockOpen,\n  IconUserCircle\n} from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/index';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { showNotification } from '@mantine/notifications';\nimport { useNavigate } from 'react-router-dom';\nimport { useShallow } from 'zustand/react/shallow';\nimport { api } from '../../App';\nimport { EditApiForm } from '../../components/forms/ApiForm';\nimport { StylishText } from '../../components/items/StylishText';\nimport {\n  TransferList,\n  type TransferListItem\n} from '../../components/items/TransferList';\nimport { DetailDrawer } from '../../components/nav/DetailDrawer';\nimport { showApiErrorMessage } from '../../functions/notifications';\nimport {\n  useApiFormModal,\n  useCreateApiFormModal,\n  useDeleteApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { BooleanColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport type { GroupDetailI } from './GroupTable';\n\nexport interface UserDetailI {\n  pk: number;\n  username: string;\n  email: string;\n  first_name: string;\n  last_name: string;\n  groups: GroupDetailI[];\n  is_active: boolean;\n  is_staff: boolean;\n  is_superuser: boolean;\n}\n\nexport function UserDrawer({\n  id,\n  refreshTable\n}: Readonly<{\n  id: string;\n  refreshTable: () => void;\n}>) {\n  const {\n    instance: userDetail,\n    refreshInstance,\n    instanceQuery: { isFetching, error }\n  } = useInstance<UserDetailI>({\n    endpoint: ApiEndpoints.user_list,\n    pk: id\n  });\n\n  const currentUserPk = useUserState(useShallow((s) => s.user?.pk));\n  const isCurrentUser = useMemo(\n    () => currentUserPk === Number.parseInt(id, 10),\n    [currentUserPk, id]\n  );\n\n  const userGroups = useInstance({\n    endpoint: ApiEndpoints.group_list,\n    hasPrimaryKey: false,\n    defaultValue: []\n  });\n\n  const availableGroups: TransferListItem[] = useMemo(() => {\n    return (\n      userGroups.instance?.map((group: any) => {\n        return {\n          value: group.pk,\n          label: group.name\n        };\n      }) ?? []\n    );\n  }, [userGroups.instance]);\n\n  const selectedGroups: TransferListItem[] = useMemo(() => {\n    return (\n      userDetail?.groups?.map((group: any) => {\n        return {\n          value: group.pk,\n          label: group.name\n        };\n      }) ?? []\n    );\n  }, [userDetail]);\n\n  const onSaveGroups = useCallback(\n    (selected: TransferListItem[]) => {\n      if (!userDetail.pk) {\n        return;\n      }\n      api\n        .patch(apiUrl(ApiEndpoints.user_list, userDetail.pk), {\n          group_ids: selected.map((group) => group.value)\n        })\n        .then(() => {\n          showNotification({\n            title: t`Groups updated`,\n            message: t`User groups updated successfully`,\n            color: 'green'\n          });\n        })\n        .catch((error) => {\n          showApiErrorMessage({\n            error: error,\n            title: t`Error updating user groups`\n          });\n        })\n        .finally(() => {\n          refreshInstance();\n          refreshTable();\n        });\n    },\n    [userDetail]\n  );\n\n  if (isFetching) {\n    return <LoadingOverlay visible={true} />;\n  }\n\n  if (error) {\n    return (\n      <Text>\n        {(error as any)?.response?.status === 404 ? (\n          <Trans>User with id {id} not found</Trans>\n        ) : (\n          <Trans>An error occurred while fetching user details</Trans>\n        )}\n      </Text>\n    );\n  }\n\n  return (\n    <Stack gap='xs'>\n      <Accordion defaultValue={'details'}>\n        <Accordion.Item key='details' value='details'>\n          <Accordion.Control>\n            <StylishText size='lg'>\n              <Trans>User Details</Trans>\n            </StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <EditApiForm\n              props={{\n                url: ApiEndpoints.user_list,\n                pk: id,\n                fields: {\n                  username: {},\n                  first_name: {},\n                  last_name: {},\n                  email: {},\n                  is_active: {\n                    label: t`Is Active`,\n                    description: t`Designates whether this user should be treated as active. Unselect this instead of deleting accounts.`,\n                    disabled: isCurrentUser\n                  },\n                  is_staff: {\n                    label: t`Is Staff`,\n                    description: t`Designates whether the user can log into the django admin site.`,\n                    disabled: isCurrentUser\n                  },\n                  is_superuser: {\n                    label: t`Is Superuser`,\n                    description: t`Designates that this user has all permissions without explicitly assigning them.`,\n                    disabled: isCurrentUser\n                  }\n                },\n                postFormContent: isCurrentUser ? (\n                  <Alert\n                    title={<Trans>Info</Trans>}\n                    color='blue'\n                    icon={<IconInfoCircle />}\n                  >\n                    <Trans>\n                      You cannot edit the rights for the currently logged-in\n                      user.\n                    </Trans>\n                  </Alert>\n                ) : undefined,\n                onFormSuccess: () => {\n                  refreshTable();\n                  refreshInstance();\n                }\n              }}\n              id={`user-detail-drawer-${id}`}\n            />\n          </Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item key='groups' value='groups'>\n          <Accordion.Control>\n            <StylishText size='lg'>\n              <Trans>User Groups</Trans>\n            </StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <TransferList\n              available={availableGroups}\n              selected={selectedGroups}\n              onSave={onSaveGroups}\n            />\n          </Accordion.Panel>\n        </Accordion.Item>\n      </Accordion>\n    </Stack>\n  );\n}\n\n/**\n * Table for displaying list of users\n */\nexport function UserTable({\n  directLink\n}: Readonly<{\n  directLink?: boolean;\n}>) {\n  const table = useTable('users');\n  const navigate = useNavigate();\n  const user = useUserState();\n\n  const openDetailDrawer = useCallback(\n    (pk: number) => {\n      if (user.hasChangePermission(ModelType.user)) {\n        navigate(`user-${pk}/`);\n      }\n    },\n    [user]\n  );\n\n  const columns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'username',\n        sortable: true,\n        switchable: false\n      },\n      {\n        accessor: 'first_name',\n        sortable: true\n      },\n      {\n        accessor: 'last_name',\n        sortable: true\n      },\n      {\n        accessor: 'email',\n        sortable: true\n      },\n      {\n        accessor: 'groups',\n        title: t`Groups`,\n        sortable: true,\n        switchable: true,\n        render: (record: any) => {\n          return record.groups.length;\n        }\n      },\n      BooleanColumn({\n        accessor: 'is_staff'\n      }),\n      BooleanColumn({\n        accessor: 'is_superuser'\n      }),\n      BooleanColumn({\n        accessor: 'is_active'\n      })\n    ];\n  }, []);\n\n  // Row Actions\n  const [selectedUser, setSelectedUser] = useState<number>(-1);\n\n  const rowActions = useCallback(\n    (record: UserDetailI): RowAction[] => {\n      const staff: boolean = user.isStaff() || user.isSuperuser();\n      return [\n        RowEditAction({\n          onClick: () => openDetailDrawer(record.pk),\n          hidden: !staff || !user.hasChangePermission(ModelType.user)\n        }),\n        RowDeleteAction({\n          hidden: !staff || !user.hasDeletePermission(ModelType.user),\n          onClick: () => {\n            setSelectedUser(record.pk);\n            deleteUser.open();\n          }\n        }),\n        {\n          icon: <IconUserCircle />,\n          title: t`Open Profile`,\n          onClick: () => {\n            navigate(getDetailUrl(ModelType.user, record.pk));\n          }\n        },\n        {\n          icon: <IconKey />,\n          title: t`Change Password`,\n          color: 'blue',\n          onClick: () => {\n            setSelectedUser(record.pk);\n            setPassword.open();\n          },\n          hidden: !user.isSuperuser()\n        },\n        {\n          icon: <IconLock />,\n          title: t`Lock user`,\n          color: 'blue',\n          onClick: () => {\n            setUserActiveState(record.pk, false);\n            table.refreshTable();\n          },\n          hidden: !record.is_active\n        },\n        {\n          icon: <IconLockOpen />,\n          title: t`Unlock user`,\n          color: 'blue',\n          onClick: () => {\n            setUserActiveState(record.pk, true);\n            table.refreshTable();\n          },\n          hidden: record.is_active\n        }\n      ];\n    },\n    [user]\n  );\n\n  const deleteUser = useDeleteApiFormModal({\n    url: ApiEndpoints.user_list,\n    pk: selectedUser,\n    title: t`Delete user`,\n    successMessage: t`User deleted`,\n    table: table,\n    preFormContent: <></>,\n    preFormWarning: t`Are you sure you want to delete this user?`\n  });\n\n  // Table Actions - Add New User\n  const newUser = useCreateApiFormModal({\n    url: ApiEndpoints.user_list,\n    title: t`Add User`,\n    fields: {\n      username: {},\n      email: {},\n      first_name: {},\n      last_name: {}\n    },\n    table: table,\n    successMessage: t`Added user`\n  });\n\n  const setPassword = useApiFormModal({\n    url: ApiEndpoints.user_set_password,\n    method: 'PUT',\n    pk: selectedUser,\n    title: t`Set Password`,\n    fields: {\n      password: { field_type: 'password' },\n      override_warning: {}\n    },\n    successMessage: t`Password updated`\n  });\n\n  const tableActions = useMemo(() => {\n    const actions = [];\n    const staff: boolean = user.isStaff() || user.isSuperuser();\n\n    actions.push(\n      <AddItemButton\n        key='add-user'\n        onClick={newUser.open}\n        tooltip={t`Add user`}\n        hidden={!staff || !user.hasAddPermission(ModelType.user)}\n      />\n    );\n\n    return actions;\n  }, [user]);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'is_active',\n        label: t`Active`,\n        description: t`Show active users`\n      },\n      {\n        name: 'is_staff',\n        label: t`Staff`,\n        description: t`Show staff users`\n      },\n      {\n        name: 'is_superuser',\n        label: t`Superuser`,\n        description: t`Show superusers`\n      }\n    ];\n  }, []);\n\n  // Determine whether the UserTable is editable\n  const editable: boolean = useMemo(\n    () => !directLink && user.isStaff() && user.hasChangeRole(UserRoles.admin),\n    [user, directLink]\n  );\n\n  return (\n    <>\n      {editable && setPassword.modal}\n      {editable && newUser.modal}\n      {editable && deleteUser.modal}\n      {editable && (\n        <DetailDrawer\n          size='xl'\n          title={t`Edit User`}\n          renderContent={(id) => {\n            if (!id || !id.startsWith('user-')) return false;\n            return (\n              <UserDrawer\n                id={id.replace('user-', '')}\n                refreshTable={table.refreshTable}\n              />\n            );\n          }}\n        />\n      )}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.user_list)}\n        tableState={table}\n        columns={columns}\n        props={{\n          rowActions: editable ? rowActions : undefined,\n          tableActions: editable ? tableActions : undefined,\n          tableFilters: tableFilters,\n          onRowClick: editable\n            ? (record) => openDetailDrawer(record.pk)\n            : undefined,\n          modelType: directLink ? ModelType.user : undefined\n        }}\n      />\n    </>\n  );\n}\n\nasync function setUserActiveState(userId: number, active: boolean) {\n  try {\n    await api.patch(apiUrl(ApiEndpoints.user_list, userId), {\n      is_active: active\n    });\n    showNotification({\n      title: t`User updated`,\n      message: t`User updated successfully`,\n      color: 'green'\n    });\n  } catch (error) {\n    showApiErrorMessage({\n      error: error,\n      title: t`Error updating user`\n    });\n  }\n}\n"],"names":["GroupDrawer","id","refreshTable","instance","refreshInstance","instanceQuery","isFetching","error","useInstance","endpoint","ApiEndpoints","group_list","pk","params","permission_detail","role_detail","user_detail","groupRoles","useMemo","roles","jsx","LoadingOverlay","Text","response","status","_Trans","values","Stack","jsxs","Accordion","StylishText","EditApiForm","url","fields","name","label","_i18n","_","description","onFormSuccess","RoleTable","GroupTable","directLink","table","useTable","navigate","useNavigate","user","useUserState","openDetailDrawer","useCallback","hasChangePermission","ModelType","group","columns","accessor","sortable","title","switchable","rowActions","record","RowEditAction","onClick","hidden","RowDeleteAction","hasDeletePermission","setSelectedGroup","deleteGroup","open","icon","IconUsersGroup","getDetailUrl","selectedGroup","useState","useDeleteApiFormModal","successMessage","preFormWarning","newGroup","useCreateApiFormModal","tableActions","actions","push","AddItemButton","hasAddPermission","editable","isStaff","hasChangeRole","UserRoles","admin","Fragment","modal","DetailDrawer","startsWith","replace","InvenTreeTable","apiUrl","undefined","modelType","onRowClick","TransferListGroup","items","itemSelected","itemSwitched","Paper","width","height","verticalAlign","map","item","cursor","backgroundColor","selected","value","length","TransferList","available","onSave","leftItems","setLeftItems","rightItems","setRightItems","useEffect","filter","some","i","leftToggled","rightToggled","leftSelected","rightSelected","transferLeftToRight","transferAll","concat","transferRightToLeft","Group","ActionIcon","IconCircleChevronRight","IconChevronRight","IconChevronLeft","IconCircleChevronLeft","Divider","Tooltip","Button","IconCircleCheck","UserDrawer","userDetail","user_list","currentUserPk","useShallow","s","isCurrentUser","Number","parseInt","userGroups","hasPrimaryKey","defaultValue","availableGroups","selectedGroups","groups","onSaveGroups","api","patch","group_ids","then","showNotification","message","color","catch","showApiErrorMessage","finally","username","first_name","last_name","email","is_active","disabled","is_staff","is_superuser","postFormContent","Alert","IconInfoCircle","UserTable","render","BooleanColumn","selectedUser","setSelectedUser","staff","isSuperuser","deleteUser","IconUserCircle","IconKey","setPassword","IconLock","setUserActiveState","IconLockOpen","preFormContent","newUser","useApiFormModal","user_set_password","method","password","field_type","override_warning","tableFilters","userId","active"],"mappings":"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"}