{"version":3,"file":"BuildLineTable-DhaH4Pe-.js","sources":["../../../../../../frontend/src/tables/part/PartTestResultTable.tsx","../../../../../../frontend/src/tables/build/BuildLineTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { ActionIcon, Badge, Group, Text, Tooltip } from '@mantine/core';\nimport { IconCirclePlus } from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\n\nimport { PassFailButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport { cancelEvent } from '@lib/functions/Events';\nimport { AddItemButton } from '@lib/index';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport type { TableColumn } from '@lib/types/Tables';\nimport type { UseFormReturn } from 'react-hook-form';\nimport { RenderUser } from '../../components/render/User';\nimport { useApi } from '../../contexts/ApiContext';\nimport { formatDate } from '../../defaults/formatters';\nimport { useTestResultFields } from '../../forms/StockForms';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { LocationColumn } from '../ColumnRenderers';\nimport {\n  BatchFilter,\n  HasBatchCodeFilter,\n  InStockFilter,\n  IsSerializedFilter,\n  SerialFilter,\n  SerialGTEFilter,\n  SerialLTEFilter,\n  StatusFilterOptions\n} from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport { TableHoverCard } from '../TableHoverCard';\n\n/**\n * A table which displays all \"test results\" for the outputs generated by a build order.\n */\nexport default function PartTestResultTable({\n  buildId,\n  partId\n}: Readonly<{\n  buildId?: number;\n  partId: number;\n}>) {\n  const tableName = useMemo(() => {\n    if (buildId) {\n      return 'build-test-results';\n    } else {\n      return 'part-test-results';\n    }\n  }, [buildId]);\n\n  const table = useTable(tableName);\n  const api = useApi();\n\n  // Fetch the test templates required for this build order\n  const { data: testTemplates } = useQuery({\n    queryKey: ['build-test-templates', partId, buildId],\n    queryFn: async () => {\n      if (!partId) {\n        return [];\n      }\n\n      return api\n        .get(apiUrl(ApiEndpoints.part_test_template_list), {\n          params: {\n            part: partId,\n            include_inherited: true,\n            enabled: true,\n            required: true\n          }\n        })\n        .then((res) => res.data);\n    }\n  });\n\n  // Reload the table data whenever the set of templates changes\n  useEffect(() => {\n    table.refreshTable();\n  }, [testTemplates]);\n\n  const [selectedOutput, setSelectedOutput] = useState<number>(0);\n  const [selectedTemplate, setSelectedTemplate] = useState<number | undefined>(\n    undefined\n  );\n\n  const testResultFields: ApiFormFieldSet = useTestResultFields({\n    partId: partId,\n    itemId: selectedOutput,\n    templateId: selectedTemplate\n  });\n\n  const createTestResult = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.stock_test_result_list),\n    title: t`Add Test Result`,\n    fields: testResultFields,\n    initialData: {\n      template: selectedTemplate,\n      result: true\n    },\n    onFormSuccess: () => table.refreshTable(),\n    successMessage: t`Test result added`\n  });\n\n  const multipleTestResultFields: ApiFormFieldSet = useMemo(() => {\n    const fields: ApiFormFieldSet = { ...testResultFields };\n\n    // Do not allow attachment for multiple test results\n    delete fields.attachment;\n    delete fields.stock_item;\n\n    fields.template.disabled = false;\n\n    return fields;\n  }, [partId, testResultFields]);\n\n  const generateTestResults = useCallback(\n    (data: any, form: UseFormReturn) => {\n      // Generate a list of test results for each selected output\n      const results = table.selectedRecords.map((record: any) => {\n        return {\n          ...data,\n          stock_item: record.pk\n        };\n      });\n\n      return results;\n    },\n    [table.selectedIds]\n  );\n\n  const createTestResultMultiple = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.stock_test_result_list),\n    title: t`Add Test Results`,\n    fields: multipleTestResultFields,\n    initialData: {\n      result: true\n    },\n    onFormSuccess: () => {\n      table.clearSelectedRecords();\n      table.refreshTable();\n    },\n    processFormData: generateTestResults,\n    successMessage: t`Test results added`\n  });\n\n  // Generate a table column for each test template\n  const testColumns: TableColumn[] = useMemo(() => {\n    if (!testTemplates || testTemplates.length == 0) {\n      return [];\n    }\n\n    return testTemplates.map((template: any) => {\n      return {\n        accessor: `test_${template.pk}`,\n        title: template.test_name,\n        sortable: false,\n        switchable: true,\n        render: (record: any) => {\n          const tests = record.tests || [];\n\n          // Find the most recent test result (highest primary key)\n          const test = tests\n            .filter((test: any) => test.template == template.pk)\n            .sort((a: any, b: any) => b.pk - a.pk)\n            .shift();\n\n          // No test result recorded\n          if (!test || test.result === undefined) {\n            return (\n              <Group gap='xs' wrap='nowrap' justify='space-between'>\n                <Badge color='lightblue' variant='filled'>{t`No Result`}</Badge>\n                <Tooltip label={t`Add Test Result`}>\n                  <ActionIcon\n                    size='lg'\n                    color='green'\n                    aria-label='add-test-result'\n                    variant='transparent'\n                    onClick={(event: any) => {\n                      cancelEvent(event);\n                      setSelectedOutput(record.pk);\n                      setSelectedTemplate(template.pk);\n                      createTestResult.open();\n                    }}\n                  >\n                    <IconCirclePlus />\n                  </ActionIcon>\n                </Tooltip>\n              </Group>\n            );\n          }\n\n          const extra: ReactNode[] = [];\n\n          if (test.value) {\n            extra.push(\n              <Text key='value' size='sm'>\n                {t`Value`}: {test.value}\n              </Text>\n            );\n          }\n\n          if (test.notes) {\n            extra.push(\n              <Text key='notes' size='sm'>\n                {t`Notes`}: {test.notes}\n              </Text>\n            );\n          }\n\n          if (test.date) {\n            extra.push(\n              <Text key='date' size='sm'>\n                {t`Date`}: {formatDate(test.date)}\n              </Text>\n            );\n          }\n\n          if (test.user_detail) {\n            extra.push(<RenderUser key='user' instance={test.user_detail} />);\n          }\n\n          return (\n            <TableHoverCard\n              value={<PassFailButton value={test.result} />}\n              title={template.test_name}\n              extra={extra}\n            />\n          );\n        }\n      };\n    });\n  }, [testTemplates]);\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    // Fixed columns\n    const columns: TableColumn[] = [\n      {\n        accessor: 'stock',\n        title: t`Stock Item`,\n        sortable: true,\n        switchable: false,\n        render: (record: any) => {\n          if (record.serial) {\n            return `# ${record.serial}`;\n          } else {\n            const extra: ReactNode[] = [];\n\n            if (record.batch) {\n              extra.push(\n                <Text key='batch' size='sm'>\n                  {t`Batch Code`}: {record.batch}\n                </Text>\n              );\n            }\n\n            return (\n              <TableHoverCard\n                value={\n                  <Text>\n                    {t`Quantity`}: {record.quantity}\n                  </Text>\n                }\n                title={t`Build Output`}\n                extra={extra}\n              />\n            );\n          }\n        }\n      },\n      {\n        accessor: 'batch',\n        title: t`Batch Code`,\n        sortable: true,\n        switchable: true\n      },\n      LocationColumn({\n        accessor: 'location_detail'\n      })\n    ];\n\n    return [...columns, ...testColumns];\n  }, [testColumns]);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'is_building',\n        label: t`In Production`,\n        description: t`Show build outputs currently in production`\n      },\n      InStockFilter(),\n      SerialFilter(),\n      SerialGTEFilter(),\n      SerialLTEFilter(),\n      HasBatchCodeFilter(),\n      BatchFilter(),\n      IsSerializedFilter(),\n      {\n        name: 'status',\n        label: t`Status`,\n        description: t`Filter by stock status`,\n        choiceFunction: StatusFilterOptions(ModelType.stockitem)\n      }\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-test-result'\n        tooltip={t`Add Test Result`}\n        disabled={!table.hasSelectedRecords}\n        onClick={(event: any) => {\n          createTestResultMultiple.open();\n        }}\n      />\n    ];\n  }, [table.hasSelectedRecords]);\n\n  const rowActions = useCallback((record: any) => {\n    return [\n      {\n        icon: <IconCirclePlus />,\n        color: 'green',\n        title: t`Add Test Result`,\n        onClick: (event: any) => {\n          setSelectedOutput(record.pk);\n          setSelectedTemplate(undefined);\n          createTestResult.open();\n        }\n      }\n    ];\n  }, []);\n\n  return (\n    <>\n      {createTestResult.modal}\n      {createTestResultMultiple.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.stock_item_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          params: {\n            part_detail: true,\n            location_detail: true,\n            tests: true,\n            build: buildId\n          },\n          enableSelection: true,\n          rowActions: rowActions,\n          tableFilters: tableFilters,\n          tableActions: tableActions,\n          modelType: ModelType.stockitem\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Alert, Group, Paper, Text } from '@mantine/core';\nimport {\n  IconArrowRight,\n  IconCircleCheck,\n  IconCircleDashedCheck,\n  IconCircleMinus,\n  IconShoppingCart,\n  IconTool,\n  IconWand\n} from '@tabler/icons-react';\nimport type { DataTableRowExpansionProps } from 'mantine-datatable';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport {\n  RowDeleteAction,\n  RowEditAction,\n  RowViewAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { formatDecimal } from '@lib/functions/Formatting';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { RowAction, TableColumn } from '@lib/types/Tables';\nimport OrderPartsWizard from '../../components/wizards/OrderPartsWizard';\nimport {\n  useAllocateStockToBuildForm,\n  useBuildOrderFields,\n  useConsumeBuildLinesForm\n} from '../../forms/BuildForms';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport useStatusCodes from '../../hooks/UseStatusCodes';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport {\n  BooleanColumn,\n  DecimalColumn,\n  DescriptionColumn,\n  LocationColumn,\n  PartColumn,\n  RenderPartColumn\n} from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport RowExpansionIcon from '../RowExpansionIcon';\nimport { TableHoverCard } from '../TableHoverCard';\n\n/**\n * Render a sub-table of allocated stock against a particular build line.\n *\n * - Renders a simplified table of stock allocated against the build line\n * - Provides \"edit\" and \"delete\" actions for each allocation\n *\n * Note: We expect that the \"lineItem\" object contains an allocations[] list\n */\nexport function BuildLineSubTable({\n  lineItem,\n  onEditAllocation,\n  onDeleteAllocation\n}: Readonly<{\n  lineItem: any;\n  onEditAllocation?: (pk: number) => void;\n  onDeleteAllocation?: (pk: number) => void;\n}>) {\n  const user = useUserState();\n  const navigate = useNavigate();\n  const table = useTable('buildline-subtable');\n\n  const tableColumns: any[] = useMemo(() => {\n    return [\n      PartColumn({\n        part: 'part_detail'\n      }),\n      {\n        accessor: 'quantity',\n        title: t`Quantity`,\n        render: (record: any) => {\n          if (!!record.stock_item_detail?.serial) {\n            return `# ${record.stock_item_detail.serial}`;\n          }\n          return record.quantity;\n        }\n      },\n      {\n        accessor: 'stock_item_detail.batch',\n        title: t`Batch`\n      },\n      LocationColumn({\n        accessor: 'location_detail'\n      })\n    ];\n  }, []);\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      return [\n        RowViewAction({\n          title: t`View Stock Item`,\n          modelType: ModelType.stockitem,\n          modelId: record.stock_item,\n          navigate: navigate\n        }),\n        RowEditAction({\n          hidden: !onEditAllocation || !user.hasChangeRole(UserRoles.build),\n          onClick: () => {\n            onEditAllocation?.(record.pk);\n          }\n        }),\n        RowDeleteAction({\n          hidden: !onDeleteAllocation || !user.hasDeleteRole(UserRoles.build),\n          onClick: () => {\n            onDeleteAllocation?.(record.pk);\n          }\n        })\n      ];\n    },\n    [user, onEditAllocation, onDeleteAllocation]\n  );\n\n  return (\n    <Paper p='xs'>\n      <InvenTreeTable\n        tableState={table}\n        columns={tableColumns}\n        tableData={lineItem.filteredAllocations ?? lineItem.allocations}\n        props={{\n          minHeight: 200,\n          enableSearch: false,\n          enableRefresh: false,\n          enableColumnSwitching: false,\n          enableFilters: false,\n          rowActions: rowActions,\n          noRecordsText: ''\n        }}\n      />\n    </Paper>\n  );\n}\n\n/**\n * Render a table of build lines for a particular build.\n */\nexport default function BuildLineTable({\n  build,\n  output,\n  params = {}\n}: Readonly<{\n  build: any;\n  output?: any;\n  params?: any;\n}>) {\n  const user = useUserState();\n  const navigate = useNavigate();\n  const buildStatus = useStatusCodes({ modelType: ModelType.build });\n\n  const hasOutput: boolean = useMemo(() => !!output?.pk, [output]);\n\n  const table = useTable(hasOutput ? 'buildline-output' : 'buildline');\n\n  const isActive: boolean = useMemo(() => {\n    return (\n      build?.status == buildStatus.PRODUCTION ||\n      build?.status == buildStatus.PENDING ||\n      build?.status == buildStatus.ON_HOLD\n    );\n  }, [build, buildStatus]);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'allocated',\n        label: t`Allocated`,\n        description: t`Show fully allocated lines`\n      },\n      {\n        name: 'consumed',\n        label: t`Consumed`,\n        description: t`Show fully consumed lines`\n      },\n      {\n        name: 'available',\n        label: t`Available`,\n        description: t`Show items with available stock`\n      },\n      {\n        name: 'consumable',\n        label: t`Consumable`,\n        description: t`Show consumable lines`\n      },\n      {\n        name: 'optional',\n        label: t`Optional`,\n        description: t`Show optional lines`\n      },\n      {\n        name: 'assembly',\n        label: t`Assembly`,\n        description: t`Show assembled items`\n      },\n      {\n        name: 'testable',\n        label: t`Testable`,\n        description: t`Show testable items`\n      },\n      {\n        name: 'tracked',\n        label: t`Tracked`,\n        description: t`Show tracked lines`\n      }\n    ];\n  }, []);\n\n  const renderAvailableColumn = useCallback((record: any) => {\n    const bom_item = record?.bom_item_detail ?? {};\n    const extra: any[] = [];\n    let available = record?.available_stock;\n\n    // Account for substitute stock\n    if (record.available_substitute_stock > 0) {\n      available += record.available_substitute_stock;\n      extra.push(\n        <Text key='substitite' size='sm'>\n          {t`Includes substitute stock`}\n        </Text>\n      );\n    }\n\n    // Account for variant stock\n    if (bom_item.allow_variants && record.available_variant_stock > 0) {\n      available += record.available_variant_stock;\n      extra.push(\n        <Text key='variant' size='sm'>\n          {t`Includes variant stock`}\n        </Text>\n      );\n    }\n\n    // Account for in-production stock\n    if (record.in_production > 0) {\n      extra.push(\n        <Text key='production' size='sm'>\n          {t`In production`}: {formatDecimal(record.in_production)}\n        </Text>\n      );\n    }\n\n    // Account for stock on order\n    if (record.on_order > 0) {\n      extra.push(\n        <Text key='on-order' size='sm'>\n          {t`On order`}: {formatDecimal(record.on_order)}\n        </Text>\n      );\n    }\n\n    // Account for \"external\" stock\n    if (record.external_stock > 0) {\n      extra.push(\n        <Text key='external' size='sm'>\n          {t`External stock`}: {formatDecimal(record.external_stock)}\n        </Text>\n      );\n    }\n\n    const sufficient = available >= record.quantity - record.allocated;\n\n    if (!sufficient) {\n      extra.push(\n        <Text key='insufficient' c='orange' size='sm'>\n          {t`Insufficient stock`}\n        </Text>\n      );\n    }\n\n    return (\n      <TableHoverCard\n        icon={sufficient ? 'info' : 'exclamation'}\n        iconColor={sufficient ? 'blue' : 'orange'}\n        value={\n          available > 0 ? (\n            `${formatDecimal(available)}`\n          ) : (\n            <Text\n              c='red'\n              style={{ fontStyle: 'italic' }}\n            >{t`No stock available`}</Text>\n          )\n        }\n        title={t`Available Stock`}\n        extra={extra}\n      />\n    );\n  }, []);\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      PartColumn({\n        accessor: 'bom_item',\n        part: 'part_detail',\n        ordering: 'part',\n        sortable: true,\n        switchable: false,\n        render: (record: any) => {\n          const hasAllocatedItems = record.allocatedQuantity > 0;\n\n          return (\n            <Group wrap='nowrap'>\n              <RowExpansionIcon\n                enabled={hasAllocatedItems}\n                expanded={table.isRowExpanded(record.pk)}\n              />\n              <RenderPartColumn part={record.part_detail} />\n            </Group>\n          );\n        }\n      }),\n      {\n        accessor: 'part_detail.IPN',\n        sortable: false,\n        title: t`IPN`\n      },\n      DescriptionColumn({\n        accessor: 'part_detail.description'\n      }),\n      {\n        accessor: 'bom_item_detail.reference',\n        ordering: 'reference',\n        sortable: true,\n        title: t`Reference`\n      },\n      BooleanColumn({\n        accessor: 'bom_item_detail.optional',\n        ordering: 'optional',\n        hidden: hasOutput,\n        defaultVisible: false\n      }),\n      BooleanColumn({\n        accessor: 'bom_item_detail.consumable',\n        ordering: 'consumable',\n        hidden: hasOutput,\n        defaultVisible: false\n      }),\n      BooleanColumn({\n        accessor: 'bom_item_detail.allow_variants',\n        ordering: 'allow_variants',\n        hidden: hasOutput,\n        defaultVisible: false\n      }),\n      BooleanColumn({\n        accessor: 'bom_item_detail.inherited',\n        ordering: 'inherited',\n        title: t`Gets Inherited`,\n        hidden: hasOutput,\n        defaultVisible: false\n      }),\n      BooleanColumn({\n        accessor: 'part_detail.trackable',\n        ordering: 'trackable',\n        hidden: hasOutput,\n        defaultVisible: false\n      }),\n      {\n        accessor: 'bom_item_detail.quantity',\n        sortable: true,\n        title: t`Unit Quantity`,\n        defaultVisible: false,\n        ordering: 'unit_quantity',\n        render: (record: any) => {\n          return (\n            <Group justify='space-between' wrap='nowrap'>\n              <Text>{record.bom_item_detail?.quantity}</Text>\n              {record?.part_detail?.units && (\n                <Text size='xs'>[{record.part_detail.units}]</Text>\n              )}\n            </Group>\n          );\n        }\n      },\n      {\n        accessor: 'quantity',\n        title: t`Required Quantity`,\n        sortable: true,\n        defaultVisible: false,\n        switchable: false,\n        render: (record: any) => {\n          // Include information about the BOM item (if available)\n          const extra: any[] = [];\n\n          if (record?.bom_item_detail?.setup_quantity) {\n            extra.push(\n              <Text key='setup-quantity' size='sm'>\n                {t`Setup Quantity`}:{' '}\n                {formatDecimal(record.bom_item_detail.setup_quantity)}\n              </Text>\n            );\n          }\n\n          if (record?.bom_item_detail?.attrition) {\n            extra.push(\n              <Text key='attrition' size='sm'>\n                {t`Attrition`}: {record.bom_item_detail.attrition}%\n              </Text>\n            );\n          }\n\n          if (record?.bom_item_detail?.rounding_multiple) {\n            extra.push(\n              <Text key='rounding-multiple' size='sm'>\n                {t`Rounding Multiple`}:{' '}\n                {record.bom_item_detail.rounding_multiple}\n              </Text>\n            );\n          }\n\n          // If a build output is specified, use the provided quantity\n          return (\n            <TableHoverCard\n              title={t`BOM Information`}\n              extra={extra}\n              value={\n                <Group justify='space-between' wrap='nowrap'>\n                  <Text>{formatDecimal(record.requiredQuantity)}</Text>\n                  {record?.part_detail?.units && (\n                    <Text size='xs'>[{record.part_detail.units}]</Text>\n                  )}\n                </Group>\n              }\n            />\n          );\n        }\n      },\n      {\n        accessor: 'available_stock',\n        sortable: true,\n        switchable: false,\n        render: renderAvailableColumn\n      },\n      {\n        accessor: 'in_production',\n        render: (record: any) => {\n          if (record.scheduled_to_build > 0) {\n            return (\n              <ProgressBar\n                progressLabel={true}\n                value={record.in_production}\n                maximum={record.scheduled_to_build}\n              />\n            );\n          } else {\n            return record.part_detail?.is_assembly ? 0 : '-';\n          }\n        }\n      },\n      DecimalColumn({\n        accessor: 'on_order',\n        defaultVisible: false\n      }),\n      {\n        accessor: 'allocated',\n        switchable: false,\n        sortable: true,\n        hidden: !isActive,\n        minWidth: 125,\n        render: (record: any) => {\n          if (record?.bom_item_detail?.consumable) {\n            return (\n              <Text\n                size='sm'\n                style={{ fontStyle: 'italic' }}\n              >{t`Consumable item`}</Text>\n            );\n          }\n\n          const allocated = record.allocatedQuantity ?? 0;\n          let required = Math.max(0, record.quantity - record.consumed);\n\n          if (output?.pk) {\n            // If an output is specified, we show the allocated quantity for that output\n            required = record.bom_item_detail?.quantity;\n          }\n\n          if (allocated <= 0 && required <= 0) {\n            return (\n              <Group gap='xs' wrap='nowrap'>\n                <IconCircleCheck size={16} color='green' />\n                <Text size='sm' style={{ fontStyle: 'italic' }}>\n                  {record.consumed >= record.quantity\n                    ? t`Fully consumed`\n                    : t`Fully allocated`}\n                </Text>\n              </Group>\n            );\n          }\n\n          return (\n            <ProgressBar\n              progressLabel={true}\n              value={allocated}\n              maximum={required}\n            />\n          );\n        }\n      },\n      {\n        accessor: 'consumed',\n        sortable: true,\n        hidden: !!output?.pk,\n        minWidth: 125,\n        render: (record: any) => {\n          return record?.bom_item_detail?.consumable ? (\n            <Text style={{ fontStyle: 'italic' }}>{t`Consumable item`}</Text>\n          ) : (\n            <ProgressBar\n              progressLabel={true}\n              value={record.consumed}\n              maximum={record.requiredQuantity}\n            />\n          );\n        }\n      }\n    ];\n  }, [hasOutput, isActive, table, output]);\n\n  const buildOrderFields = useBuildOrderFields({\n    create: true,\n    modalId: 'new-build-order'\n  });\n\n  const [initialData, setInitialData] = useState<any>({});\n\n  const [selectedLine, setSelectedLine] = useState<number | null>(null);\n\n  const [selectedRows, setSelectedRows] = useState<any[]>([]);\n\n  const newBuildOrder = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_list,\n    title: t`Create Build Order`,\n    fields: buildOrderFields,\n    modalId: 'new-build-order',\n    initialData: initialData,\n    follow: true,\n    modelType: ModelType.build\n  });\n\n  const autoAllocateStock = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_auto_allocate,\n    pk: build.pk,\n    title: t`Allocate Stock`,\n    fields: {\n      location: {\n        filters: {\n          structural: false\n        }\n      },\n      exclude_location: {},\n      interchangeable: {},\n      substitutes: {},\n      optional_items: {}\n    },\n    initialData: {\n      location: build.take_from,\n      interchangeable: true,\n      substitutes: true,\n      optional_items: false\n    },\n    successMessage: t`Auto allocation in progress`,\n    table: table,\n    preFormContent: (\n      <Alert color='green' title={t`Auto Allocate Stock`}>\n        <Text>{t`Automatically allocate stock to this build according to the selected options`}</Text>\n      </Alert>\n    )\n  });\n\n  const allocateStock = useAllocateStockToBuildForm({\n    build: build,\n    output: output,\n    outputId: output?.pk ?? null,\n    buildId: build.pk,\n    lineItems: selectedRows,\n    onFormSuccess: () => {\n      table.clearSelectedRecords();\n      table.refreshTable();\n    }\n  });\n\n  const deallocateStock = useCreateApiFormModal({\n    url: ApiEndpoints.build_order_deallocate,\n    pk: build.pk,\n    title: t`Deallocate Stock`,\n    fields: {\n      build_line: {\n        hidden: true\n      },\n      output: {\n        hidden: true\n      }\n    },\n    initialData: {\n      build_line: selectedLine,\n      output: output?.pk ?? null\n    },\n    preFormContent: (\n      <Alert color='red' title={t`Deallocate Stock`}>\n        {selectedLine == undefined ? (\n          <Text>{t`Deallocate all untracked stock for this build order`}</Text>\n        ) : (\n          <Text>{t`Deallocate stock from the selected line item`}</Text>\n        )}\n      </Alert>\n    ),\n    successMessage: t`Stock has been deallocated`,\n    onFormSuccess: () => {\n      table.clearSelectedRecords();\n      table.refreshTable();\n    }\n  });\n\n  const [selectedAllocation, setSelectedAllocation] = useState<number>(0);\n\n  const editAllocation = useEditApiFormModal({\n    url: ApiEndpoints.build_item_list,\n    pk: selectedAllocation,\n    title: t`Edit Stock Allocation`,\n    fields: {\n      stock_item: {\n        disabled: true\n      },\n      quantity: {}\n    },\n    table: table\n  });\n\n  const deleteAllocation = useDeleteApiFormModal({\n    url: ApiEndpoints.build_item_list,\n    pk: selectedAllocation,\n    title: t`Delete Stock Allocation`,\n    table: table\n  });\n\n  const [partsToOrder, setPartsToOrder] = useState<any[]>([]);\n\n  const orderPartsWizard = OrderPartsWizard({\n    parts: partsToOrder\n  });\n\n  const consumeLines = useConsumeBuildLinesForm({\n    buildId: build.pk,\n    buildLines: selectedRows,\n    onFormSuccess: () => {\n      table.clearSelectedRecords();\n      table.refreshTable();\n    }\n  });\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const part = record.part_detail ?? {};\n      const in_production = build.status == buildStatus.PRODUCTION;\n      const consumable: boolean = record.bom_item_detail?.consumable ?? false;\n      const trackable: boolean = part?.trackable ?? false;\n\n      const hasOutput: boolean = !!output?.pk;\n\n      const required = Math.max(\n        0,\n        record.quantity - record.consumed - record.allocated\n      );\n\n      // Can consume\n      const canConsume =\n        in_production &&\n        !consumable &&\n        !trackable &&\n        record.allocated > 0 &&\n        user.hasChangeRole(UserRoles.build);\n\n      // Can allocate\n      const canAllocate =\n        in_production &&\n        !consumable &&\n        user.hasChangeRole(UserRoles.build) &&\n        required > 0 &&\n        record.trackable == hasOutput;\n\n      // Can de-allocate\n      const canDeallocate =\n        in_production &&\n        !consumable &&\n        user.hasChangeRole(UserRoles.build) &&\n        record.allocated > 0 &&\n        record.trackable == hasOutput;\n\n      const canOrder =\n        !consumable &&\n        user.hasAddRole(UserRoles.purchase_order) &&\n        part.purchaseable;\n\n      const canBuild =\n        !consumable && user.hasAddRole(UserRoles.build) && part.assembly;\n\n      return [\n        {\n          icon: <IconArrowRight />,\n          title: t`Allocate Stock`,\n          hidden: !canAllocate,\n          color: 'green',\n          onClick: () => {\n            setSelectedRows([record]);\n            allocateStock.open();\n          }\n        },\n        {\n          icon: <IconCircleDashedCheck />,\n          title: t`Consume Stock`,\n          color: 'green',\n          hidden: !canConsume || hasOutput,\n          onClick: () => {\n            setSelectedRows([record]);\n            consumeLines.open();\n          }\n        },\n        {\n          icon: <IconCircleMinus />,\n          title: t`Deallocate Stock`,\n          hidden: !canDeallocate,\n          color: 'red',\n          onClick: () => {\n            setSelectedLine(record.pk);\n            deallocateStock.open();\n          }\n        },\n        {\n          icon: <IconShoppingCart />,\n          title: t`Order Stock`,\n          hidden: !canOrder,\n          color: 'blue',\n          onClick: () => {\n            setPartsToOrder([record.part_detail]);\n            orderPartsWizard.openWizard();\n          }\n        },\n        {\n          icon: <IconTool />,\n          title: t`Build Stock`,\n          hidden: !canBuild,\n          color: 'blue',\n          onClick: () => {\n            setInitialData({\n              part: record.part,\n              parent: build.pk,\n              quantity: record.quantity - record.allocated\n            });\n            newBuildOrder.open();\n          }\n        },\n        RowViewAction({\n          title: t`View Part`,\n          modelType: ModelType.part,\n          modelId: record.part,\n          navigate: navigate\n        })\n      ];\n    },\n    [user, navigate, output, build, buildStatus]\n  );\n\n  const tableActions = useMemo(() => {\n    const production = build.status == buildStatus.PRODUCTION;\n    const canEdit = user.hasChangeRole(UserRoles.build);\n    const visible = production && canEdit;\n    return [\n      <ActionButton\n        key='auto-allocate'\n        icon={<IconWand />}\n        tooltip={t`Auto Allocate Stock`}\n        hidden={!visible || hasOutput}\n        color='blue'\n        onClick={() => {\n          autoAllocateStock.open();\n        }}\n      />,\n      <ActionButton\n        key='order-parts'\n        hidden={!user.hasAddRole(UserRoles.purchase_order)}\n        disabled={!table.hasSelectedRecords}\n        icon={<IconShoppingCart />}\n        color='blue'\n        tooltip={t`Order Parts`}\n        onClick={() => {\n          setPartsToOrder(\n            table.selectedRecords\n              .filter(\n                (r) => r.part_detail?.purchaseable && r.part_detail?.active\n              )\n              .map((r) => r.part_detail)\n          );\n          orderPartsWizard.openWizard();\n        }}\n      />,\n      <ActionButton\n        key='allocate-stock'\n        icon={<IconArrowRight />}\n        tooltip={t`Allocate Stock`}\n        hidden={!visible}\n        disabled={!table.hasSelectedRecords}\n        color='green'\n        onClick={() => {\n          let rows = table.selectedRecords\n            .filter((r) => r.allocatedQuantity < r.requiredQuantity)\n            .filter((r) => !r.bom_item_detail?.consumable);\n\n          if (hasOutput) {\n            rows = rows.filter((r) => r.trackable);\n          } else {\n            rows = rows.filter((r) => !r.trackable);\n          }\n\n          setSelectedRows(rows);\n          allocateStock.open();\n        }}\n      />,\n      <ActionButton\n        key='deallocate-stock'\n        icon={<IconCircleMinus />}\n        tooltip={t`Deallocate Stock`}\n        hidden={!visible || hasOutput}\n        disabled={table.hasSelectedRecords}\n        color='red'\n        onClick={() => {\n          setSelectedLine(null);\n          deallocateStock.open();\n        }}\n      />,\n      <ActionButton\n        key='consume-stock'\n        icon={<IconCircleDashedCheck />}\n        tooltip={t`Consume Stock`}\n        hidden={!visible || hasOutput}\n        disabled={!table.hasSelectedRecords}\n        color='green'\n        onClick={() => {\n          setSelectedRows(table.selectedRecords);\n          consumeLines.open();\n        }}\n      />\n    ];\n  }, [\n    user,\n    build,\n    buildStatus,\n    hasOutput,\n    table.hasSelectedRecords,\n    table.selectedRecords\n  ]);\n\n  /**\n   * Format the records for the table, before rendering\n   *\n   * - Filter the \"allocations\" field to only show allocations for the selected output\n   * - Pre-calculate the \"requiredQuantity\" and \"allocatedQuantity\" fields\n   */\n  const formatRecords = useCallback(\n    (records: any[]): any[] => {\n      return records.map((record) => {\n        let allocations = [...record.allocations];\n\n        // If an output is specified, filter the allocations to only show those for the selected output\n        if (output?.pk) {\n          allocations = allocations.filter((a) => a.install_into == output.pk);\n        }\n\n        let allocatedQuantity = 0;\n        let requiredQuantity = record.quantity;\n\n        // Calculate the total allocated quantity\n        allocations.forEach((a) => {\n          allocatedQuantity += a.quantity;\n        });\n\n        // Calculate the required quantity (based on the build output)\n        if (output?.quantity && record.bom_item_detail) {\n          requiredQuantity = output.quantity * record.bom_item_detail.quantity;\n        }\n\n        return {\n          ...record,\n          filteredAllocations: allocations,\n          requiredQuantity: requiredQuantity,\n          allocatedQuantity: allocatedQuantity\n        };\n      });\n    },\n    [output]\n  );\n\n  // Control row expansion\n  const rowExpansion: DataTableRowExpansionProps<any> = useMemo(() => {\n    return {\n      allowMultiple: true,\n      expandable: ({ record }: { record: any }) => {\n        // Only items with allocated stock can be expanded\n        return table.isRowExpanded(record.pk) || record.allocatedQuantity > 0;\n      },\n      content: ({ record }: { record: any }) => {\n        return (\n          <BuildLineSubTable\n            lineItem={record}\n            onEditAllocation={(pk: number) => {\n              setSelectedAllocation(pk);\n              editAllocation.open();\n            }}\n            onDeleteAllocation={(pk: number) => {\n              setSelectedAllocation(pk);\n              deleteAllocation.open();\n            }}\n          />\n        );\n      }\n    };\n  }, [table.isRowExpanded, output]);\n\n  return (\n    <>\n      {autoAllocateStock.modal}\n      {newBuildOrder.modal}\n      {allocateStock.modal}\n      {deallocateStock.modal}\n      {editAllocation.modal}\n      {deleteAllocation.modal}\n      {consumeLines.modal}\n      {orderPartsWizard.wizard}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.build_line_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          params: {\n            ...params,\n            build: build.pk,\n            assembly_detail: false,\n            part_detail: true\n          },\n          tableActions: tableActions,\n          tableFilters: tableFilters,\n          rowActions: rowActions,\n          dataFormatter: formatRecords,\n          enableDownload: true,\n          enableSelection: true,\n          enableLabels: true,\n          modelType: ModelType.buildline,\n          onCellClick: () => {},\n          rowExpansion: rowExpansion\n        }}\n      />\n    </>\n  );\n}\n"],"names":["PartTestResultTable","buildId","partId","tableName","useMemo","table","useTable","api","useApi","data","testTemplates","useQuery","queryKey","queryFn","get","apiUrl","ApiEndpoints","part_test_template_list","params","part","include_inherited","enabled","required","then","res","useEffect","refreshTable","selectedOutput","setSelectedOutput","useState","selectedTemplate","setSelectedTemplate","undefined","testResultFields","useTestResultFields","itemId","templateId","createTestResult","useCreateApiFormModal","url","stock_test_result_list","title","_i18n","_","id","fields","initialData","template","result","onFormSuccess","successMessage","multipleTestResultFields","attachment","stock_item","disabled","generateTestResults","useCallback","form","selectedRecords","map","record","pk","selectedIds","createTestResultMultiple","clearSelectedRecords","processFormData","testColumns","length","accessor","test_name","sortable","switchable","render","test","tests","filter","sort","a","b","shift","Group","jsx","Badge","Tooltip","ActionIcon","event","cancelEvent","open","IconCirclePlus","extra","value","push","jsxs","Text","notes","date","formatDate","user_detail","RenderUser","TableHoverCard","PassFailButton","tableColumns","serial","batch","quantity","LocationColumn","tableFilters","name","label","description","InStockFilter","SerialFilter","SerialGTEFilter","SerialLTEFilter","HasBatchCodeFilter","BatchFilter","IsSerializedFilter","choiceFunction","StatusFilterOptions","ModelType","stockitem","tableActions","AddItemButton","hasSelectedRecords","rowActions","icon","color","onClick","Fragment","modal","InvenTreeTable","stock_item_list","part_detail","location_detail","build","enableSelection","modelType","BuildLineSubTable","lineItem","onEditAllocation","onDeleteAllocation","user","useUserState","navigate","useNavigate","PartColumn","stock_item_detail","RowViewAction","modelId","RowEditAction","hidden","hasChangeRole","UserRoles","RowDeleteAction","hasDeleteRole","Paper","filteredAllocations","allocations","minHeight","enableSearch","enableRefresh","enableColumnSwitching","enableFilters","noRecordsText","BuildLineTable","output","buildStatus","useStatusCodes","hasOutput","isActive","status","PRODUCTION","PENDING","ON_HOLD","renderAvailableColumn","bom_item","bom_item_detail","available","available_stock","available_substitute_stock","allow_variants","available_variant_stock","in_production","formatDecimal","on_order","external_stock","sufficient","allocated","fontStyle","ordering","hasAllocatedItems","allocatedQuantity","RowExpansionIcon","isRowExpanded","RenderPartColumn","DescriptionColumn","BooleanColumn","defaultVisible","units","setup_quantity","attrition","rounding_multiple","requiredQuantity","scheduled_to_build","ProgressBar","is_assembly","DecimalColumn","minWidth","consumable","Math","max","consumed","IconCircleCheck","buildOrderFields","useBuildOrderFields","create","modalId","setInitialData","selectedLine","setSelectedLine","selectedRows","setSelectedRows","newBuildOrder","build_order_list","follow","autoAllocateStock","build_order_auto_allocate","location","filters","structural","exclude_location","interchangeable","substitutes","optional_items","take_from","preFormContent","Alert","allocateStock","useAllocateStockToBuildForm","outputId","lineItems","deallocateStock","build_order_deallocate","build_line","selectedAllocation","setSelectedAllocation","editAllocation","useEditApiFormModal","build_item_list","deleteAllocation","useDeleteApiFormModal","partsToOrder","setPartsToOrder","orderPartsWizard","OrderPartsWizard","parts","consumeLines","useConsumeBuildLinesForm","buildLines","trackable","canConsume","canAllocate","canDeallocate","canOrder","hasAddRole","purchase_order","purchaseable","canBuild","assembly","IconArrowRight","IconCircleDashedCheck","IconCircleMinus","IconShoppingCart","openWizard","IconTool","parent","production","canEdit","visible","ActionButton","IconWand","r","active","rows","formatRecords","records","install_into","forEach","rowExpansion","allowMultiple","expandable","content","wizard","build_line_list","assembly_detail","dataFormatter","enableDownload","enableLabels","buildline","onCellClick"],"mappings":"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"}