{"version":3,"file":"SettingList-B8rIclGA.js","sources":["../../../../../../frontend/src/components/nav/SettingsHeader.tsx","../../../../../../frontend/src/components/settings/SettingItem.tsx","../../../../../../frontend/src/components/settings/SettingList.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Group, SegmentedControl, Stack, Text } from '@mantine/core';\nimport type { ReactNode } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useUserState } from '../../states/UserState';\nimport { StylishText } from '../items/StylishText';\n\ninterface SettingsHeaderInterface {\n  label: string;\n  title: string;\n  shorthand?: string;\n  subtitle?: string | ReactNode;\n}\n\n/**\n * Construct a settings page header with interlinks to one other settings page\n */\nexport function SettingsHeader({\n  label,\n  title,\n  shorthand,\n  subtitle\n}: Readonly<SettingsHeaderInterface>) {\n  const user = useUserState();\n  const navigate = useNavigate();\n\n  return (\n    <Group justify='space-between'>\n      <Stack gap='0' ml={'sm'}>\n        <Group>\n          <StylishText size='xl'>{title}</StylishText>\n          {shorthand && <Text c='dimmed'>({shorthand})</Text>}\n        </Group>\n        <Group>{subtitle ? <Text c='dimmed'>{subtitle}</Text> : null}</Group>\n      </Stack>\n      {user.isStaff() && (\n        <SegmentedControl\n          data={[\n            { value: 'user', label: t`User Settings` },\n            { value: 'system', label: t`System Settings` },\n            { value: 'admin', label: t`Admin Center` }\n          ]}\n          onChange={(value) => navigate(`/settings/${value}`)}\n          value={label}\n        />\n      )}\n    </Group>\n  );\n}\n","import {\n  Button,\n  Group,\n  Paper,\n  Space,\n  Stack,\n  Switch,\n  Text,\n  useMantineColorScheme\n} from '@mantine/core';\nimport { IconEdit } from '@tabler/icons-react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { ModelInformationDict } from '@lib/enums/ModelInformation';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { Setting } from '@lib/types/Settings';\nimport { api } from '../../App';\nimport { vars } from '../../theme';\nimport { Boundary } from '../Boundary';\nimport { RenderInstance } from '../render/Instance';\n\n/**\n * Render a single setting value\n */\nfunction SettingValue({\n  setting,\n  onEdit,\n  onToggle\n}: Readonly<{\n  setting: Setting;\n  onEdit: (setting: Setting) => void;\n  onToggle: (setting: Setting, value: boolean) => void;\n}>) {\n  // Determine the text to display for the setting value\n  const valueText: string = useMemo(() => {\n    let value = setting.value;\n\n    // If the setting has a choice, display the choice label\n    if (setting?.choices && setting?.choices?.length > 0) {\n      const choice = setting.choices.find((c) => c.value == setting.value);\n      value = choice?.display_name || setting.value;\n    }\n\n    if (setting?.units) {\n      value = `${value} ${setting.units}`;\n    }\n\n    return value;\n  }, [setting]);\n\n  const [modelInstance, setModelInstance] = useState<any>(null);\n\n  // Launch the edit dialog for this setting\n  const editSetting = useCallback(() => {\n    if (!setting.read_only) {\n      onEdit(setting);\n    }\n  }, [setting, onEdit]);\n\n  // Toggle the setting value (if it is a boolean)\n  const toggleSetting = useCallback(\n    (event: any) => {\n      if (!setting.read_only) {\n        onToggle(setting, event.currentTarget.checked);\n      }\n    },\n    [setting, onToggle]\n  );\n\n  // Does this setting map to an internal database model?\n  const modelType: ModelType | null = useMemo(() => {\n    if (setting.model_name) {\n      const model = setting.model_name.split('.')[1];\n      return ModelType[model as keyof typeof ModelType] || null;\n    }\n    return null;\n  }, [setting]);\n\n  useEffect(() => {\n    setModelInstance(null);\n\n    if (modelType && setting.value) {\n      const endpoint = ModelInformationDict[modelType].api_endpoint;\n\n      api\n        .get(apiUrl(endpoint, setting.value))\n        .then((response) => {\n          if (response.data) {\n            setModelInstance(response.data);\n          } else {\n            setModelInstance(null);\n          }\n        })\n        .catch((error) => {\n          setModelInstance(null);\n        });\n    }\n  }, [setting, modelType]);\n\n  // If a full model instance is available, render it\n  if (modelInstance && modelType && setting.value) {\n    return (\n      <Group justify='right' gap='xs'>\n        <RenderInstance instance={modelInstance} model={modelType} />\n        <Button\n          aria-label={`edit-setting-${setting.key}`}\n          variant='subtle'\n          disabled={setting.read_only}\n          onClick={editSetting}\n        >\n          <IconEdit />\n        </Button>\n      </Group>\n    );\n  }\n\n  switch (setting?.type || 'string') {\n    case 'boolean':\n      return (\n        <Switch\n          size='sm'\n          radius='lg'\n          aria-label={`toggle-setting-${setting.key}`}\n          disabled={setting.read_only}\n          checked={setting.value.toString().toLowerCase() == 'true'}\n          onChange={toggleSetting}\n          wrapperProps={{\n            'aria-label': `setting-${setting.key}-wrapper`\n          }}\n          style={{\n            paddingRight: '20px'\n          }}\n        />\n      );\n    default:\n      return valueText ? (\n        <Group gap='xs' justify='right'>\n          <Space />\n          <Button\n            aria-label={`edit-setting-${setting.key}`}\n            variant='subtle'\n            disabled={setting.read_only}\n            onClick={editSetting}\n          >\n            {valueText}\n          </Button>\n        </Group>\n      ) : (\n        <Button\n          aria-label={`edit-setting-${setting.key}`}\n          variant='subtle'\n          disabled={setting.read_only}\n          onClick={editSetting}\n        >\n          <IconEdit />\n        </Button>\n      );\n  }\n}\n\n/**\n * Display a single setting item, and allow editing of the value\n */\nexport function SettingItem({\n  setting,\n  shaded,\n  onEdit,\n  onToggle\n}: Readonly<{\n  setting: Setting;\n  shaded: boolean;\n  onEdit: (setting: Setting) => void;\n  onToggle: (setting: Setting, value: boolean) => void;\n}>) {\n  const { colorScheme } = useMantineColorScheme();\n\n  const style: Record<string, string> = { paddingLeft: '8px' };\n  if (shaded) {\n    style['backgroundColor'] =\n      colorScheme === 'light' ? vars.colors.gray[1] : vars.colors.gray[9];\n  }\n\n  return (\n    <Paper style={style}>\n      <Group justify='space-between' p='3'>\n        <Stack gap='2' p='4px'>\n          <Text>\n            {setting.name}\n            {setting.required ? ' *' : ''}\n          </Text>\n          <Text size='xs'>{setting.description}</Text>\n        </Stack>\n        <Boundary label={`setting-value-${setting.key}`}>\n          <SettingValue setting={setting} onEdit={onEdit} onToggle={onToggle} />\n        </Boundary>\n      </Group>\n    </Paper>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Alert, Skeleton, Stack, Text } from '@mantine/core';\nimport { notifications } from '@mantine/notifications';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useStore } from 'zustand';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { Setting, SettingsStateProps } from '@lib/types/Settings';\nimport { IconExclamationCircle, IconInfoCircle } from '@tabler/icons-react';\nimport { useApi } from '../../contexts/ApiContext';\nimport { useEditApiFormModal } from '../../hooks/UseForm';\nimport {\n  createMachineSettingsState,\n  createPluginSettingsState,\n  useGlobalSettingsState,\n  useUserSettingsState\n} from '../../states/SettingsStates';\nimport { SettingItem } from './SettingItem';\n\n/**\n * Display a list of setting items, based on a list of provided keys\n */\nexport function SettingList({\n  settingsState,\n  keys,\n  onChange,\n  onLoaded\n}: Readonly<{\n  settingsState: SettingsStateProps;\n  keys?: string[];\n  onChange?: () => void;\n  onLoaded?: (settings: SettingsStateProps) => void;\n}>) {\n  useEffect(() => {\n    if (settingsState.loaded) {\n      // Call the onLoaded callback if provided\n      onLoaded?.(settingsState);\n    }\n  }, [settingsState.loaded, settingsState.settings]);\n\n  const api = useApi();\n\n  const allKeys = useMemo(\n    () => settingsState?.settings?.map((s) => s.key) ?? [],\n    [settingsState?.settings]\n  );\n\n  const [setting, setSetting] = useState<Setting | undefined>(undefined);\n\n  // Determine the field type of the setting\n  const fieldType = useMemo(() => {\n    if (setting?.choices?.length) {\n      return 'choice';\n    }\n\n    if (setting?.type != undefined) {\n      return setting.type;\n    }\n\n    return 'string';\n  }, [setting]);\n\n  const key: string = useMemo(() => setting?.key ?? '', [setting]);\n\n  const editSettingModal = useEditApiFormModal({\n    url: settingsState.endpoint,\n    pk: key,\n    pathParams: settingsState.pathParams,\n    title: t`Edit Setting`,\n    fields: {\n      value: {\n        field_type: fieldType,\n        required: setting?.required ?? false,\n        label: setting?.name,\n        description: setting?.description,\n        api_url: setting?.api_url ?? '',\n        model: (setting?.model_name?.split('.')[1] as ModelType) ?? null,\n        filters: setting?.model_filters || undefined,\n        choices: setting?.choices ?? undefined\n      }\n    },\n    successMessage: t`Setting ${key} updated successfully`,\n    onFormSuccess: () => {\n      settingsState.fetchSettings();\n      onChange?.();\n    }\n  });\n\n  // Callback for editing a single setting instance\n  const onValueEdit = useCallback(\n    (setting: Setting) => {\n      setSetting(setting);\n      editSettingModal.open();\n    },\n    [editSettingModal]\n  );\n\n  // Callback for toggling a single boolean setting instance\n  const onValueToggle = useCallback(\n    (setting: Setting, value: boolean) => {\n      api\n        .patch(\n          apiUrl(settingsState.endpoint, setting.key, settingsState.pathParams),\n          {\n            value: value\n          }\n        )\n        .then(() => {\n          notifications.hide('setting');\n          notifications.show({\n            title: t`Setting updated`,\n            message: t`Setting ${setting.key} updated successfully`,\n            color: 'green',\n            id: 'setting'\n          });\n          onChange?.();\n        })\n        .catch((error) => {\n          notifications.hide('setting');\n          notifications.show({\n            title: t`Error editing setting`,\n            message: error.message,\n            color: 'red',\n            id: 'setting'\n          });\n        })\n        .finally(() => {\n          settingsState.fetchSettings();\n        });\n    },\n    [settingsState]\n  );\n\n  if (settingsState.isError) {\n    return (\n      <Alert color='red' icon={<IconExclamationCircle />} title={t`Error`}>\n        <Text>{t`Error loading settings`}</Text>\n      </Alert>\n    );\n  }\n\n  if (!settingsState?.loaded) {\n    return <Skeleton animate />;\n  }\n\n  if ((keys || allKeys).length === 0) {\n    return (\n      <Alert color='blue' icon={<IconInfoCircle />} title={t`No Settings`}>\n        <Text>{t`There are no configurable settings available`}</Text>\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      {editSettingModal.modal}\n      <Stack gap='xs'>\n        {(keys || allKeys)?.map((key, i) => {\n          const setting = settingsState?.settings?.find(\n            (s: any) => s.key === key\n          );\n\n          if (settingsState?.settings && !setting) {\n            console.error(`Setting ${key} not found`);\n          }\n\n          return (\n            <React.Fragment key={key}>\n              {setting ? (\n                <SettingItem\n                  setting={setting}\n                  shaded={i % 2 === 0}\n                  onEdit={onValueEdit}\n                  onToggle={onValueToggle}\n                />\n              ) : (\n                <Text size='sm' style={{ fontStyle: 'italic' }} c='red'>\n                  Setting {key} not found\n                </Text>\n              )}\n            </React.Fragment>\n          );\n        })}\n        {(keys || allKeys)?.length === 0 && (\n          <Text style={{ fontStyle: 'italic' }}>\n            <Trans>No settings specified</Trans>\n          </Text>\n        )}\n      </Stack>\n    </>\n  );\n}\n\nexport function UserSettingList({ keys }: Readonly<{ keys: string[] }>) {\n  const userSettings = useUserSettingsState();\n\n  return <SettingList settingsState={userSettings} keys={keys} />;\n}\n\nexport function GlobalSettingList({ keys }: Readonly<{ keys: string[] }>) {\n  const globalSettings = useGlobalSettingsState();\n\n  return <SettingList settingsState={globalSettings} keys={keys} />;\n}\n\nexport function PluginSettingList({\n  pluginKey,\n  onLoaded\n}: Readonly<{\n  pluginKey: string;\n  onLoaded?: (settings: SettingsStateProps) => void;\n}>) {\n  const store = useMemo(\n    () =>\n      createPluginSettingsState({\n        plugin: pluginKey,\n        endpoint: ApiEndpoints.plugin_setting_list\n      }),\n    [pluginKey]\n  );\n\n  const pluginSettings = useStore(store);\n\n  useEffect(() => {\n    pluginSettings.fetchSettings();\n  }, [pluginSettings.fetchSettings]);\n\n  return <SettingList settingsState={pluginSettings} onLoaded={onLoaded} />;\n}\n\nexport function PluginUserSettingList({\n  pluginKey,\n  onLoaded\n}: Readonly<{\n  pluginKey: string;\n  onLoaded?: (settings: SettingsStateProps) => void;\n}>) {\n  const store = useMemo(\n    () =>\n      createPluginSettingsState({\n        plugin: pluginKey,\n        endpoint: ApiEndpoints.plugin_user_setting_list\n      }),\n    [pluginKey]\n  );\n\n  const pluginUserSettings = useStore(store);\n\n  useEffect(() => {\n    pluginUserSettings.fetchSettings();\n  }, [pluginUserSettings.fetchSettings]);\n\n  return <SettingList settingsState={pluginUserSettings} onLoaded={onLoaded} />;\n}\n\nexport function MachineSettingList({\n  machinePk,\n  configType,\n  onChange\n}: Readonly<{\n  machinePk: string;\n  configType: 'M' | 'D';\n  onChange?: () => void;\n}>) {\n  const store = useMemo(\n    () =>\n      createMachineSettingsState({\n        machine: machinePk,\n        configType: configType\n      }),\n    [machinePk, configType]\n  );\n\n  const machineSettings = useStore(store);\n\n  useEffect(() => {\n    machineSettings.fetchSettings();\n  }, [machineSettings.fetchSettings]);\n\n  return <SettingList settingsState={machineSettings} onChange={onChange} />;\n}\n"],"names":["SettingsHeader","label","title","shorthand","subtitle","user","useUserState","navigate","useNavigate","jsxs","Group","Stack","jsx","StylishText","Text","isStaff","SegmentedControl","value","_i18n","_","id","SettingValue","setting","onEdit","onToggle","valueText","useMemo","choices","length","choice","find","c","display_name","units","modelInstance","setModelInstance","useState","editSetting","useCallback","read_only","toggleSetting","event","currentTarget","checked","modelType","model_name","model","split","ModelType","useEffect","endpoint","ModelInformationDict","api_endpoint","api","get","apiUrl","then","response","data","catch","error","RenderInstance","Button","key","IconEdit","type","Switch","toString","toLowerCase","paddingRight","Space","SettingItem","shaded","colorScheme","useMantineColorScheme","style","paddingLeft","vars","colors","gray","Paper","name","required","description","Boundary","SettingList","settingsState","keys","onChange","onLoaded","loaded","settings","useApi","allKeys","map","s","setSetting","undefined","fieldType","editSettingModal","useEditApiFormModal","url","pk","pathParams","fields","field_type","api_url","filters","model_filters","successMessage","values","onFormSuccess","fetchSettings","onValueEdit","open","onValueToggle","patch","notifications","hide","show","message","0","color","finally","isError","Alert","IconExclamationCircle","IconInfoCircle","Fragment","modal","i","console","React","fontStyle","_Trans","Skeleton","UserSettingList","userSettings","useUserSettingsState","GlobalSettingList","globalSettings","useGlobalSettingsState","PluginSettingList","pluginKey","store","createPluginSettingsState","plugin","ApiEndpoints","plugin_setting_list","pluginSettings","useStore","PluginUserSettingList","plugin_user_setting_list","pluginUserSettings","MachineSettingList","machinePk","configType","createMachineSettingsState","machine","machineSettings"],"mappings":"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"}