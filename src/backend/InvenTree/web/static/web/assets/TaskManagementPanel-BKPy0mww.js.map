{"version":3,"mappings":"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","names":["FailedTasksTable","onRecordsUpdated","table","useTable","user","useUserState","error","setError","useState","opened","open","close","useDisclosure","columns","useMemo","accessor","title","_i18n","_","id","sortable","switchable","jsxs","Fragment","jsx","Drawer","StylishText","split","map","line","index","Text","InvenTreeTable","apiUrl","ApiEndpoints","task_failed_list","enableBulkDelete","isStaff","afterBulkDelete","enableSelection","onRowClick","row","result","hideNotification","showNotification","message","color","icon","IconExclamationCircle","PendingTasksTable","tableActions","ActionButton","IconTrashXFilled","api","delete","task_pending_list","then","notifications","show","refreshTable","catch","err","response","data","non_field_errors","IconX","hasAddRole","UserRoles","admin","enableSearch","ScheduledTasksTable","Loadable","lazy","TaskManagementPanel","instance","taskInfo","refreshInstance","refreshTaskInfo","useInstance","endpoint","task_overview","hasPrimaryKey","refetchOnMount","defaultValue","updateInterval","is_running","Alert","errorCodeLink","Stack","FactCollection","value","pending_tasks","scheduled_tasks","failed_tasks","Divider","Accordion"],"ignoreList":[],"sources":["../../../../../../frontend/src/tables/settings/FailedTasksTable.tsx","../../../../../../frontend/src/tables/settings/PendingTasksTable.tsx","../../../../../../frontend/src/pages/Index/Settings/AdminCenter/TaskManagementPanel.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Drawer, Text } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { hideNotification, showNotification } from '@mantine/notifications';\nimport { IconExclamationCircle } from '@tabler/icons-react';\nimport { useMemo, useState } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { StylishText } from '../../components/items/StylishText';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport default function FailedTasksTable({\n  onRecordsUpdated\n}: Readonly<{\n  onRecordsUpdated: () => void;\n}>) {\n  const table = useTable('tasks-failed');\n  const user = useUserState();\n\n  const [error, setError] = useState<string>('');\n\n  const [opened, { open, close }] = useDisclosure(false);\n\n  const columns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'func',\n        title: t`Task`,\n        sortable: true,\n        switchable: false\n      },\n      {\n        accessor: 'pk',\n        title: t`Task ID`\n      },\n      {\n        accessor: 'started',\n        title: t`Started`,\n        sortable: true,\n        switchable: false\n      },\n      {\n        accessor: 'stopped',\n        title: t`Stopped`,\n        sortable: true,\n        switchable: false\n      },\n      {\n        accessor: 'attempt_count',\n        title: t`Attempts`\n      }\n    ];\n  }, []);\n\n  return (\n    <>\n      <Drawer\n        opened={opened}\n        size='xl'\n        position='right'\n        title={<StylishText>{t`Error Details`}</StylishText>}\n        onClose={close}\n      >\n        {error.split('\\n').map((line: string, index: number) => {\n          return (\n            <Text key={`error-${index}`} size='sm'>\n              {line}\n            </Text>\n          );\n        })}\n      </Drawer>\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.task_failed_list)}\n        tableState={table}\n        columns={columns}\n        props={{\n          enableBulkDelete: user.isStaff(),\n          afterBulkDelete: onRecordsUpdated,\n          enableSelection: true,\n          onRowClick: (row: any) => {\n            if (row.result) {\n              setError(row.result);\n              open();\n            } else {\n              hideNotification('failed-task');\n              showNotification({\n                id: 'failed-task',\n                title: t`No Information`,\n                message: t`No error details are available for this task`,\n                color: 'red',\n                icon: <IconExclamationCircle />\n              });\n            }\n          }\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { useMemo } from 'react';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { notifications, showNotification } from '@mantine/notifications';\nimport { IconTrashXFilled, IconX } from '@tabler/icons-react';\nimport { api } from '../../App';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport default function PendingTasksTable({\n  onRecordsUpdated\n}: Readonly<{\n  onRecordsUpdated: () => void;\n}>) {\n  const table = useTable('tasks-pending');\n  const user = useUserState();\n\n  const columns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'func',\n        title: t`Task`,\n        switchable: false\n      },\n      {\n        accessor: 'task_id',\n        title: t`Task ID`\n      },\n      {\n        accessor: 'name',\n        title: t`Name`\n      },\n      {\n        accessor: 'lock',\n        title: t`Created`,\n        sortable: false,\n        switchable: false\n      },\n      {\n        accessor: 'args',\n        title: t`Arguments`\n      },\n      {\n        accessor: 'kwargs',\n        title: t`Keywords`\n      }\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <ActionButton\n        key='remove-all'\n        icon={<IconTrashXFilled />}\n        tooltip={t`Remove all pending tasks`}\n        onClick={() => {\n          api\n            .delete(`${apiUrl(ApiEndpoints.task_pending_list)}?all=true`)\n            .then(() => {\n              notifications.show({\n                id: 'notes',\n                title: t`Success`,\n                message: t`All pending tasks deleted`,\n                color: 'green'\n              });\n              table.refreshTable();\n            })\n            .catch((err) => {\n              showNotification({\n                title: t`Error while deleting all pending tasks`,\n                message:\n                  err.response.data?.non_field_errors ??\n                  err.message ??\n                  t`Unknown error`,\n                color: 'red',\n                icon: <IconX />\n              });\n            });\n        }}\n        hidden={!user.hasAddRole(UserRoles.admin)}\n      />\n    ];\n  }, [user]);\n\n  return (\n    <InvenTreeTable\n      url={apiUrl(ApiEndpoints.task_pending_list)}\n      tableState={table}\n      columns={columns}\n      props={{\n        afterBulkDelete: onRecordsUpdated,\n        enableBulkDelete: user.isStaff(),\n        enableSelection: true,\n        enableSearch: false,\n        tableActions: tableActions\n      }}\n    />\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Accordion, Alert, Divider, Stack, Text } from '@mantine/core';\nimport { lazy } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { errorCodeLink } from '../../../../components/nav/Alerts';\nimport { FactCollection } from '../../../../components/settings/FactCollection';\nimport { Loadable } from '../../../../functions/loading';\nimport { useInstance } from '../../../../hooks/UseInstance';\nimport FailedTasksTable from '../../../../tables/settings/FailedTasksTable';\nimport PendingTasksTable from '../../../../tables/settings/PendingTasksTable';\n\nconst ScheduledTasksTable = Loadable(\n  lazy(() => import('../../../../tables/settings/ScheduledTasksTable'))\n);\n\nexport default function TaskManagementPanel() {\n  const { instance: taskInfo, refreshInstance: refreshTaskInfo } = useInstance({\n    endpoint: ApiEndpoints.task_overview,\n    hasPrimaryKey: false,\n    refetchOnMount: true,\n    defaultValue: {},\n    updateInterval: 30 * 1000\n  });\n\n  return (\n    <>\n      {taskInfo?.is_running == false && (\n        <Alert title={t`Background worker not running`} color='red'>\n          <Text>{t`The background task manager service is not running. Contact your system administrator.`}</Text>\n          {errorCodeLink('INVE-W5')}\n        </Alert>\n      )}\n      <Stack gap='xs'>\n        <FactCollection\n          items={[\n            { title: t`Pending Tasks`, value: taskInfo?.pending_tasks },\n            { title: t`Scheduled Tasks`, value: taskInfo?.scheduled_tasks },\n            { title: t`Failed Tasks`, value: taskInfo?.failed_tasks }\n          ]}\n        />\n        <Divider />\n        <Accordion defaultValue='pending'>\n          <Accordion.Item value='pending' key='pending-tasks'>\n            <Accordion.Control>\n              <StylishText size='lg'>{t`Pending Tasks`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <PendingTasksTable onRecordsUpdated={refreshTaskInfo} />\n            </Accordion.Panel>\n          </Accordion.Item>\n          <Accordion.Item value='scheduled' key='scheduled-tasks'>\n            <Accordion.Control>\n              <StylishText size='lg'>{t`Scheduled Tasks`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <ScheduledTasksTable />\n            </Accordion.Panel>\n          </Accordion.Item>\n          <Accordion.Item value='failed' key='failed-tasks'>\n            <Accordion.Control>\n              <StylishText size='lg'>{t`Failed Tasks`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <FailedTasksTable onRecordsUpdated={refreshTaskInfo} />\n            </Accordion.Panel>\n          </Accordion.Item>\n        </Accordion>\n      </Stack>\n    </>\n  );\n}\n"],"file":"assets/TaskManagementPanel-BKPy0mww.js"}