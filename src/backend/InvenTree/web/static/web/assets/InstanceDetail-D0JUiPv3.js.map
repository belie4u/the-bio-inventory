{"version":3,"file":"InstanceDetail-D0JUiPv3.js","sources":["../../../../../../frontend/src/components/details/Details.tsx","../../../../../../frontend/src/components/details/ItemDetails.tsx","../../../../../../frontend/src/components/errors/NotAuthenticated.tsx","../../../../../../frontend/src/components/errors/ClientError.tsx","../../../../../../frontend/src/components/errors/ServerError.tsx","../../../../../../frontend/src/components/nav/InstanceDetail.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport {\n  Anchor,\n  Avatar,\n  Badge,\n  Group,\n  HoverCard,\n  type MantineColor,\n  Paper,\n  Skeleton,\n  Stack,\n  Table,\n  Text\n} from '@mantine/core';\nimport { useQuery } from '@tanstack/react-query';\nimport { getValueAtPath } from 'mantine-datatable';\nimport { useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport { YesNoButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getBaseUrl, getDetailUrl } from '@lib/functions/Navigation';\nimport { navigateToLink } from '@lib/functions/Navigation';\nimport type { InvenTreeIconType } from '@lib/types/Icons';\nimport { useApi } from '../../contexts/ApiContext';\nimport { formatDate, formatDecimal } from '../../defaults/formatters';\nimport { InvenTreeIcon } from '../../functions/icons';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { CopyButton } from '../buttons/CopyButton';\nimport { StylishText } from '../items/StylishText';\nimport { getModelInfo } from '../render/ModelType';\nimport { StatusRenderer } from '../render/StatusRenderer';\n\nexport type DetailsField = {\n  hidden?: boolean;\n  icon?: keyof InvenTreeIconType;\n  name: string;\n  label?: string;\n  badge?: BadgeType;\n  copy?: boolean;\n  value_formatter?: () => ValueFormatterReturn;\n} & (\n  | NumberDetailField\n  | StringDetailField\n  | BooleanField\n  | LinkDetailField\n  | ProgressBarField\n  | StatusField\n);\n\ntype BadgeType = 'owner' | 'user' | 'group';\ntype ValueFormatterReturn = string | number | null | React.ReactNode;\n\ntype StringDetailField = {\n  type: 'string' | 'text' | 'date';\n  unit?: boolean;\n};\n\ntype NumberDetailField = {\n  type: 'number';\n  unit?: boolean;\n};\n\ntype BooleanField = {\n  type: 'boolean';\n};\n\ntype LinkDetailField = {\n  type: 'link';\n  link?: boolean;\n} & (InternalLinkField | ExternalLinkField);\n\ntype InternalLinkField = {\n  model: ModelType;\n  model_field?: string;\n  model_formatter?: (value: any) => string;\n  model_filters?: any;\n  backup_value?: string;\n};\n\ntype ExternalLinkField = {\n  external: true;\n};\n\ntype ProgressBarField = {\n  type: 'progressbar';\n  progress: number;\n  total: number;\n};\n\ntype StatusField = {\n  type: 'status';\n  model: ModelType;\n};\n\ntype FieldProps = {\n  field_data: any;\n  field_value: string | number;\n  unit?: string | null;\n};\n\nfunction HoverNameBadge(data: any, type: BadgeType) {\n  function lines(data: any) {\n    switch (type) {\n      case 'owner':\n        return [\n          `${data.label}: ${data.name}`,\n          data.name,\n          getDetailUrl(data.owner_model, data.pk, true),\n          undefined,\n          undefined\n        ];\n      case 'user':\n        return [\n          `${data.first_name} ${data.last_name}`,\n          data.username,\n          getDetailUrl(ModelType.user, data.pk, true),\n          data?.image,\n          <>\n            {data.is_superuser && <Badge color='red'>{t`Superuser`}</Badge>}\n            {data.is_staff && <Badge color='blue'>{t`Staff`}</Badge>}\n            {data.email && t`Email: ` + data.email}\n          </>\n        ];\n      case 'group':\n        return [\n          data.name,\n          data.name,\n          getDetailUrl(ModelType.group, data.pk, true),\n          data?.image,\n          undefined\n        ];\n      default:\n        return 'dd';\n    }\n  }\n  const line_data = lines(data);\n  return (\n    <HoverCard.Dropdown>\n      <Group>\n        <Avatar src={line_data[3]} radius='xl' />\n        <Stack gap={5}>\n          <Text size='sm' fw={700} style={{ lineHeight: 1 }}>\n            {line_data[0]}\n          </Text>\n          <Anchor\n            href={line_data[2]}\n            c='dimmed'\n            size='xs'\n            style={{ lineHeight: 1 }}\n          >\n            {line_data[1]}\n          </Anchor>\n        </Stack>\n      </Group>\n\n      <Text size='sm' mt='md'>\n        {line_data[4]}\n      </Text>\n    </HoverCard.Dropdown>\n  );\n}\n\n/**\n * Fetches user or group info from backend and formats into a badge.\n * Badge shows username, full name, or group name depending on server settings.\n * Badge appends icon to describe type of Owner\n */\nfunction NameBadge({\n  pk,\n  type\n}: Readonly<{ pk: string | number; type: BadgeType }>) {\n  const api = useApi();\n\n  const { data } = useQuery({\n    queryKey: ['badge', type, pk],\n    queryFn: async () => {\n      let path = '';\n\n      switch (type) {\n        case 'owner':\n          path = ApiEndpoints.owner_list;\n          break;\n        case 'user':\n          path = ApiEndpoints.user_list;\n          break;\n        case 'group':\n          path = ApiEndpoints.group_list;\n          break;\n        default:\n          return {};\n      }\n\n      const url = apiUrl(path, pk);\n\n      return api.get(url).then((response) => {\n        switch (response.status) {\n          case 200:\n            return response.data;\n          default:\n            return {};\n        }\n      });\n    }\n  });\n\n  const settings = useGlobalSettingsState();\n  const nameComp = useMemo(() => {\n    if (!data) return <Skeleton height={12} radius='md' />;\n    return HoverNameBadge(data, type);\n  }, [data]);\n\n  if (!data || data.isLoading || data.isFetching) {\n    return <Skeleton height={12} radius='md' />;\n  }\n\n  // Rendering a user's name for the badge\n  function _render_name() {\n    if (!data || !data.pk) {\n      return '';\n    } else if (type === 'user' && settings.isSet('DISPLAY_FULL_NAMES')) {\n      if (data.first_name || data.last_name) {\n        return `${data.first_name} ${data.last_name}`;\n      } else {\n        return data.username;\n      }\n    } else if (type === 'user') {\n      return data.username;\n    } else {\n      return data.name;\n    }\n  }\n\n  return (\n    <Group wrap='nowrap' gap='sm' justify='right'>\n      <Badge\n        color='dark'\n        variant='filled'\n        style={{ display: 'flex', alignItems: 'center' }}\n      >\n        <HoverCard\n          width={320}\n          shadow='md'\n          withArrow\n          openDelay={200}\n          closeDelay={400}\n        >\n          <HoverCard.Target>\n            <p>{data?.name ?? _render_name()}</p>\n          </HoverCard.Target>\n          {nameComp}\n        </HoverCard>\n      </Badge>\n      <InvenTreeIcon icon={type === 'user' ? type : data.label} />\n    </Group>\n  );\n}\n\nfunction DateValue(props: Readonly<FieldProps>) {\n  return <Text size='sm'>{formatDate(props.field_value?.toString())}</Text>;\n}\n\n// Return a formatted \"number\" value, with optional unit\nfunction NumberValue(props: Readonly<FieldProps>) {\n  const value = props?.field_value;\n\n  // Convert to double\n  const numberValue = Number.parseFloat(value.toString());\n\n  if (value === null || value === undefined) {\n    return <Text size='sm'>'---'</Text>;\n  }\n\n  return (\n    <Group wrap='nowrap' gap='xs' justify='left'>\n      <Text size='sm'>{formatDecimal(numberValue)}</Text>\n      {!!props.field_data?.unit && (\n        <Text size='xs'>[{props.field_data?.unit}]</Text>\n      )}\n    </Group>\n  );\n}\n\n/**\n * Renders the value of a 'string' or 'text' field.\n * If owner is defined, only renders a badge\n * If user is defined, a badge is rendered in addition to main value\n */\nfunction TableStringValue(props: Readonly<FieldProps>) {\n  const value = props?.field_value;\n\n  let renderedValue = null;\n\n  if (props.field_data?.badge) {\n    return <NameBadge pk={value} type={props.field_data.badge} />;\n  } else if (props?.field_data?.value_formatter) {\n    renderedValue = props.field_data.value_formatter();\n  } else if (value === null || value === undefined) {\n    renderedValue = <Text size='sm'>'---'</Text>;\n  } else {\n    renderedValue = <Text size='sm'>{value.toString()}</Text>;\n  }\n\n  return (\n    <Group wrap='nowrap' gap='xs' justify='space-apart'>\n      <Group wrap='nowrap' gap='xs' justify='left'>\n        {renderedValue}\n        {props.field_data.unit && <Text size='xs'>{props.unit}</Text>}\n      </Group>\n      {props.field_data.user && (\n        <NameBadge pk={props.field_data?.user} type='user' />\n      )}\n    </Group>\n  );\n}\n\nfunction BooleanValue(props: Readonly<FieldProps>) {\n  return <YesNoButton value={props.field_value} />;\n}\n\nfunction TableAnchorValue(props: Readonly<FieldProps>) {\n  const api = useApi();\n  const navigate = useNavigate();\n\n  const { data } = useQuery({\n    queryKey: ['detail', props.field_data.model, props.field_value],\n    queryFn: async () => {\n      if (!props.field_data?.model) {\n        return {};\n      }\n\n      const modelDef = getModelInfo(props.field_data.model);\n\n      if (!modelDef?.api_endpoint) {\n        return {};\n      }\n\n      const url = apiUrl(modelDef.api_endpoint, props.field_value);\n\n      return api\n        .get(url, {\n          params: props.field_data.model_filters ?? undefined\n        })\n        .then((response) => {\n          switch (response.status) {\n            case 200:\n              return response.data;\n            default:\n              return {};\n          }\n        });\n    }\n  });\n\n  const detailUrl = useMemo(() => {\n    return (\n      props?.field_data?.model &&\n      getDetailUrl(props.field_data.model, props.field_value)\n    );\n  }, [props.field_data.model, props.field_value]);\n\n  const handleLinkClick = useCallback(\n    (event: any) => {\n      navigateToLink(detailUrl, navigate, event);\n    },\n    [detailUrl]\n  );\n\n  const absoluteUrl = useMemo(() => {\n    return `/${getBaseUrl()}${detailUrl}`;\n  }, [detailUrl]);\n\n  if (!data || data.isLoading || data.isFetching) {\n    return <Skeleton height={12} radius='md' />;\n  }\n\n  if (props.field_data.external) {\n    return (\n      <Anchor\n        href={`${props.field_value}`}\n        target={'_blank'}\n        rel={'noreferrer noopener'}\n      >\n        <span style={{ display: 'flex', alignItems: 'center', gap: '3px' }}>\n          <Text>{props.field_value}</Text>\n          <InvenTreeIcon icon='external' iconProps={{ size: 15 }} />\n        </span>\n      </Anchor>\n    );\n  }\n\n  let make_link = props.field_data?.link ?? true;\n\n  // Construct the \"return value\" for the fetched data\n  let value = undefined;\n\n  if (props.field_data.model_formatter) {\n    value = props.field_data.model_formatter(data) ?? value;\n  } else if (props.field_data.model_field) {\n    value = data?.[props.field_data.model_field] ?? value;\n  } else {\n    value = data?.name;\n  }\n\n  let color: MantineColor | undefined = undefined;\n\n  if (value === undefined) {\n    value = data?.name ?? props.field_data?.backup_value ?? t`No name defined`;\n    make_link = false;\n    color = 'red';\n  }\n\n  return (\n    <>\n      {make_link ? (\n        <Anchor href={absoluteUrl} onClick={handleLinkClick}>\n          <Text>{value}</Text>\n        </Anchor>\n      ) : (\n        <Text c={color}>{value}</Text>\n      )}\n    </>\n  );\n}\n\nfunction ProgressBarValue(props: Readonly<FieldProps>) {\n  if (props.field_data.total <= 0) {\n    return <Text size='sm'>{props.field_data.progress}</Text>;\n  }\n\n  return (\n    <ProgressBar\n      size='lg'\n      value={props.field_data.progress}\n      maximum={props.field_data.total}\n      progressLabel\n    />\n  );\n}\n\nfunction StatusValue(props: Readonly<FieldProps>) {\n  return (\n    <StatusRenderer type={props.field_data.model} status={props.field_value} />\n  );\n}\n\nfunction CopyField({ value }: Readonly<{ value: string }>) {\n  return <CopyButton value={value} />;\n}\n\nexport function DetailsTableField({\n  item,\n  field\n}: Readonly<{\n  item: any;\n  field: DetailsField;\n}>) {\n  function getFieldType(type: string) {\n    switch (type) {\n      case 'boolean':\n        return BooleanValue;\n      case 'link':\n        return TableAnchorValue;\n      case 'progressbar':\n        return ProgressBarValue;\n      case 'status':\n        return StatusValue;\n      case 'date':\n        return DateValue;\n      case 'number':\n        return NumberValue;\n      case 'text':\n      case 'string':\n      default:\n        return TableStringValue;\n    }\n  }\n\n  const FieldType: any = getFieldType(field.type);\n\n  const fieldValue = useMemo(\n    () => getValueAtPath(item, field.name) as string,\n    [item, field.name]\n  );\n\n  return (\n    <Table.Tr style={{ verticalAlign: 'top' }}>\n      <Table.Td style={{ minWidth: 75, lineBreak: 'auto', flex: 2 }}>\n        <Group gap='xs' wrap='nowrap'>\n          <InvenTreeIcon\n            icon={field.icon ?? (field.name as keyof InvenTreeIconType)}\n          />\n          <Text style={{ paddingLeft: 10 }}>{field.label}</Text>\n        </Group>\n      </Table.Td>\n      <Table.Td\n        style={{\n          lineBreak: 'anywhere',\n          minWidth: 100,\n          flex: 10,\n          display: 'inline-block'\n        }}\n      >\n        <FieldType field_data={field} field_value={fieldValue} />\n      </Table.Td>\n      <Table.Td style={{ width: '50' }}>\n        {field.copy && <CopyField value={fieldValue} />}\n      </Table.Td>\n    </Table.Tr>\n  );\n}\n\nexport function DetailsTable({\n  item,\n  fields,\n  title\n}: Readonly<{\n  item: any;\n  fields: DetailsField[];\n  title?: string;\n}>) {\n  const visibleFields = useMemo(() => {\n    return fields.filter((field) => !field.hidden);\n  }, [fields]);\n\n  if (!visibleFields?.length) {\n    return <div />;\n  }\n\n  return (\n    <Paper\n      p='xs'\n      withBorder\n      style={{ overflowX: 'hidden', width: '100%', minWidth: 200 }}\n    >\n      <Stack gap='xs'>\n        {title && <StylishText size='lg'>{title}</StylishText>}\n        <Table striped verticalSpacing={5} horizontalSpacing='sm'>\n          <Table.Tbody>\n            {visibleFields.map((field: DetailsField, index: number) => (\n              <DetailsTableField field={field} item={item} key={index} />\n            ))}\n          </Table.Tbody>\n        </Table>\n      </Stack>\n    </Paper>\n  );\n}\n","import { Paper, SimpleGrid } from '@mantine/core';\nimport type React from 'react';\n\nexport function ItemDetailsGrid(props: React.PropsWithChildren<{}>) {\n  return (\n    <Paper p='xs'>\n      <SimpleGrid\n        cols={{ base: 1, '900px': 2 }}\n        type='container'\n        spacing='xs'\n        verticalSpacing='xs'\n      >\n        {props.children}\n      </SimpleGrid>\n    </Paper>\n  );\n}\n","import { t } from '@lingui/core/macro';\n\nimport GenericErrorPage from './GenericErrorPage';\n\nexport default function NotAuthenticated() {\n  return (\n    <GenericErrorPage\n      title={t`Not Authenticated`}\n      message={t`You are not logged in.`}\n    />\n  );\n}\n","import { t } from '@lingui/core/macro';\n\nimport GenericErrorPage from './GenericErrorPage';\nimport NotAuthenticated from './NotAuthenticated';\nimport NotFound from './NotFound';\nimport PermissionDenied from './PermissionDenied';\n\nexport default function ClientError({ status }: Readonly<{ status?: number }>) {\n  switch (status) {\n    case 401:\n      return <NotAuthenticated />;\n    case 403:\n      return <PermissionDenied />;\n    case 404:\n      return <NotFound />;\n    default:\n      break;\n  }\n\n  // Generic client error\n  return (\n    <GenericErrorPage\n      title={t`Client Error`}\n      message={t`Client error occurred`}\n      status={status}\n    />\n  );\n}\n","import { t } from '@lingui/core/macro';\n\nimport GenericErrorPage from './GenericErrorPage';\n\nexport default function ServerError({ status }: Readonly<{ status?: number }>) {\n  return (\n    <GenericErrorPage\n      title={t`Server Error`}\n      message={t`A server error occurred`}\n      status={status}\n    />\n  );\n}\n","import { Center, Container, Loader } from '@mantine/core';\n\nimport type { ModelType } from '@lib/enums/ModelType';\nimport type { UserRoles } from '@lib/enums/Roles';\nimport type { UseQueryResult } from '@tanstack/react-query';\nimport { useEffect, useState } from 'react';\nimport { useUserState } from '../../states/UserState';\nimport ClientError from '../errors/ClientError';\nimport PermissionDenied from '../errors/PermissionDenied';\nimport ServerError from '../errors/ServerError';\n\nexport default function InstanceDetail({\n  query,\n  children,\n  requiredRole,\n  requiredPermission\n}: Readonly<{\n  query: UseQueryResult;\n  children: React.ReactNode;\n  requiredRole?: UserRoles;\n  requiredPermission?: ModelType;\n}>) {\n  const user = useUserState();\n\n  const [loaded, setLoaded] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (query.isSuccess) {\n      setLoaded(true);\n    }\n  }, [query.isSuccess]);\n\n  if (query.isError) {\n    const reason = query.failureReason as any;\n    const statusCode = reason?.response?.status ?? reason?.status ?? 0;\n\n    if (statusCode >= 500) {\n      return <ServerError status={statusCode} />;\n    }\n\n    return <ClientError status={statusCode} />;\n  }\n\n  if (requiredRole && !user.hasViewRole(requiredRole)) {\n    return <PermissionDenied />;\n  }\n\n  if (requiredPermission && !user.hasViewPermission(requiredPermission)) {\n    return <PermissionDenied />;\n  }\n\n  if (!loaded || !user.isLoggedIn()) {\n    // Return a loader for the first page load\n    return (\n      <Center>\n        <Container>\n          <Loader />\n        </Container>\n      </Center>\n    );\n  }\n\n  return <>{children}</>;\n}\n"],"names":["HoverNameBadge","data","type","lines","label","name","getDetailUrl","owner_model","pk","undefined","first_name","last_name","username","ModelType","user","image","jsxs","Fragment","is_superuser","jsx","Badge","_i18n","_","id","is_staff","email","group","line_data","HoverCard","Group","Avatar","Stack","Text","lineHeight","Anchor","NameBadge","api","useApi","useQuery","queryKey","queryFn","path","ApiEndpoints","owner_list","user_list","group_list","url","apiUrl","get","then","response","status","settings","useGlobalSettingsState","nameComp","useMemo","Skeleton","isLoading","isFetching","_render_name","isSet","display","alignItems","InvenTreeIcon","DateValue","props","formatDate","field_value","toString","NumberValue","value","numberValue","Number","parseFloat","formatDecimal","field_data","unit","TableStringValue","renderedValue","badge","value_formatter","BooleanValue","YesNoButton","TableAnchorValue","navigate","useNavigate","model","modelDef","getModelInfo","api_endpoint","params","model_filters","detailUrl","handleLinkClick","useCallback","event","navigateToLink","absoluteUrl","getBaseUrl","external","gap","size","make_link","link","model_formatter","model_field","color","backup_value","ProgressBarValue","total","progress","ProgressBar","StatusValue","StatusRenderer","CopyField","CopyButton","DetailsTableField","item","field","getFieldType","FieldType","fieldValue","getValueAtPath","Table","verticalAlign","minWidth","lineBreak","flex","icon","paddingLeft","width","copy","DetailsTable","fields","title","visibleFields","filter","hidden","length","Paper","overflowX","StylishText","map","index","ItemDetailsGrid","SimpleGrid","base","children","NotAuthenticated","GenericErrorPage","ClientError","PermissionDenied","NotFound","ServerError","InstanceDetail","query","requiredRole","requiredPermission","useUserState","loaded","setLoaded","useState","useEffect","isSuccess","isError","reason","failureReason","statusCode","hasViewRole","hasViewPermission","isLoggedIn","Center","Container","Loader"],"mappings":"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"}