{"version":3,"file":"Alerts-CLrw5Hg_.js","sources":["../../../../../../frontend/src/components/nav/Alerts.tsx"],"sourcesContent":["import { ActionIcon, Alert, Group, Menu, Stack, Tooltip } from '@mantine/core';\nimport { IconExclamationCircle } from '@tabler/icons-react';\nimport { useMemo, useState } from 'react';\n\nimport { t } from '@lingui/core/macro';\nimport { useShallow } from 'zustand/react/shallow';\nimport { docLinks } from '../../defaults/links';\nimport { useServerApiState } from '../../states/ServerApiState';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\n\ninterface AlertInfo {\n  key: string;\n  title: string;\n  code?: string;\n  message: string;\n  error?: boolean;\n}\n\n/**\n * The `Alerts` component displays a menu of alerts for staff users based on the server state\n * and global settings. Alerts are shown as a dropdown menu with actionable items that can be dismissed.\n *\n * Dismissed alerts are filtered out and will not reappear in the current session.\n *\n * @returns A dropdown menu of alerts for staff users or `null` if there are no alerts or the user is not a staff member.\n */\nexport function Alerts() {\n  const user = useUserState();\n  const [server] = useServerApiState(useShallow((state) => [state.server]));\n  const globalSettings = useGlobalSettingsState();\n\n  const [dismissed, setDismissed] = useState<string[]>([]);\n\n  const alerts: AlertInfo[] = useMemo(() => {\n    const _alerts: AlertInfo[] = [];\n\n    if (server?.debug_mode) {\n      _alerts.push({\n        key: 'debug',\n        title: t`Debug Mode`,\n        code: 'INVE-W4',\n        message: t`The server is running in debug mode.`\n      });\n    }\n\n    if (!server?.worker_running) {\n      _alerts.push({\n        key: 'worker',\n        title: t`Background Worker`,\n        code: 'INVE-W5',\n        message: t`The background worker process is not running.`\n      });\n    }\n\n    if (!server?.email_configured) {\n      _alerts.push({\n        key: 'email',\n        title: t`Email settings`,\n        code: 'INVE-W7',\n        message: t`Email settings not configured.`\n      });\n    }\n\n    if (globalSettings.isSet('SERVER_RESTART_REQUIRED')) {\n      _alerts.push({\n        key: 'restart',\n        title: t`Server Restart`,\n        code: 'INVE-W6',\n        message: t`The server requires a restart to apply changes.`\n      });\n    }\n\n    const n_migrations =\n      Number.parseInt(globalSettings.getSetting('_PENDING_MIGRATIONS')) ?? 0;\n\n    if (n_migrations > 0) {\n      _alerts.push({\n        key: 'migrations',\n        title: t`Database Migrations`,\n        code: 'INVE-W8',\n        message: t`There are pending database migrations.`\n      });\n    }\n\n    return _alerts.filter((alert) => !dismissed.includes(alert.key));\n  }, [server, dismissed, globalSettings]);\n\n  const anyErrors: boolean = useMemo(\n    () => alerts.some((alert) => alert.error),\n    [alerts]\n  );\n\n  if (user.isStaff() && alerts.length > 0)\n    return (\n      <Menu withinPortal={true} position='bottom-end'>\n        <Menu.Target>\n          <Tooltip position='bottom-end' label={t`Alerts`}>\n            <ActionIcon\n              variant='transparent'\n              aria-label='open-alerts'\n              color={anyErrors ? 'red' : 'orange'}\n            >\n              <IconExclamationCircle />\n            </ActionIcon>\n          </Tooltip>\n        </Menu.Target>\n        <Menu.Dropdown>\n          {alerts.map((alert) => (\n            <Menu.Item key={`alert-item-${alert.key}`}>\n              <Alert\n                withCloseButton\n                color={alert.error ? 'red' : 'orange'}\n                title={\n                  <Group gap='xs'>\n                    {alert.code && `${alert.code}: `}\n                    {alert.title}\n                  </Group>\n                }\n                onClose={() => setDismissed([...dismissed, alert.key])}\n              >\n                <Stack gap='xs'>\n                  {alert.message}\n                  {alert.code && errorCodeLink(alert.code)}\n                </Stack>\n              </Alert>\n            </Menu.Item>\n          ))}\n        </Menu.Dropdown>\n      </Menu>\n    );\n  return null;\n}\nexport function errorCodeLink(code: string) {\n  return (\n    <a\n      href={`${docLinks.errorcodes}#${code.toLowerCase()}`}\n      target='_blank'\n      rel='noreferrer'\n    >\n      {t`Learn more about ${code}`}\n    </a>\n  );\n}\n"],"names":["Alerts","user","useUserState","server","useServerApiState","useShallow","state","globalSettings","useGlobalSettingsState","dismissed","setDismissed","useState","alerts","useMemo","_alerts","debug_mode","push","key","title","_i18n","_","id","code","message","worker_running","email_configured","isSet","Number","parseInt","getSetting","filter","alert","includes","anyErrors","some","error","isStaff","length","jsxs","Menu","jsx","Tooltip","ActionIcon","IconExclamationCircle","map","Alert","Group","Stack","errorCodeLink","docLinks","errorcodes","toLowerCase","values"],"mappings":"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"}