{"version":3,"file":"CompanyTable-CCQcsELm.js","sources":["../../../../../../frontend/src/tables/company/CompanyTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { type RowAction, RowEditAction } from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { navigateToLink } from '@lib/functions/Navigation';\nimport type { TableFilter } from '@lib/types/Filters';\nimport { companyFields } from '../../forms/CompanyForms';\nimport {\n  useCreateApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport {\n  BooleanColumn,\n  CompanyColumn,\n  DescriptionColumn\n} from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\n/**\n * A table which displays a list of company records,\n * based on the provided filter parameters\n */\nexport function CompanyTable({\n  params,\n  path\n}: Readonly<{\n  params?: any;\n  path?: string;\n}>) {\n  const table = useTable('company');\n\n  const navigate = useNavigate();\n  const user = useUserState();\n\n  const columns = useMemo(() => {\n    return [\n      {\n        accessor: 'name',\n        title: t`Company`,\n        sortable: true,\n        switchable: false,\n        render: (record: any) => {\n          return <CompanyColumn company={record} />;\n        }\n      },\n      DescriptionColumn({}),\n      BooleanColumn({\n        accessor: 'active',\n        title: t`Active`,\n        sortable: true,\n        switchable: true\n      }),\n      {\n        accessor: 'website',\n        sortable: false\n      }\n    ];\n  }, []);\n\n  const newCompany = useCreateApiFormModal({\n    url: ApiEndpoints.company_list,\n    title: t`Add Company`,\n    fields: companyFields(),\n    initialData: params,\n    follow: true,\n    modelType: ModelType.company\n  });\n\n  const [selectedCompany, setSelectedCompany] = useState<number>(0);\n\n  const editCompany = useEditApiFormModal({\n    url: ApiEndpoints.company_list,\n    pk: selectedCompany,\n    title: t`Edit Company`,\n    fields: companyFields(),\n    onFormSuccess: (record: any) => table.updateRecord(record)\n  });\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'active',\n        label: t`Active`,\n        description: t`Show active companies`\n      },\n      {\n        name: 'is_supplier',\n        label: t`Supplier`,\n        description: t`Show companies which are suppliers`\n      },\n      {\n        name: 'is_manufacturer',\n        label: t`Manufacturer`,\n        description: t`Show companies which are manufacturers`\n      },\n      {\n        name: 'is_customer',\n        label: t`Customer`,\n        description: t`Show companies which are customers`\n      }\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    const can_add =\n      user.hasAddRole(UserRoles.purchase_order) ||\n      user.hasAddRole(UserRoles.sales_order);\n\n    return [\n      <AddItemButton\n        key='add-company'\n        tooltip={t`Add Company`}\n        onClick={() => newCompany.open()}\n        hidden={!can_add}\n      />\n    ];\n  }, [user]);\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      return [\n        RowEditAction({\n          hidden:\n            !user.hasChangeRole(UserRoles.purchase_order) &&\n            !user.hasChangeRole(UserRoles.sales_order),\n          onClick: () => {\n            setSelectedCompany(record.pk);\n            editCompany.open();\n          }\n        })\n      ];\n    },\n    [user]\n  );\n\n  return (\n    <>\n      {newCompany.modal}\n      {editCompany.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.company_list)}\n        tableState={table}\n        columns={columns}\n        props={{\n          params: {\n            ...params\n          },\n          onRowClick: (record: any, index: number, event: any) => {\n            if (record.pk) {\n              const base = path ?? 'company';\n              navigateToLink(`/${base}/${record.pk}`, navigate, event);\n            }\n          },\n          modelType: ModelType.company,\n          tableFilters: tableFilters,\n          tableActions: tableActions,\n          enableDownload: true,\n          enableSelection: true,\n          enableReports: true,\n          rowActions: rowActions\n        }}\n      />\n    </>\n  );\n}\n"],"names":["CompanyTable","params","path","table","useTable","navigate","useNavigate","user","useUserState","columns","useMemo","accessor","title","_i18n","_","id","sortable","switchable","render","record","jsx","CompanyColumn","DescriptionColumn","BooleanColumn","newCompany","useCreateApiFormModal","url","ApiEndpoints","company_list","fields","companyFields","initialData","follow","modelType","ModelType","company","selectedCompany","setSelectedCompany","useState","editCompany","useEditApiFormModal","pk","onFormSuccess","updateRecord","tableFilters","name","label","description","tableActions","can_add","hasAddRole","UserRoles","purchase_order","sales_order","AddItemButton","open","rowActions","useCallback","RowEditAction","hidden","hasChangeRole","onClick","jsxs","Fragment","modal","InvenTreeTable","apiUrl","onRowClick","index","event","navigateToLink","enableDownload","enableSelection","enableReports"],"mappings":"uZA8BO,SAASA,EAAa,CAC3BC,OAAAA,EACAC,KAAAA,CAID,EAAG,CACF,MAAMC,EAAQC,EAAS,SAAS,EAE1BC,EAAWC,EAAAA,EACXC,EAAOC,EAAAA,EAEPC,EAAUC,EAAAA,QAAQ,IACf,CACL,CACEC,SAAU,OACVC,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAS,EAChBC,SAAU,GACVC,WAAY,GACZC,OAASC,GACAC,EAAAA,IAACC,EAAA,CAAc,QAASF,CAAAA,CAAO,CACxC,EAEFG,EAAkB,EAAE,EACpBC,EAAc,CACZZ,SAAU,SACVC,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAQ,EACfC,SAAU,GACVC,WAAY,EAAA,CACb,EACD,CACEN,SAAU,UACVK,SAAU,EAAA,CACX,EAEF,CAAA,CAAE,EAECQ,EAAaC,EAAsB,CACvCC,IAAKC,EAAaC,aAClBhB,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpBc,OAAQC,EAAAA,EACRC,YAAa9B,EACb+B,OAAQ,GACRC,UAAWC,EAAUC,OAAAA,CACtB,EAEK,CAACC,EAAiBC,CAAkB,EAAIC,EAAAA,SAAiB,CAAC,EAE1DC,EAAcC,EAAoB,CACtCd,IAAKC,EAAaC,aAClBa,GAAIL,EACJxB,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrBc,OAAQC,EAAAA,EACRY,cAAgBvB,GAAgBhB,EAAMwC,aAAaxB,CAAM,CAAA,CAC1D,EAEKyB,EAA8BlC,EAAAA,QAAQ,IACnC,CACL,CACEmC,KAAM,SACNC,MAAKjC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAQ,EACfgC,YAAWlC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAuB,CAAC,EAEvC,CACE8B,KAAM,cACNC,MAAKjC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAU,EACjBgC,YAAWlC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAoC,CAAC,EAEpD,CACE8B,KAAM,kBACNC,MAAKjC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAc,EACrBgC,YAAWlC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAwC,CAAC,EAExD,CACE8B,KAAM,cACNC,MAAKjC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAU,EACjBgC,YAAWlC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAoC,CAAC,CACnD,EAEF,CAAA,CAAE,EAECiC,EAAetC,EAAAA,QAAQ,IAAM,CACjC,MAAMuC,EACJ1C,EAAK2C,WAAWC,EAAUC,cAAc,GACxC7C,EAAK2C,WAAWC,EAAUE,WAAW,EAEvC,MAAO,CACLjC,EAAAA,IAACkC,EAAA,CAEC,QAAQzC,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAa,EACtB,QAAS,IAAMS,EAAW+B,KAAAA,EAC1B,OAAQ,CAACN,GAHL,cAIJ,CAEN,EAAG,CAAC1C,CAAI,CAAC,EAEHiD,EAAaC,cAChBtC,GACQ,CACLuC,EAAc,CACZC,OACE,CAACpD,EAAKqD,cAAcT,EAAUC,cAAc,GAC5C,CAAC7C,EAAKqD,cAAcT,EAAUE,WAAW,EAC3CQ,QAASA,IAAM,CACbxB,EAAmBlB,EAAOsB,EAAE,EAC5BF,EAAYgB,KAAAA,CACd,CAAA,CACD,CAAC,EAGN,CAAChD,CAAI,CACP,EAEA,OACEuD,EAAAA,KAAAC,WAAA,CACGvC,SAAAA,CAAAA,EAAWwC,MACXzB,EAAYyB,MACb5C,EAAAA,IAAC6C,EAAA,CACC,IAAKC,EAAOvC,EAAaC,YAAY,EACrC,WAAYzB,EACZ,QAAAM,EACA,MAAO,CACLR,OAAQ,CACN,GAAGA,CAAAA,EAELkE,WAAYA,CAAChD,EAAaiD,EAAeC,IAAe,CAClDlD,EAAOsB,IAET6B,EAAe,IADFpE,GAAQ,SACE,IAAIiB,EAAOsB,EAAE,GAAIpC,EAAUgE,CAAK,CAE3D,EACApC,UAAWC,EAAUC,QACrBS,aAAAA,EACAI,aAAAA,EACAuB,eAAgB,GAChBC,gBAAiB,GACjBC,cAAe,GACfjB,WAAAA,CAAAA,CACF,CAAE,CAAA,EAEN,CAEJ"}