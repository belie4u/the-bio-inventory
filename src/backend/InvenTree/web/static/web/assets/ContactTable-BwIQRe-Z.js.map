{"version":3,"file":"ContactTable-BwIQRe-Z.js","sources":["../../../../../../frontend/src/tables/company/ContactTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { useNavigate } from 'react-router-dom';\nimport { RenderInlineModel } from '../../components/render/Instance';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport function ContactTable({\n  companyId,\n  params\n}: Readonly<{\n  companyId?: number;\n  params?: any;\n}>) {\n  const user = useUserState();\n  const navigate = useNavigate();\n\n  const table = useTable('contact');\n\n  const columns: TableColumn[] = useMemo(() => {\n    const corecols: TableColumn[] = [\n      {\n        accessor: 'name',\n        sortable: true,\n        switchable: false\n      },\n      {\n        accessor: 'phone',\n        switchable: true,\n        sortable: false\n      },\n      {\n        accessor: 'email',\n        switchable: true,\n        sortable: false\n      },\n      {\n        accessor: 'role',\n        switchable: true,\n        sortable: false\n      }\n    ];\n    if (companyId === undefined) {\n      // Add company column if not in company detail view\n      corecols.unshift({\n        accessor: 'company_name',\n        title: t`Company`,\n        sortable: false,\n        switchable: true,\n        render: (record: any) => {\n          return (\n            <RenderInlineModel\n              primary={record.company_name}\n              url={getDetailUrl(ModelType.company, record.company)}\n              navigate={navigate}\n            />\n          );\n        }\n      });\n    }\n    return corecols;\n  }, []);\n\n  const contactFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      company: {},\n      name: {},\n      phone: {},\n      email: {},\n      role: {}\n    };\n  }, []);\n\n  const [selectedContact, setSelectedContact] = useState<number>(0);\n\n  const editContact = useEditApiFormModal({\n    url: ApiEndpoints.contact_list,\n    pk: selectedContact,\n    title: t`Edit Contact`,\n    fields: contactFields,\n    onFormSuccess: (record: any) => table.updateRecord(record)\n  });\n\n  const newContact = useCreateApiFormModal({\n    url: ApiEndpoints.contact_list,\n    title: t`Add Contact`,\n    initialData: {\n      company: companyId\n    },\n    fields: contactFields,\n    table: table\n  });\n\n  const deleteContact = useDeleteApiFormModal({\n    url: ApiEndpoints.contact_list,\n    pk: selectedContact,\n    title: t`Delete Contact`,\n    table: table\n  });\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const can_edit =\n        user.hasChangeRole(UserRoles.purchase_order) ||\n        user.hasChangeRole(UserRoles.sales_order);\n      const can_delete =\n        user.hasDeleteRole(UserRoles.purchase_order) ||\n        user.hasDeleteRole(UserRoles.sales_order);\n\n      return [\n        RowEditAction({\n          hidden: !can_edit,\n          onClick: () => {\n            setSelectedContact(record.pk);\n            editContact.open();\n          }\n        }),\n        RowDeleteAction({\n          hidden: !can_delete,\n          onClick: () => {\n            setSelectedContact(record.pk);\n            deleteContact.open();\n          }\n        })\n      ];\n    },\n    [user]\n  );\n\n  const tableActions = useMemo(() => {\n    const can_add =\n      user.hasAddRole(UserRoles.purchase_order) ||\n      user.hasAddRole(UserRoles.sales_order);\n\n    return [\n      <AddItemButton\n        key='add-contact'\n        tooltip={t`Add contact`}\n        onClick={() => newContact.open()}\n        hidden={!can_add}\n      />\n    ];\n  }, [user]);\n\n  return (\n    <>\n      {newContact.modal}\n      {editContact.modal}\n      {deleteContact.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.contact_list)}\n        tableState={table}\n        columns={columns}\n        props={{\n          enableDownload: true,\n          rowActions: rowActions,\n          tableActions: tableActions,\n          params: {\n            ...params,\n            company: companyId\n          }\n        }}\n      />\n    </>\n  );\n}\n"],"names":["ContactTable","companyId","params","user","useUserState","navigate","useNavigate","table","useTable","columns","useMemo","corecols","accessor","sortable","switchable","undefined","unshift","title","_i18n","_","id","render","record","jsx","RenderInlineModel","company_name","getDetailUrl","ModelType","company","contactFields","name","phone","email","role","selectedContact","setSelectedContact","useState","editContact","useEditApiFormModal","url","ApiEndpoints","contact_list","pk","fields","onFormSuccess","updateRecord","newContact","useCreateApiFormModal","initialData","deleteContact","useDeleteApiFormModal","rowActions","useCallback","can_edit","hasChangeRole","UserRoles","purchase_order","sales_order","can_delete","hasDeleteRole","RowEditAction","hidden","onClick","open","RowDeleteAction","tableActions","can_add","hasAddRole","AddItemButton","jsxs","Fragment","modal","InvenTreeTable","apiUrl","enableDownload"],"mappings":"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"}