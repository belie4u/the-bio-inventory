{"version":3,"file":"EmailManagementPanel-BbROL0iA.js","sources":["../../../../../../frontend/src/components/settings/ConfigValueList.tsx","../../../../../../frontend/src/tables/settings/EmailTable.tsx","../../../../../../frontend/src/pages/Index/Settings/AdminCenter/EmailManagementPanel.tsx"],"sourcesContent":["import { Table } from '@mantine/core';\n\nimport { ApiEndpoints, apiUrl } from '@lib/index';\nimport { Trans } from '@lingui/react/macro';\nimport { useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\nimport { api } from '../../App';\nimport { formatDate } from '../../defaults/formatters';\n\nexport function ConfigValueList({ keys }: Readonly<{ keys: string[] }>) {\n  const { data, isLoading } = useQuery({\n    queryKey: ['config'],\n    queryFn: async () => {\n      return api.get(apiUrl(ApiEndpoints.config_list)).then((res) => {\n        return res.data;\n      });\n    }\n  });\n\n  const totalData = useMemo(() => {\n    if (!data) return [];\n    return keys.map((key) => {\n      return {\n        key: key,\n        value: data.find((item: any) => item.key === key)\n      };\n    });\n  }, [isLoading, data, keys]);\n\n  return (\n    <span>\n      <Table withColumnBorders withTableBorder striped>\n        <Table.Thead>\n          <Table.Tr>\n            <Table.Th>\n              <Trans>Setting</Trans>\n            </Table.Th>\n            <Table.Th>\n              <Trans>Source</Trans>\n            </Table.Th>\n            <Table.Th>\n              <Trans>Updated</Trans>\n            </Table.Th>\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>\n          {totalData.map((vals) => (\n            <Table.Tr key={vals.key}>\n              <Table.Td>{vals.key}</Table.Td>\n              <Table.Td>{vals.value?.source}</Table.Td>\n              <Table.Td>\n                {formatDate(vals.value?.accessed, { showTime: true })}\n              </Table.Td>\n            </Table.Tr>\n          ))}\n        </Table.Tbody>\n      </Table>\n    </span>\n  );\n}\n","import { ActionButton } from '@lib/components/ActionButton';\nimport { RowDeleteAction } from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { t } from '@lingui/core/macro';\nimport { ActionIcon, Alert, Badge, Group, HoverCard } from '@mantine/core';\nimport { IconExclamationCircle, IconTestPipe } from '@tabler/icons-react';\nimport { type ReactNode, useCallback, useMemo, useState } from 'react';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { DateColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nfunction EmailStatusBadge({\n  status\n}: {\n  status: any;\n}): ReactNode {\n  switch (status) {\n    case 'A':\n      return <Badge color='blue'>{t`Announced`}</Badge>;\n    case 'S':\n      return <Badge color='blue'>{t`Sent`}</Badge>;\n    case 'F':\n      return <Badge color='red'>{t`Failed`}</Badge>;\n    case 'D':\n      return <Badge color='green'>{t`Delivered`}</Badge>;\n    case 'R':\n      return <Badge color='green'>{t`Read`}</Badge>;\n    case 'C':\n      return <Badge color='green'>{t`Confirmed`}</Badge>;\n  }\n  return '-';\n}\n\nexport function EmailTable() {\n  const sendTestMail = useCreateApiFormModal({\n    url: ApiEndpoints.email_test,\n    title: t`Send Test Email`,\n    fields: { email: {} },\n    successMessage: t`Email sent successfully`,\n    onFormSuccess: (data: any) => {\n      table.refreshTable();\n    }\n  });\n\n  const user = useUserState();\n\n  const tableActions = useMemo(() => {\n    return [\n      <ActionButton\n        icon={<IconTestPipe />}\n        key={'test'}\n        tooltip={t`Send Test Email`}\n        onClick={() => sendTestMail.open()}\n      />\n    ];\n  }, []);\n\n  const table = useTable('emails', 'pk');\n\n  const [selectedEmailId, setSelectedEmailId] = useState<string>('');\n\n  const deleteEmail = useDeleteApiFormModal({\n    url: ApiEndpoints.email_list,\n    pk: selectedEmailId,\n    title: t`Delete Email`,\n    successMessage: t`Email deleted successfully`,\n    table: table\n  });\n\n  const tableColumns = useMemo(() => {\n    return [\n      {\n        accessor: 'subject',\n        title: t`Subject`,\n        sortable: true\n      },\n      {\n        accessor: 'to',\n        title: t`To`,\n        sortable: true\n      },\n      {\n        accessor: 'sender',\n        title: t`Sender`,\n        sortable: true\n      },\n      {\n        accessor: 'status',\n        title: t`Status`,\n        sortable: true,\n        render: (record: any) => {\n          return (\n            <Group justify='space-between'>\n              <EmailStatusBadge status={record.status} />\n              {record.error_message && (\n                <HoverCard>\n                  <HoverCard.Target>\n                    <ActionIcon color='red' variant='transparent' size='sm'>\n                      <IconExclamationCircle />\n                    </ActionIcon>\n                  </HoverCard.Target>\n                  <HoverCard.Dropdown>\n                    <Alert color='red' title={t`Error`}>\n                      {record.error_message}\n                    </Alert>\n                  </HoverCard.Dropdown>\n                </HoverCard>\n              )}\n            </Group>\n          );\n        },\n        switchable: true\n      },\n      {\n        accessor: 'direction',\n        title: t`Direction`,\n        sortable: true,\n        render: (record: any) => {\n          return record.direction === 'incoming' ? t`Incoming` : t`Outgoing`;\n        },\n        switchable: true\n      },\n      DateColumn({\n        accessor: 'timestamp',\n        title: t`Timestamp`,\n        sortable: true,\n        switchable: true,\n        extra: { showTime: true }\n      })\n    ];\n  }, []);\n\n  const rowactions = useCallback(\n    (record: any) => {\n      return [\n        RowDeleteAction({\n          onClick: () => {\n            setSelectedEmailId(record.pk);\n            deleteEmail.open();\n          },\n          hidden: !user.isStaff()\n        })\n      ];\n    },\n    [user]\n  );\n\n  return (\n    <>\n      {sendTestMail.modal}\n      {deleteEmail.modal}\n      <InvenTreeTable\n        tableState={table}\n        url={apiUrl(ApiEndpoints.email_list)}\n        columns={tableColumns}\n        props={{\n          rowActions: rowactions,\n          enableSearch: true,\n          enableColumnSwitching: true,\n          enableSelection: true,\n          enableBulkDelete: true,\n          tableActions: tableActions\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Accordion } from '@mantine/core';\n\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { ConfigValueList } from '../../../../components/settings/ConfigValueList';\nimport { EmailTable } from '../../../../tables/settings/EmailTable';\n\nexport default function UserManagementPanel() {\n  return (\n    <Accordion multiple defaultValue={['emails']}>\n      <Accordion.Item value='emails' key='emails'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Email Messages`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <EmailTable />\n        </Accordion.Panel>\n      </Accordion.Item>\n      <Accordion.Item value='settings' key='settings'>\n        <Accordion.Control>\n          <StylishText size='lg'>{t`Settings`}</StylishText>\n        </Accordion.Control>\n        <Accordion.Panel>\n          <ConfigValueList\n            key='email_settings'\n            keys={[\n              'INVENTREE_EMAIL_BACKEND',\n              'INVENTREE_EMAIL_HOST',\n              'INVENTREE_EMAIL_PORT',\n              'INVENTREE_EMAIL_USERNAME',\n              'INVENTREE_EMAIL_PASSWORD',\n              'INVENTREE_EMAIL_PREFIX',\n              'INVENTREE_EMAIL_TLS',\n              'INVENTREE_EMAIL_SSL',\n              'INVENTREE_EMAIL_SENDER'\n            ]}\n          />\n        </Accordion.Panel>\n      </Accordion.Item>\n    </Accordion>\n  );\n}\n"],"names":["ConfigValueList","keys","data","isLoading","useQuery","queryKey","queryFn","api","get","apiUrl","ApiEndpoints","config_list","then","res","totalData","useMemo","map","key","value","find","item","jsx","jsxs","Table","_Trans","id","vals","source","formatDate","accessed","showTime","EmailStatusBadge","status","Badge","_i18n","_","EmailTable","sendTestMail","useCreateApiFormModal","url","email_test","title","fields","email","successMessage","onFormSuccess","table","refreshTable","user","useUserState","tableActions","ActionButton","IconTestPipe","open","useTable","selectedEmailId","setSelectedEmailId","useState","deleteEmail","useDeleteApiFormModal","email_list","pk","tableColumns","accessor","sortable","render","record","Group","error_message","HoverCard","ActionIcon","IconExclamationCircle","Alert","switchable","direction","DateColumn","extra","rowactions","useCallback","RowDeleteAction","onClick","hidden","isStaff","Fragment","modal","InvenTreeTable","rowActions","enableSearch","enableColumnSwitching","enableSelection","enableBulkDelete","UserManagementPanel","Accordion","StylishText"],"mappings":"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"}