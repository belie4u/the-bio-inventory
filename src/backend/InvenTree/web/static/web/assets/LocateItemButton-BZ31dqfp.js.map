{"version":3,"file":"LocateItemButton-BZ31dqfp.js","sources":["../../../../../../frontend/src/hooks/UsePlugins.tsx","../../../../../../frontend/src/components/plugins/LocateItemButton.tsx"],"sourcesContent":["import { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { useCallback } from 'react';\nimport type { PluginInterface } from '../components/plugins/PluginInterface';\nimport { useInstance } from './UseInstance';\n\nexport interface UsePluginResult {\n  plugins: PluginInterface[];\n  withMixin: (mixin: string) => PluginInterface[];\n}\n\n/**\n * Hook for storing information on active plugins\n */\nexport const usePlugins = (): UsePluginResult => {\n  const pluginQuery = useInstance({\n    endpoint: ApiEndpoints.plugin_list,\n    defaultValue: [],\n    hasPrimaryKey: false,\n    refetchOnMount: true,\n    refetchOnWindowFocus: false,\n    params: {\n      active: true\n    }\n  });\n\n  const pluginsWithMixin = useCallback(\n    (mixin: string) => {\n      return pluginQuery.instance.filter((plugin: PluginInterface) => {\n        return !!plugin.mixins[mixin];\n      });\n    },\n    [pluginQuery.instance]\n  );\n\n  return {\n    plugins: pluginQuery.instance,\n    withMixin: pluginsWithMixin\n  };\n};\n\nexport const usePluginsWithMixin = (mixin: string): PluginInterface[] => {\n  const plugins = usePlugins();\n\n  return plugins.withMixin(mixin);\n};\n","import { ActionButton } from '@lib/components/ActionButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport { t } from '@lingui/core/macro';\nimport { IconRadar } from '@tabler/icons-react';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { usePluginsWithMixin } from '../../hooks/UsePlugins';\nimport type { PluginInterface } from './PluginInterface';\n\nexport default function LocateItemButton({\n  stockId,\n  locationId\n}: Readonly<{\n  stockId?: number;\n  locationId?: number;\n}>) {\n  const locatePlugins = usePluginsWithMixin('locate');\n\n  const [selectedPlugin, setSelectedPlugin] = useState<string | undefined>(\n    undefined\n  );\n\n  useEffect(() => {\n    // Ensure that the selected plugin is in the list of available plugins\n    if (selectedPlugin && locatePlugins) {\n      const plugin = locatePlugins.find(\n        (plugin: PluginInterface) => plugin.key === selectedPlugin\n      );\n      if (!plugin) {\n        setSelectedPlugin(undefined);\n      }\n    } else {\n      setSelectedPlugin(locatePlugins[0]?.key ?? undefined);\n    }\n  }, [selectedPlugin, locatePlugins]);\n\n  const locateFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      plugin: {\n        field_type: 'choice',\n        value: selectedPlugin,\n        onValueChange: (value: string) => {\n          setSelectedPlugin(value);\n        },\n        choices: locatePlugins.map((plugin: PluginInterface) => {\n          return {\n            value: plugin.key,\n            display_name: plugin.meta?.human_name ?? plugin.name\n          };\n        })\n      },\n      item: {\n        hidden: true,\n        value: stockId\n      },\n      location: {\n        hidden: true,\n        value: locationId\n      }\n    };\n  }, [stockId, locationId, locatePlugins]);\n\n  const locateForm = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.plugin_locate_item),\n    method: 'POST',\n    title: t`Locate Item`,\n    fields: locateFields,\n    successMessage: t`Item location requested`\n  });\n\n  if (!locatePlugins || locatePlugins.length === 0) {\n    return null;\n  }\n\n  if (!stockId && !locationId) {\n    return null;\n  }\n\n  return (\n    <>\n      {locateForm.modal}\n      <ActionButton\n        icon={<IconRadar />}\n        variant='outline'\n        size='lg'\n        tooltip={t`Locate Item`}\n        onClick={locateForm.open}\n        tooltipAlignment='bottom'\n      />\n    </>\n  );\n}\n"],"names":["usePlugins","pluginQuery","useInstance","endpoint","ApiEndpoints","plugin_list","defaultValue","hasPrimaryKey","refetchOnMount","refetchOnWindowFocus","params","active","pluginsWithMixin","useCallback","mixin","instance","filter","plugin","mixins","plugins","withMixin","usePluginsWithMixin","LocateItemButton","stockId","locationId","locatePlugins","selectedPlugin","setSelectedPlugin","useState","undefined","useEffect","find","key","locateFields","useMemo","field_type","value","onValueChange","choices","map","display_name","meta","human_name","name","item","hidden","location","locateForm","useCreateApiFormModal","url","apiUrl","plugin_locate_item","method","title","_i18n","_","id","fields","successMessage","length","jsxs","Fragment","modal","jsx","ActionButton","IconRadar","open"],"mappings":"qPAaO,MAAMA,EAAaA,IAAuB,CAC/C,MAAMC,EAAcC,EAAY,CAC9BC,SAAUC,EAAaC,YACvBC,aAAc,CAAA,EACdC,cAAe,GACfC,eAAgB,GAChBC,qBAAsB,GACtBC,OAAQ,CACNC,OAAQ,EAAA,CACV,CACD,EAEKC,EAAmBC,cACtBC,GACQb,EAAYc,SAASC,OAAQC,GAC3B,CAAC,CAACA,EAAOC,OAAOJ,CAAK,CAC7B,EAEH,CAACb,EAAYc,QAAQ,CACvB,EAEA,MAAO,CACLI,QAASlB,EAAYc,SACrBK,UAAWR,CAAAA,CAEf,EAEaS,EAAuBP,GAClBd,EAAAA,EAEDoB,UAAUN,CAAK,EChChC,SAAwBQ,EAAiB,CACvCC,QAAAA,EACAC,WAAAA,CAID,EAAG,CACF,MAAMC,EAAgBJ,EAAoB,QAAQ,EAE5C,CAACK,EAAgBC,CAAiB,EAAIC,EAAAA,SAC1CC,MACF,EAEAC,EAAAA,UAAU,IAAM,OAEVJ,GAAkBD,EACLA,EAAcM,KAC1Bd,GAA4BA,EAAOe,MAAQN,CAC9C,GAEEC,EAAkBE,MAAS,EAG7BF,IAAkBF,EAAAA,EAAc,CAAC,IAAfA,YAAAA,EAAkBO,MAAOH,MAAS,CAExD,EAAG,CAACH,EAAgBD,CAAa,CAAC,EAElC,MAAMQ,EAAgCC,EAAAA,QAAQ,KACrC,CACLjB,OAAQ,CACNkB,WAAY,SACZC,MAAOV,EACPW,cAAgBD,GAAkB,CAChCT,EAAkBS,CAAK,CACzB,EACAE,QAASb,EAAcc,IAAKtB,GAA4B,OACtD,MAAO,CACLmB,MAAOnB,EAAOe,IACdQ,eAAcvB,EAAAA,EAAOwB,OAAPxB,YAAAA,EAAayB,aAAczB,EAAO0B,IAAAA,CAEpD,CAAC,CAAA,EAEHC,KAAM,CACJC,OAAQ,GACRT,MAAOb,CAAAA,EAETuB,SAAU,CACRD,OAAQ,GACRT,MAAOZ,CAAAA,CACT,GAED,CAACD,EAASC,EAAYC,CAAa,CAAC,EAEjCsB,EAAaC,EAAsB,CACvCC,IAAKC,EAAO9C,EAAa+C,kBAAkB,EAC3CC,OAAQ,OACRC,MAAKC,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAa,EACpBC,OAAQxB,EACRyB,eAAcJ,EAAAC,EAAE,CAAAC,GAAA,QAAA,CAAyB,CAAC,CAC3C,EAMD,MAJI,CAAC/B,GAAiBA,EAAckC,SAAW,GAI3C,CAACpC,GAAW,CAACC,EACR,KAIPoC,EAAAA,KAAAC,WAAA,CACGd,SAAAA,CAAAA,EAAWe,MACZC,EAAAA,IAACC,EAAA,CACC,KAAMD,EAAAA,IAACE,EAAA,CAAA,CAAS,EAChB,QAAQ,UACR,KAAK,KACL,QAAQX,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAa,EACtB,QAAST,EAAWmB,KACpB,iBAAiB,QAAA,CAAQ,CAAA,EAE7B,CAEJ"}