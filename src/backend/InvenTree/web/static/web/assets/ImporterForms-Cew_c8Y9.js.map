{"version":3,"file":"ImporterForms-Cew_c8Y9.js","sources":["../../../../../../frontend/src/hooks/UseImportSession.tsx","../../../../../../frontend/src/components/importer/ImportDataSelector.tsx","../../../../../../frontend/src/components/importer/ImporterColumnSelector.tsx","../../../../../../frontend/src/components/importer/ImporterStatus.tsx","../../../../../../frontend/src/components/importer/ImporterDrawer.tsx","../../../../../../frontend/src/forms/ImporterForms.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport type { UseQueryResult } from '@tanstack/react-query';\nimport { useInstance } from './UseInstance';\nimport useStatusCodes from './UseStatusCodes';\n\n/*\n * Custom hook for managing the state of a data import session\n */\n\nexport type ImportSessionState = {\n  sessionId: number;\n  sessionData: any;\n  setSessionData: (data: any) => void;\n  refreshSession: () => void;\n  sessionQuery: UseQueryResult;\n  status: number;\n  availableFields: Record<string, any>;\n  availableColumns: string[];\n  mappedFields: any[];\n  columnMappings: any[];\n  fieldDefaults: any;\n  fieldOverrides: any;\n  fieldFilters: any;\n  rowCount: number;\n  completedRowCount: number;\n};\n\nexport function useImportSession({\n  sessionId\n}: {\n  sessionId: number;\n}): ImportSessionState {\n  // Query manager for the import session\n  const {\n    instance: sessionData,\n    setInstance,\n    refreshInstance: refreshSession,\n    instanceQuery: sessionQuery\n  } = useInstance({\n    endpoint: ApiEndpoints.import_session_list,\n    pk: sessionId,\n    defaultValue: {}\n  });\n\n  const setSessionData = useCallback((data: any) => {\n    setInstance(data);\n  }, []);\n\n  const importSessionStatus = useStatusCodes({\n    modelType: ModelType.importsession\n  });\n\n  // Session status (we update whenever the session data changes)\n  const [status, setStatus] = useState<number>(0);\n\n  // Reset the status when the sessionId changes\n  useEffect(() => {\n    setStatus(0);\n  }, [sessionId]);\n\n  useEffect(() => {\n    if (!!sessionData.status && sessionData.status !== status) {\n      setStatus(sessionData.status);\n    }\n  }, [sessionData?.status]);\n\n  // List of available writeable database field definitions\n  const availableFields: any[] = useMemo(() => {\n    return sessionData?.available_fields ?? [];\n  }, [sessionData]);\n\n  // List of available data file columns\n  const availableColumns: string[] = useMemo(() => {\n    let cols = sessionData?.columns ?? [];\n\n    // Filter out any blank or duplicate columns\n    cols = cols.filter((col: string) => !!col);\n    cols = cols.filter(\n      (col: string, index: number) => cols.indexOf(col) === index\n    );\n\n    return cols;\n  }, [sessionData.columns]);\n\n  const columnMappings: any[] = useMemo(() => {\n    let mapping =\n      sessionData?.column_mappings?.map((mapping: any) => ({\n        ...mapping,\n        ...(availableFields[mapping.field] ?? {})\n      })) ?? [];\n\n    mapping = mapping.sort((a: any, b: any) => {\n      if (a?.required && !b?.required) return -1;\n      if (!a?.required && b?.required) return 1;\n      return 0;\n    });\n\n    return mapping;\n  }, [sessionData, availableColumns]);\n\n  // List of field which have been mapped to columns\n  const mappedFields: any[] = useMemo(() => {\n    return (\n      sessionData?.column_mappings?.filter((column: any) => !!column.column) ??\n      []\n    );\n  }, [sessionData]);\n\n  const fieldDefaults: any = useMemo(() => {\n    return sessionData?.field_defaults ?? {};\n  }, [sessionData]);\n\n  const fieldOverrides: any = useMemo(() => {\n    return sessionData?.field_overrides ?? {};\n  }, [sessionData]);\n\n  const fieldFilters: any = useMemo(() => {\n    return sessionData?.field_filters ?? {};\n  }, [sessionData]);\n\n  const rowCount: number = useMemo(() => {\n    return sessionData?.row_count ?? 0;\n  }, [sessionData]);\n\n  const completedRowCount: number = useMemo(() => {\n    return sessionData?.completed_row_count ?? 0;\n  }, [sessionData]);\n\n  return {\n    sessionData,\n    setSessionData,\n    sessionId,\n    refreshSession,\n    sessionQuery,\n    status,\n    availableFields,\n    availableColumns,\n    columnMappings,\n    mappedFields,\n    fieldDefaults,\n    fieldOverrides,\n    fieldFilters,\n    rowCount,\n    completedRowCount\n  };\n}\n","import { t } from '@lingui/core/macro';\nimport { Group, HoverCard, Paper, Space, Stack, Text } from '@mantine/core';\nimport { notifications } from '@mantine/notifications';\nimport {\n  IconArrowRight,\n  IconCircleCheck,\n  IconCircleDashedCheck,\n  IconExclamationCircle\n} from '@tabler/icons-react';\nimport { type ReactNode, useCallback, useMemo, useState } from 'react';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { YesNoButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { cancelEvent } from '@lib/functions/Events';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { useApi } from '../../contexts/ApiContext';\nimport {\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport type { ImportSessionState } from '../../hooks/UseImportSession';\nimport { useTable } from '../../hooks/UseTable';\nimport { InvenTreeTable } from '../../tables/InvenTreeTable';\nimport { RenderRemoteInstance } from '../render/Instance';\n\nfunction ImporterDataCell({\n  session,\n  column,\n  row,\n  onEdit\n}: Readonly<{\n  session: ImportSessionState;\n  column: any;\n  row: any;\n  onEdit?: () => void;\n}>) {\n  const onRowEdit = useCallback(\n    (event: any) => {\n      cancelEvent(event);\n\n      if (!row.complete) {\n        onEdit?.();\n      }\n    },\n    [onEdit, row]\n  );\n\n  const cellErrors: string[] = useMemo(() => {\n    if (!row.errors) {\n      return [];\n    }\n    return row?.errors[column.field] ?? [];\n  }, [row.errors, column.field]);\n\n  const cellValue: ReactNode = useMemo(() => {\n    const field_def = session.availableFields[column.field];\n\n    if (!row?.data) {\n      return '-';\n    }\n\n    switch (field_def?.type) {\n      case 'boolean':\n        return (\n          <YesNoButton value={row.data ? row.data[column.field] : false} />\n        );\n      case 'related field':\n        if (field_def.model && row.data[column.field]) {\n          return (\n            <RenderRemoteInstance\n              model={field_def.model}\n              pk={row.data[column.field]}\n            />\n          );\n        }\n        break;\n      default:\n        break;\n    }\n\n    let value = row.data ? (row.data[column.field] ?? '') : '';\n\n    if (!value) {\n      value = '-';\n    }\n\n    return value;\n  }, [row.data, column.field, session.availableFields]);\n\n  const cellValid: boolean = useMemo(\n    () => cellErrors.length == 0,\n    [cellErrors]\n  );\n\n  return (\n    <HoverCard disabled={cellValid} openDelay={100} closeDelay={100}>\n      <HoverCard.Target>\n        <Group grow justify='apart' onClick={onRowEdit}>\n          <Group grow style={{ flex: 1 }}>\n            <Text size='xs' c={cellValid ? undefined : 'red'}>\n              {cellValue}\n            </Text>\n          </Group>\n        </Group>\n      </HoverCard.Target>\n      <HoverCard.Dropdown>\n        <Stack gap='xs'>\n          {cellErrors.map((error: string) => (\n            <Text size='xs' c='red' key={error}>\n              {error}\n            </Text>\n          ))}\n        </Stack>\n      </HoverCard.Dropdown>\n    </HoverCard>\n  );\n}\n\nexport default function ImporterDataSelector({\n  session\n}: Readonly<{\n  session: ImportSessionState;\n}>) {\n  const api = useApi();\n  const table = useTable('dataimporter');\n\n  const [selectedFieldNames, setSelectedFieldNames] = useState<string[]>([]);\n\n  const selectedFields: ApiFormFieldSet = useMemo(() => {\n    const fields: ApiFormFieldSet = {};\n\n    for (const field of selectedFieldNames) {\n      // Find the field definition in session.availableFields\n      const fieldDef = session.availableFields[field];\n      if (fieldDef) {\n        // Construct field filters based on session field filters\n        let filters = fieldDef.filters ?? {};\n\n        if (session.fieldFilters[field]) {\n          filters = {\n            ...filters,\n            ...session.fieldFilters[field]\n          };\n        }\n\n        if (field == 'id') {\n          continue; // Skip the ID field\n        }\n\n        fields[field] = {\n          ...fieldDef,\n          field_type: fieldDef.type,\n          description: fieldDef.help_text,\n          filters: filters\n        };\n      }\n    }\n\n    return fields;\n  }, [selectedFieldNames, session.availableFields, session.fieldFilters]);\n\n  const importData = useCallback(\n    (rows: number[]) => {\n      notifications.show({\n        title: t`Importing Rows`,\n        message: t`Please wait while the data is imported`,\n        autoClose: false,\n        color: 'blue',\n        id: 'importing-rows',\n        icon: <IconArrowRight />\n      });\n\n      api\n        .post(\n          apiUrl(ApiEndpoints.import_session_accept_rows, session.sessionId),\n          {\n            rows: rows\n          }\n        )\n        .catch(() => {\n          notifications.show({\n            title: t`Error`,\n            message: t`An error occurred while importing data`,\n            color: 'red',\n            autoClose: true\n          });\n        })\n        .finally(() => {\n          table.clearSelectedRecords();\n          notifications.hide('importing-rows');\n          table.refreshTable();\n\n          session.refreshSession();\n        });\n    },\n    [session.sessionId, table.refreshTable]\n  );\n\n  const [selectedRow, setSelectedRow] = useState<any>({});\n\n  const editRow = useEditApiFormModal({\n    url: ApiEndpoints.import_session_row_list,\n    pk: selectedRow.pk,\n    title: t`Edit Data`,\n    fields: selectedFields,\n    initialData: selectedRow.data,\n    fetchInitialData: false,\n    processFormData: (data: any) => {\n      // Construct fields back into a single object\n      return {\n        data: {\n          ...selectedRow.data,\n          ...data\n        }\n      };\n    },\n    onFormSuccess: (row: any) => table.updateRecord(row)\n  });\n\n  const editCell = useCallback(\n    (row: any, col: any) => {\n      if (col.field == 'id') {\n        return; // Cannot edit the ID field\n      }\n\n      setSelectedRow(row);\n      setSelectedFieldNames([col.field]);\n      editRow.open();\n    },\n    [session, editRow]\n  );\n\n  const deleteRow = useDeleteApiFormModal({\n    url: ApiEndpoints.import_session_row_list,\n    pk: selectedRow.pk,\n    title: t`Delete Row`,\n    onFormSuccess: () => table.refreshTable()\n  });\n\n  const rowErrors = useCallback((row: any) => {\n    if (!row.errors) {\n      return [];\n    }\n\n    const errors: string[] = [];\n\n    for (const k of Object.keys(row.errors)) {\n      if (row.errors[k]) {\n        if (Array.isArray(row.errors[k])) {\n          row.errors[k].forEach((e: string) => {\n            errors.push(`${k}: ${e}`);\n          });\n        } else {\n          errors.push(row.errors[k].toString());\n        }\n      }\n    }\n\n    return errors;\n  }, []);\n\n  const columns: TableColumn[] = useMemo(() => {\n    const columns: TableColumn[] = [\n      {\n        accessor: 'row_index',\n        title: t`Row`,\n        sortable: true,\n        switchable: false,\n        render: (row: any) => {\n          return (\n            <Group justify='left' gap='xs'>\n              <Text size='sm'>{row.row_index}</Text>\n              {row.complete && <IconCircleCheck color='green' size={16} />}\n              {!row.complete && row.valid && (\n                <IconCircleDashedCheck color='blue' size={16} />\n              )}\n              {!row.complete && !row.valid && (\n                <HoverCard openDelay={50} closeDelay={100} position='top-start'>\n                  <HoverCard.Target>\n                    <IconExclamationCircle color='red' size={16} />\n                  </HoverCard.Target>\n                  <HoverCard.Dropdown>\n                    <Stack gap='xs'>\n                      <Text>{t`Row contains errors`}:</Text>\n                      {rowErrors(row).map((error: string) => (\n                        <Text size='sm' c='red' key={error}>\n                          {error}\n                        </Text>\n                      ))}\n                    </Stack>\n                  </HoverCard.Dropdown>\n                </HoverCard>\n              )}\n            </Group>\n          );\n        }\n      },\n      ...session.mappedFields.map((column: any) => {\n        return {\n          accessor: column.field,\n          title: column.label ?? column.column,\n          sortable: false,\n          switchable: true,\n          render: (row: any) => {\n            return (\n              <ImporterDataCell\n                session={session}\n                column={column}\n                row={row}\n                onEdit={() => editCell(row, column)}\n              />\n            );\n          }\n        };\n      })\n    ];\n\n    return columns;\n  }, [session]);\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      return [\n        {\n          title: t`Accept`,\n          icon: <IconArrowRight />,\n          color: 'green',\n          hidden: record.complete || !record.valid,\n          onClick: () => {\n            importData([record.pk]);\n          }\n        },\n        RowEditAction({\n          hidden: record.complete,\n          onClick: () => {\n            setSelectedRow(record);\n            setSelectedFieldNames(\n              session.mappedFields.map((f: any) => f.field)\n            );\n            editRow.open();\n          }\n        }),\n        RowDeleteAction({\n          onClick: () => {\n            setSelectedRow(record);\n            deleteRow.open();\n          }\n        })\n      ];\n    },\n    [session, importData]\n  );\n\n  const filters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'valid',\n        label: t`Valid`,\n        description: t`Filter by row validation status`,\n        type: 'boolean'\n      },\n      {\n        name: 'complete',\n        label: t`Complete`,\n        description: t`Filter by row completion status`,\n        type: 'boolean'\n      }\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    // Can only \"import\" valid (and incomplete) rows\n    const canImport: boolean =\n      table.hasSelectedRecords &&\n      table.selectedRecords.every((row: any) => row.valid && !row.complete);\n\n    return [\n      <ActionButton\n        key='import-selected-rows'\n        disabled={!canImport}\n        icon={<IconArrowRight />}\n        color='green'\n        tooltip={t`Import selected rows`}\n        onClick={() => {\n          importData(table.selectedRecords.map((row: any) => row.pk));\n        }}\n      />\n    ];\n  }, [table.hasSelectedRecords, table.selectedRecords]);\n\n  return (\n    <>\n      {editRow.modal}\n      {deleteRow.modal}\n      <Stack gap='xs'>\n        <Paper shadow='xs' p='xs'>\n          <Group grow justify='apart'>\n            <Text size='lg'>{t`Processing Data`}</Text>\n            <Space />\n            <ProgressBar\n              maximum={session.rowCount}\n              value={session.completedRowCount}\n              progressLabel\n            />\n            <Space />\n          </Group>\n        </Paper>\n        <InvenTreeTable\n          tableState={table}\n          columns={columns}\n          url={apiUrl(ApiEndpoints.import_session_row_list)}\n          props={{\n            params: {\n              session: session.sessionId\n            },\n            rowActions: rowActions,\n            tableActions: tableActions,\n            tableFilters: filters,\n            enableColumnSwitching: true,\n            enableColumnCaching: false,\n            enableSelection: true,\n            enableBulkDelete: true,\n            afterBulkDelete: () => {\n              session.refreshSession();\n            }\n          }}\n        />\n      </Stack>\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  Alert,\n  Button,\n  Group,\n  Paper,\n  Select,\n  Space,\n  Stack,\n  Table,\n  Text\n} from '@mantine/core';\nimport { IconCheck } from '@tabler/icons-react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { ApiFormFieldType } from '@lib/types/Forms';\nimport { useApi } from '../../contexts/ApiContext';\nimport type { ImportSessionState } from '../../hooks/UseImportSession';\nimport { StandaloneField } from '../forms/StandaloneField';\n\nfunction ImporterColumn({\n  column,\n  options\n}: Readonly<{ column: any; options: any[] }>) {\n  const api = useApi();\n\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const [selectedColumn, setSelectedColumn] = useState<string>(\n    column.column ?? ''\n  );\n\n  useEffect(() => {\n    setSelectedColumn(column.column ?? '');\n  }, [column.column]);\n\n  const onChange = useCallback(\n    (value: any) => {\n      api\n        .patch(\n          apiUrl(ApiEndpoints.import_session_column_mapping_list, column.pk),\n          {\n            column: value || ''\n          }\n        )\n        .then((response) => {\n          setSelectedColumn(response.data?.column ?? value);\n          setErrorMessage('');\n        })\n        .catch((error) => {\n          const data = error.response.data;\n          setErrorMessage(\n            data.column ?? data.non_field_errors ?? t`An error occurred`\n          );\n        });\n    },\n    [column]\n  );\n\n  return (\n    <Select\n      aria-label={`import-column-map-${column.field}`}\n      error={errorMessage}\n      clearable\n      searchable\n      placeholder={t`Select column, or leave blank to ignore this field.`}\n      label={undefined}\n      data={options}\n      value={selectedColumn}\n      onChange={onChange}\n    />\n  );\n}\n\nfunction ImporterDefaultField({\n  fieldName,\n  session\n}: {\n  fieldName: string;\n  session: ImportSessionState;\n}) {\n  const api = useApi();\n\n  const onChange = useCallback(\n    (value: any) => {\n      // Update the default value for the field\n      const defaults = {\n        ...session.fieldDefaults,\n        [fieldName]: value\n      };\n\n      api\n        .patch(apiUrl(ApiEndpoints.import_session_list, session.sessionId), {\n          field_defaults: defaults\n        })\n        .then((response: any) => {\n          session.setSessionData(response.data);\n        })\n        .catch(() => {\n          // TODO: Error message?\n        });\n    },\n    [fieldName, session, session.fieldDefaults]\n  );\n\n  const fieldDef: ApiFormFieldType = useMemo(() => {\n    let def: any = session.availableFields[fieldName];\n\n    if (def) {\n      def = {\n        ...def,\n        value: session.fieldDefaults[fieldName],\n        field_type: def.type,\n        description: def.help_text,\n        onValueChange: onChange\n      };\n    }\n\n    return def;\n  }, [fieldName, session.availableFields, session.fieldDefaults]);\n\n  return (\n    fieldDef && <StandaloneField fieldDefinition={fieldDef} hideLabels={true} />\n  );\n}\n\nfunction ImporterColumnTableRow({\n  session,\n  column,\n  options\n}: Readonly<{\n  session: ImportSessionState;\n  column: any;\n  options: any;\n}>) {\n  return (\n    <Table.Tr key={column.label ?? column.field}>\n      <Table.Td>\n        <Group gap='xs'>\n          <Text fw={column.required ? 700 : undefined}>\n            {column.label ?? column.field}\n          </Text>\n          {column.required && (\n            <Text c='red' fw={700}>\n              *\n            </Text>\n          )}\n        </Group>\n      </Table.Td>\n      <Table.Td>\n        <Text size='sm'>{column.description}</Text>\n      </Table.Td>\n      <Table.Td>\n        <ImporterColumn column={column} options={options} />\n      </Table.Td>\n      <Table.Td>\n        <ImporterDefaultField fieldName={column.field} session={session} />\n      </Table.Td>\n    </Table.Tr>\n  );\n}\n\nexport default function ImporterColumnSelector({\n  session\n}: Readonly<{\n  session: ImportSessionState;\n}>) {\n  const api = useApi();\n\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const acceptMapping = useCallback(() => {\n    const url = apiUrl(\n      ApiEndpoints.import_session_accept_fields,\n      session.sessionId\n    );\n\n    api\n      .post(url)\n      .then(() => {\n        session.refreshSession();\n      })\n      .catch((error) => {\n        setErrorMessage(error.response?.data?.error ?? t`An error occurred`);\n      });\n  }, [session.sessionId]);\n\n  const columnOptions: any[] = useMemo(() => {\n    return [\n      { value: '', label: t`Ignore this field` },\n      ...session.availableColumns.map((column: any) => {\n        return {\n          value: column,\n          label: column\n        };\n      })\n    ];\n  }, [session.availableColumns]);\n\n  return (\n    <Stack gap='xs'>\n      <Paper shadow='xs' p='xs'>\n        <Group grow justify='apart'>\n          <Text size='lg'>{t`Mapping data columns to database fields`}</Text>\n          <Space />\n          <Button color='green' variant='filled' onClick={acceptMapping}>\n            <Group>\n              <IconCheck />\n              {t`Accept Column Mapping`}\n            </Group>\n          </Button>\n        </Group>\n      </Paper>\n      {errorMessage && (\n        <Alert color='red' title={t`Error`}>\n          <Text>{errorMessage}</Text>\n        </Alert>\n      )}\n      <Table>\n        <Table.Thead>\n          <Table.Tr>\n            <Table.Th>{t`Database Field`}</Table.Th>\n            <Table.Th>{t`Field Description`}</Table.Th>\n            <Table.Th>{t`Imported Column`}</Table.Th>\n            <Table.Th>{t`Default Value`}</Table.Th>\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>\n          {session.columnMappings.map((column: any) => {\n            return (\n              <ImporterColumnTableRow\n                key={`import-${column.field}}`}\n                session={session}\n                column={column}\n                options={columnOptions}\n              />\n            );\n          })}\n        </Table.Tbody>\n      </Table>\n    </Stack>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Center, Loader, Stack } from '@mantine/core';\nimport { useInterval } from '@mantine/hooks';\nimport { useMemo } from 'react';\n\nimport { ModelType } from '@lib/enums/ModelType';\nimport type { ImportSessionState } from '../../hooks/UseImportSession';\nimport { StylishText } from '../items/StylishText';\nimport { getStatusCodeLabel } from '../render/StatusRenderer';\n\nexport default function ImporterStatus({\n  session\n}: Readonly<{\n  session: ImportSessionState;\n}>) {\n  const statusText = useMemo(() => {\n    return (\n      getStatusCodeLabel(ModelType.importsession, session.status) ||\n      t`Unknown Status`\n    );\n  }, [session.status]);\n\n  // Periodically refresh the import session data\n  const _interval = useInterval(\n    () => {\n      session.refreshSession();\n    },\n    1000,\n    {\n      autoInvoke: true\n    }\n  );\n\n  return (\n    <Center style={{ height: '100%' }}>\n      <Stack gap='xs' align='center' justify='center'>\n        <StylishText size='lg'>{statusText}</StylishText>\n        <Loader />\n      </Stack>\n    </Center>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  Alert,\n  Button,\n  Divider,\n  Drawer,\n  Group,\n  Paper,\n  Space,\n  Stack,\n  Stepper\n} from '@mantine/core';\nimport { IconCheck, IconExclamationCircle } from '@tabler/icons-react';\nimport { type ReactNode, useMemo } from 'react';\n\nimport { ModelType } from '@lib/enums/ModelType';\nimport { useImportSession } from '../../hooks/UseImportSession';\nimport useStatusCodes from '../../hooks/UseStatusCodes';\nimport { StylishText } from '../items/StylishText';\nimport ImporterDataSelector from './ImportDataSelector';\nimport ImporterColumnSelector from './ImporterColumnSelector';\nimport ImporterStatus from './ImporterStatus';\n\n/*\n * Stepper component showing the current step of the data import process.\n */\nfunction ImportDrawerStepper({\n  currentStep\n}: Readonly<{ currentStep: number }>) {\n  /* TODO: Enhance this with:\n   * - Custom icons\n   * - Loading indicators for \"background\" states\n   */\n\n  return (\n    <Stepper\n      active={currentStep}\n      onStepClick={undefined}\n      allowNextStepsSelect={false}\n      iconSize={20}\n      size='xs'\n    >\n      <Stepper.Step label={t`Upload File`} />\n      <Stepper.Step label={t`Map Columns`} />\n      <Stepper.Step label={t`Import Data`} />\n      <Stepper.Step label={t`Process Data`} />\n      <Stepper.Step label={t`Complete Import`} />\n    </Stepper>\n  );\n}\n\nexport default function ImporterDrawer({\n  sessionId,\n  opened,\n  onClose\n}: Readonly<{\n  sessionId: number;\n  opened: boolean;\n  onClose: () => void;\n}>) {\n  const session = useImportSession({ sessionId: sessionId });\n\n  const importSessionStatus = useStatusCodes({\n    modelType: ModelType.importsession\n  });\n\n  // Map from import steps to stepper steps\n  const currentStep = useMemo(() => {\n    switch (session.status) {\n      case importSessionStatus.INITIAL:\n        return 0;\n      case importSessionStatus.MAPPING:\n        return 1;\n      case importSessionStatus.IMPORTING:\n        return 2;\n      case importSessionStatus.PROCESSING:\n        return 3;\n      case importSessionStatus.COMPLETE:\n        return 4;\n      default:\n        return 0;\n    }\n  }, [session.status]);\n\n  const widget = useMemo(() => {\n    if (session.sessionQuery.isError) {\n      return (\n        <Alert color='red' title={t`Error`} icon={<IconExclamationCircle />}>\n          {t`Failed to fetch import session data`}\n        </Alert>\n      );\n    }\n\n    switch (session.status) {\n      case importSessionStatus.MAPPING:\n        return <ImporterColumnSelector session={session} />;\n      case importSessionStatus.PROCESSING:\n        return <ImporterDataSelector session={session} />;\n      case importSessionStatus.COMPLETE:\n        return (\n          <Stack gap='xs'>\n            <Alert\n              color='green'\n              title={t`Import Complete`}\n              icon={<IconCheck />}\n            >\n              {t`Data has been imported successfully`}\n            </Alert>\n            <Button color='blue' onClick={onClose}>{t`Close`}</Button>\n          </Stack>\n        );\n      default:\n        return <ImporterStatus session={session} />;\n    }\n  }, [session.status, session.sessionQuery]);\n\n  const title: ReactNode = useMemo(() => {\n    return (\n      <Stack gap='xs' style={{ width: '100%' }}>\n        <Group\n          gap='xs'\n          wrap='nowrap'\n          justify='space-apart'\n          grow\n          preventGrowOverflow={false}\n        >\n          <StylishText size='lg'>\n            {session.sessionData?.statusText ?? t`Importing Data`}\n          </StylishText>\n          <ImportDrawerStepper currentStep={currentStep} />\n          <Space />\n        </Group>\n        <Divider />\n      </Stack>\n    );\n  }, [session.sessionData]);\n\n  return (\n    <Drawer\n      position='bottom'\n      size='80%'\n      title={title}\n      opened={opened}\n      onClose={onClose}\n      withCloseButton={true}\n      closeOnEscape={false}\n      closeOnClickOutside={false}\n      styles={{\n        header: {\n          width: '100%'\n        },\n        title: {\n          width: '100%'\n        }\n      }}\n    >\n      <Stack gap='xs'>\n        <Paper p='md'>{widget}</Paper>\n      </Stack>\n    </Drawer>\n  );\n}\n","import type { ModelType } from '@lib/enums/ModelType';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\n\nexport function dataImporterSessionFields({\n  modelType,\n  allowUpdate = false\n}: {\n  modelType?: ModelType | string;\n  allowUpdate?: boolean;\n}): ApiFormFieldSet {\n  return {\n    data_file: {},\n    model_type: {\n      value: modelType,\n      hidden: modelType != undefined\n    },\n    update_records: {\n      hidden: allowUpdate !== true,\n      value: allowUpdate ? undefined : false\n    },\n    field_defaults: {\n      hidden: true,\n      value: {}\n    },\n    field_overrides: {\n      hidden: true,\n      value: {}\n    },\n    field_filters: {\n      hidden: true,\n      value: {}\n    }\n  };\n}\n"],"names":["useImportSession","sessionId","instance","sessionData","setInstance","refreshInstance","refreshSession","instanceQuery","sessionQuery","useInstance","endpoint","ApiEndpoints","import_session_list","pk","defaultValue","setSessionData","useCallback","data","useStatusCodes","modelType","ModelType","importsession","status","setStatus","useState","useEffect","availableFields","useMemo","available_fields","availableColumns","cols","columns","filter","col","index","indexOf","columnMappings","mapping","column_mappings","map","field","sort","a","b","required","mappedFields","column","fieldDefaults","field_defaults","fieldOverrides","field_overrides","fieldFilters","field_filters","rowCount","row_count","completedRowCount","completed_row_count","ImporterDataCell","session","row","onEdit","onRowEdit","event","cancelEvent","complete","cellErrors","errors","cellValue","field_def","type","jsx","YesNoButton","model","RenderRemoteInstance","value","cellValid","length","HoverCard","Group","flex","Text","undefined","Stack","error","ImporterDataSelector","api","useApi","table","useTable","selectedFieldNames","setSelectedFieldNames","selectedFields","fields","fieldDef","filters","field_type","description","help_text","importData","rows","notifications","show","title","_i18n","_","id","message","autoClose","color","icon","IconArrowRight","post","apiUrl","import_session_accept_rows","catch","finally","clearSelectedRecords","hide","refreshTable","selectedRow","setSelectedRow","editRow","useEditApiFormModal","url","import_session_row_list","initialData","fetchInitialData","processFormData","onFormSuccess","updateRecord","editCell","open","deleteRow","useDeleteApiFormModal","rowErrors","k","Object","keys","Array","isArray","forEach","e","push","toString","accessor","sortable","switchable","render","jsxs","row_index","IconCircleCheck","valid","IconCircleDashedCheck","IconExclamationCircle","label","rowActions","record","hidden","onClick","RowEditAction","f","RowDeleteAction","name","tableActions","canImport","hasSelectedRecords","selectedRecords","every","ActionButton","Fragment","modal","Paper","Space","ProgressBar","InvenTreeTable","params","tableFilters","enableColumnSwitching","enableColumnCaching","enableSelection","enableBulkDelete","afterBulkDelete","ImporterColumn","options","errorMessage","setErrorMessage","selectedColumn","setSelectedColumn","onChange","patch","import_session_column_mapping_list","then","response","non_field_errors","Select","ImporterDefaultField","fieldName","defaults","def","onValueChange","StandaloneField","ImporterColumnTableRow","Table","ImporterColumnSelector","acceptMapping","import_session_accept_fields","columnOptions","Button","IconCheck","Alert","ImporterStatus","statusText","getStatusCodeLabel","useInterval","autoInvoke","Center","height","StylishText","Loader","ImportDrawerStepper","currentStep","Stepper","ImporterDrawer","opened","onClose","importSessionStatus","INITIAL","MAPPING","IMPORTING","PROCESSING","COMPLETE","widget","isError","width","Divider","Drawer","header","dataImporterSessionFields","allowUpdate","data_file","model_type","update_records"],"mappings":"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"}