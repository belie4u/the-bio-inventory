{"version":3,"file":"UseGenerator-CdxkBrcC.js","sources":["../../../../../../frontend/src/hooks/UseGenerator.tsx"],"sourcesContent":["import { useDebouncedValue } from '@mantine/hooks';\nimport { useQuery } from '@tanstack/react-query';\nimport { useCallback, useState } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { api } from '../App';\nimport { useModalState } from '../states/ModalState';\n\nexport type GeneratorProps = {\n  endpoint: ApiEndpoints;\n  key: string;\n  initialQuery?: Record<string, any>;\n  onGenerate?: (value: any) => void;\n  isEnabled?: () => boolean;\n  modalId?: string;\n};\n\nexport type GeneratorState = {\n  query: Record<string, any>;\n  result: any;\n  update: (params: Record<string, any>, overwrite?: boolean) => void;\n};\n\n/* Hook for managing generation of data via the InvenTree API.\n * We pass an endpoint, and start with an initially empty query.\n * We can pass additional parameters to the query, and update the query as needed.\n * Each update calls a new query to the API, and the result is stored in the state.\n */\nexport function useGenerator(props: GeneratorProps): GeneratorState {\n  const modalState = useModalState();\n\n  // Track the result\n  const [result, setResult] = useState<any>(null);\n\n  // Track the generator query\n  const [query, setQuery] = useState<Record<string, any>>({});\n\n  // Prevent rapid updates\n  const [debouncedQuery] = useDebouncedValue<Record<string, any>>(query, 100);\n\n  // Callback to determine if the function is enabled\n  const isEnabled = useCallback(() => {\n    if (props.isEnabled?.() == false) {\n      return false;\n    }\n\n    if (props.modalId && !modalState.isModalOpen(props.modalId)) {\n      return false;\n    }\n\n    return true;\n  }, [\n    modalState.isModalOpen,\n    modalState.openModals,\n    props.isEnabled,\n    props.modalId\n  ]);\n\n  // Callback to update the generator query\n  const update = useCallback(\n    (params: Record<string, any>, overwrite?: boolean) => {\n      if (overwrite) {\n        setQuery(params);\n      } else {\n        setQuery((query) => ({\n          ...query,\n          ...params\n        }));\n      }\n    },\n    []\n  );\n\n  // API query handler\n  const queryGenerator = useQuery({\n    enabled: true,\n    queryKey: [\n      'generator',\n      props.key,\n      props.endpoint,\n      props.modalId,\n      props.initialQuery,\n      modalState.openModals,\n      debouncedQuery\n    ],\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    throwOnError: (error: any) => {\n      console.error(\n        `Error generating ${props.key} @ ${props.endpoint}:`,\n        error\n      );\n      return false;\n    },\n    queryFn: async () => {\n      const generatorQuery = {\n        ...(props.initialQuery ?? {}),\n        ...debouncedQuery\n      };\n\n      if (!isEnabled()) {\n        setResult(null);\n        return null;\n      }\n\n      return api\n        .post(apiUrl(props.endpoint), generatorQuery)\n        .then((response) => {\n          const value = response?.data[props.key];\n          setResult(value);\n\n          props.onGenerate?.(value);\n\n          return response;\n        });\n    }\n  });\n\n  return {\n    query,\n    update,\n    result\n  };\n}\n\n// Generate a batch code with provided data\nexport function useBatchCodeGenerator({\n  initialQuery,\n  onGenerate,\n  isEnabled,\n  modalId\n}: {\n  initialQuery?: Record<string, any>;\n  onGenerate?: (value: any) => void;\n  isEnabled?: () => boolean;\n  modalId?: string;\n}): GeneratorState {\n  return useGenerator({\n    endpoint: ApiEndpoints.generate_batch_code,\n    key: 'batch_code',\n    initialQuery: initialQuery,\n    onGenerate: onGenerate,\n    isEnabled: isEnabled,\n    modalId: modalId\n  });\n}\n\n// Generate a serial number with provided data\nexport function useSerialNumberGenerator({\n  initialQuery,\n  onGenerate,\n  isEnabled,\n  modalId\n}: {\n  initialQuery?: Record<string, any>;\n  onGenerate?: (value: any) => void;\n  isEnabled?: () => boolean;\n  modalId?: string;\n}): GeneratorState {\n  return useGenerator({\n    endpoint: ApiEndpoints.generate_serial_number,\n    key: 'serial_number',\n    initialQuery: initialQuery,\n    onGenerate: onGenerate,\n    isEnabled: isEnabled,\n    modalId: modalId\n  });\n}\n"],"names":["useGenerator","props","modalState","useModalState","result","setResult","useState","query","setQuery","debouncedQuery","useDebouncedValue","isEnabled","useCallback","modalId","isModalOpen","openModals","update","params","overwrite","useQuery","enabled","queryKey","key","endpoint","initialQuery","refetchOnMount","refetchOnWindowFocus","throwOnError","error","console","queryFn","generatorQuery","api","post","apiUrl","then","response","value","data","onGenerate","useBatchCodeGenerator","ApiEndpoints","generate_batch_code","useSerialNumberGenerator","generate_serial_number"],"mappings":"yJA6BO,SAASA,EAAaC,EAAuC,CAClE,MAAMC,EAAaC,EAAAA,EAGb,CAACC,EAAQC,CAAS,EAAIC,EAAAA,SAAc,IAAI,EAGxC,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAA8B,CAAA,CAAE,EAGpD,CAACG,CAAc,EAAIC,EAAuCH,EAAO,GAAG,EAGpEI,EAAYC,EAAAA,YAAY,IAAM,OAKlC,MAJIX,IAAAA,EAAAA,EAAMU,YAANV,YAAAA,EAAAA,KAAAA,KAAuB,IAIvBA,EAAMY,SAAW,CAACX,EAAWY,YAAYb,EAAMY,OAAO,EAK5D,EAAG,CACDX,EAAWY,YACXZ,EAAWa,WACXd,EAAMU,UACNV,EAAMY,OAAO,CACd,EAGKG,EAASJ,EAAAA,YACb,CAACK,EAA6BC,IAAwB,CAElDV,EADEU,EACOD,EAECV,IAAW,CACnB,GAAGA,EACH,GAAGU,CAAAA,EAJU,CAOnB,EACA,CAAA,CACF,EAGuBE,OAAAA,EAAS,CAC9BC,QAAS,GACTC,SAAU,CACR,YACApB,EAAMqB,IACNrB,EAAMsB,SACNtB,EAAMY,QACNZ,EAAMuB,aACNtB,EAAWa,WACXN,CAAc,EAEhBgB,eAAgB,GAChBC,qBAAsB,GACtBC,aAAeC,IACbC,QAAQD,MACN,oBAAoB3B,EAAMqB,GAAG,MAAMrB,EAAMsB,QAAQ,IACjDK,CACF,EACO,IAETE,QAAS,SAAY,CACnB,MAAMC,EAAiB,CACrB,GAAI9B,EAAMuB,cAAgB,CAAA,EAC1B,GAAGf,CAAAA,EAGL,OAAKE,IAKEqB,EACJC,KAAKC,EAAOjC,EAAMsB,QAAQ,EAAGQ,CAAc,EAC3CI,KAAMC,GAAa,OAClB,MAAMC,EAAQD,GAAAA,YAAAA,EAAUE,KAAKrC,EAAMqB,KACnCjB,OAAAA,EAAUgC,CAAK,GAEfpC,EAAAA,EAAMsC,aAANtC,MAAAA,EAAAA,KAAAA,EAAmBoC,GAEZD,CACT,CAAC,GAbD/B,EAAU,IAAI,EACP,KAaX,CAAA,CACD,EAEM,CACLE,MAAAA,EACAS,OAAAA,EACAZ,OAAAA,CAAAA,CAEJ,CAGO,SAASoC,EAAsB,CACpChB,aAAAA,EACAe,WAAAA,EACA5B,UAAAA,EACAE,QAAAA,CAMF,EAAmB,CACjB,OAAOb,EAAa,CAClBuB,SAAUkB,EAAaC,oBACvBpB,IAAK,aACLE,aAAAA,EACAe,WAAAA,EACA5B,UAAAA,EACAE,QAAAA,CAAAA,CACD,CACH,CAGO,SAAS8B,EAAyB,CACvCnB,aAAAA,EACAe,WAAAA,EACA5B,UAAAA,EACAE,QAAAA,CAMF,EAAmB,CACjB,OAAOb,EAAa,CAClBuB,SAAUkB,EAAaG,uBACvBtB,IAAK,gBACLE,aAAAA,EACAe,WAAAA,EACA5B,UAAAA,EACAE,QAAAA,CAAAA,CACD,CACH"}