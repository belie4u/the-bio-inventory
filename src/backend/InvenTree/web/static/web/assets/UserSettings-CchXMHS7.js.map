{"version":3,"mappings":";o3CAMA,MAAMA,GAAgBA,IAAM,CAC1B,IAAIC,EACJ,MAAO,CACL,IAAIC,QAASC,GAAY,CACvBF,EAAWE,CACb,CAAC,EACDF,CAAQ,CAEZ,EA0CaG,GAAYA,IAGpB,CACH,KAAM,CAACC,EAAYC,CAAa,EAAIC,WAAqB,CACvDC,MAAO,GACPC,KAAM,GACNC,YAAa,GACd,EAEK,CAACC,EAAOC,CAAQ,EAAIL,WAAS,EAAE,EAC/B,CAACM,EAAMC,CAAO,EAAIP,WAAS,EAAK,EAChC,CAACN,EAAUc,CAAW,EAAIR,WAEtB,IAAI,EAERS,EAAgB,MAAOC,GAAsB,CACjDX,EAAcW,CAAK,EACnBH,EAAQ,EAAI,EACZ,KAAM,CAACI,EAASf,CAAO,EAAI,MAAMH,KAEjCe,SAAY,CAAEZ,UAAS,EAChBe,CACT,EAEMC,EAAU,MAAOC,EAAgBC,IAAsB,CAC3DP,EAAQ,EAAK,EACTb,GACFA,EAASE,QAAQiB,EAAQC,CAAQ,CAErC,EA6BA,MAAO,CAACL,EA3BYM,IAClBC,MAACC,EAAA,CACC,OAAQX,EACR,QAAS,IAAMC,EAAQ,EAAK,EAC5B,MAAMW,EAAAC,EAAC,CAAAC,GAAA,SAAkB,EAEzB,gBAACC,EAAA,CACC,UAAAL,MAACM,IACC,SAAQ,GACR,MAAOxB,EAAWG,MAClB,KAAMH,EAAWI,KACjB,YAAaJ,EAAWK,YACxB,MAAAC,EACA,SAAWmB,GAAUlB,EAASkB,EAAMC,cAAcpB,KAAK,EAAE,EAE3DqB,OAACC,EAAA,CAAM,QAAQ,gBACb,UAAAV,MAACW,EAAA,CAAO,QAAS,IAAMf,EAAQ,GAAI,EAAK,EAAG,MAAM,MAC/C,SAAAI,MAAAY,EAAA,CAAAR,GAAA,SAAqB,EACvB,EACAJ,MAACW,GAAO,QAAS,IAAMf,EAAQR,EAAO,EAAI,EACxC,SAAAY,MAAAY,EAAA,CAAAR,GAAA,SAAiB,EACnB,GACF,GACF,EACF,CAGgC,CACpC,ECvEO,SAASS,IAAkB,CAChC,KAAM,CAACC,EAAaC,CAAW,EAAIC,EACjCC,EAAYC,GAAU,CAACA,EAAMJ,YAAaI,EAAMH,WAAW,CAAC,CAC9D,EAEMI,EAAOC,IAEb,OACEpB,MAACK,GACC,SAAAI,OAACY,EAAA,CAAU,SAAQ,GAAC,aAAc,CAAC,OAAO,EACxC,UAAAZ,OAACY,EAAU,KAAV,CAAe,MAAM,QACpB,UAAArB,MAACqB,EAAU,QAAV,CACC,eAACC,EAAA,CAAY,KAAK,KAAKpB,WAAAC,EAAC,CAAAC,GAAA,SAAiB,EAAE,EAC7C,QACCiB,EAAU,MAAV,CACC,SAAArB,MAACuB,KAAY,EACf,GACF,EACAd,OAACY,EAAU,KAAV,CAAe,MAAM,MACpB,UAAArB,MAACqB,EAAU,QAAV,CACC,eAACC,EAAA,CAAY,KAAK,KAAKpB,WAAAC,EAAC,CAAAC,GAAA,SAAgB,EAAE,EAC5C,QACCiB,EAAU,MAAV,CACEN,mBACES,GAAA,CAAgB,YAAAV,EAAyB,EAE1Cd,MAACyB,EAAA,CACC,KAAMzB,MAAC0B,EAAA,CAAgB,KAAK,OAAM,EAClC,MAAMxB,EAAAC,EAAC,CAAAC,GAAA,SAAa,EACpB,MAAM,SAEN,SAAAJ,MAAAY,EAAA,CAAAR,GAAA,QAA4D,CAAC,EAC/D,EAEJ,GACF,EACAK,OAACY,EAAU,KAAV,CAAe,MAAM,MACpB,UAAArB,MAACqB,EAAU,QAAV,CACC,eAACC,EAAA,CAAY,KAAK,KAAKpB,WAAAC,EAAC,CAAAC,GAAA,SAA6B,EAAE,EACzD,QACCiB,EAAU,MAAV,CACC,SAAArB,MAAC2B,KAAU,EACb,GACF,EACAlB,OAACY,EAAU,KAAV,CAAe,MAAM,QACpB,UAAArB,MAACqB,EAAU,QAAV,CACC,eAACC,EAAA,CAAY,KAAK,KAAKpB,WAAAC,EAAC,CAAAC,GAAA,SAAe,EAAE,EAC3C,EACAJ,MAACqB,EAAU,MAAV,CACC,eAACO,GAAA,CAAc,YAAW,KAC5B,GACF,EACCT,EAAKU,eACJpB,OAACY,EAAU,KAAV,CAAe,MAAM,UACpB,UAAArB,MAACqB,EAAU,QAAV,CACC,eAACC,EAAA,CAAY,KAAK,KAAKpB,WAAAC,EAAC,CAAAC,GAAA,SAAqB,EAAE,EACjD,QACCiB,EAAU,MAAV,CACC,SAAArB,MAAC8B,KAAkB,EACrB,GACF,GAEJ,EACF,CAEJ,CAEA,SAASA,IAAqB,OAC5B,KAAM,CAACC,EAAcC,CAAc,EAAIhB,EACrCC,EAAYC,GAAU,CAACA,EAAMa,aAAcb,EAAMc,cAAc,CAAC,CAClE,EAEMC,EAAmBC,cAAY,IAAM,CACzCC,EAAQC,EAAOC,EAAaC,YAAY,CAAC,EAAEC,KAAMC,GAAS,CACxDR,EAAeQ,EAAKC,KAAKA,IAAI,CAC/B,CAAC,CACH,EAAG,CAACT,CAAc,CAAC,EAEnB,OACEvB,OAACJ,EAAA,CAAM,IAAI,KACT,UAAAL,MAACU,EAAA,CACC,SAAAV,MAAC0C,EAAA,CACC,QAAST,EACT,QAAQ,cACR,aAAW,uBAEX,SAAAjC,MAAC2C,GAAA,EAAW,EACd,EACF,SAECC,EAAA,CACC,UAAA5C,MAAC4C,EAAM,MAAN,CACC,SAAAnC,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CAAS1C,WAAAC,EAAC,CAAAC,GAAA,SAAW,EAAE,EACxBJ,MAAC4C,EAAM,GAAN,CAAS1C,WAAAC,EAAC,CAAAC,GAAA,SAAQ,CAAC,CAAC,GACvB,EACF,EACAJ,MAAC4C,EAAM,MAAN,CACEb,6BAAcc,UAAdd,cAAuBe,IAAI,CAACC,EAAaC,IACxCvC,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CAAUK,WAAUF,EAAOG,EAAE,EAAE,EAChClD,MAAC4C,EAAM,GAAN,CAAUG,WAAOA,OAAO,IAFZ,eAAeC,CAAK,EAGnC,EACD,CACH,GACF,GACF,CAEJ,CAEA,SAASzB,IAAe,CACtB,KAAM,CAAC4B,EAAeC,CAAgB,EAAIpE,WAAiB,EAAE,EACvD,CAACqE,EAAeC,CAAgB,EAAItE,WAAS,EAAE,EAC/C,CAAEuE,YAAWd,OAAMe,WAAYC,EAAS,CAC5CC,SAAU,CAAC,QAAQ,EACnBC,QAASA,IACPxB,EAAQC,EAAOC,EAAauB,UAAU,CAAC,EAAErB,KAAMsB,GAAQA,EAAIpB,KAAKA,IAAI,EACvE,EACKqB,EAAiBC,UAAQ,IACtBtB,GAAQuB,MAAavB,EAAKwB,QAAU,EAC1C,CAACxB,CAAI,CAAC,EAET,SAASyB,EACPC,EAA8C,OAC9C1B,EACA,CACA,MAAM2B,EAAY3B,GAAQ,CAAE4B,MAAOlB,GACnC,OAAOhB,EAAQC,EAAOC,EAAauB,UAAU,EAAGI,OAAWG,EAAQC,CAAI,EACpE7B,KAAK,IAAM,CACViB,GACF,CAAC,EACAc,MAAOC,GAAQ,CACdC,GAAiB,aAAa,EAE9BC,EAAiB,CACfrE,GAAI,cACJsE,MAAKxE,EAAAC,EAAE,CAAAC,GAAA,SAAO,EACduE,QAAOzE,EAAAC,EAAE,CAAAC,GAAA,SAA4B,EACrCwE,MAAO,MACR,CACH,CAAC,CACL,CAEA,OAAIrB,EAAkBvD,MAAC6E,EAAA,EAAM,EAG3BpE,OAACqE,GAAW,KAAM,CAAEC,GAAI,EAAGC,GAAI,GAAK,QAAQ,KACzClB,YACC9D,MAACK,EAAA,CAAM,IAAI,KACT,SAAAL,MAACyB,EAAA,CACC,KAAMzB,MAAC0B,EAAA,CAAgB,KAAK,OAAM,EAClC,MAAMxB,EAAAC,EAAC,CAAAC,GAAA,SAAgB,EACvB,MAAM,SAEN,SAAAJ,MAAAY,EAAA,CAAAR,GAAA,QAA0D,CAAC,EAC7D,EACF,QAEC6E,EAAM,MAAN,CACC,MAAO9B,EACP,SAAUC,EACV,KAAK,iBACL,MAAMlD,EAAAC,EAAC,CAAAC,GAAA,SAAiE,EAExE,SAAAK,OAACJ,EAAA,CAAM,GAAG,KACPoC,YAAKK,IAAKuB,GACTrE,MAACiF,GAEC,MAAOC,OAAOb,EAAMA,KAAK,EACzB,MACE5D,OAACC,EAAA,CAAM,QAAQ,cACZ2D,YAAMA,MACP5D,OAACC,EAAA,CAAM,QAAQ,QACZ2D,YAAMc,SACLnF,MAACoF,EAAA,CAAM,MAAM,OACX,eAAAxE,EAAA,CAAAR,GAAA,SAAsB,EACxB,EAEDiE,EAAMgB,SACLrF,MAACoF,GAAM,MAAM,QACX,eAAAxE,EAAA,CAAAR,GAAA,QAAsB,CAAC,EACzB,EAEAJ,MAACoF,GAAM,MAAM,SACX,eAAAxE,EAAA,CAAAR,GAAA,SAAyB,EAC3B,GAEJ,GACF,GArBGiE,EAAMA,MAwBd,SACA3D,EAAA,CACC,UAAAV,MAACW,EAAA,CACC,QAAS,IACPuD,EAAgB,QAAS,CACvBG,MAAOlB,EACPgC,QAAS,GACV,EAEH,SAAU,CAAChC,EAEX,eAAAvC,EAAA,CAAAR,GAAA,SAA2B,EAC7B,EACAJ,MAACW,EAAA,CACC,QAAS,IAAMuD,EAAgB,KAAK,EACpC,SAAU,CAACf,EAEX,SAAAnD,MAAAY,EAAA,CAAAR,GAAA,SAAmC,EACrC,EACAJ,MAACW,EAAA,CACC,QAAS,IAAMuD,EAAgB,QAAQ,EACvC,SAAU,CAACf,EACX,MAAM,MAEN,eAAAvC,EAAA,CAAAR,GAAA,SAAqB,EACvB,GACF,GACF,EACF,SAEDC,EAAA,CACC,UAAAL,MAACsB,EAAA,CAAY,KAAK,KAAKpB,WAAAC,EAAC,CAAAC,GAAA,SAAmB,EAAE,EAC7CJ,MAACM,GAAA,CACC,MAAMJ,EAAAC,EAAC,CAAAC,GAAA,SAAQ,EACf,YAAYF,EAAAC,EAAC,CAAAC,GAAA,SAAgB,EAC7B,YAAaJ,MAACsF,GAAA,EAAM,EACpB,aAAW,sBACX,MAAOjC,EACP,SAAW9C,GAAU+C,EAAiB/C,EAAMC,cAAcpB,KAAK,EAAE,QAElEuB,EAAA,CACC,aAAW,uBACX,QAAS,IACPuD,EAAgB,OAAQ,CAAEG,MAAOhB,EAAe,EAAEiB,MAAOC,GAAQ,CAC3DA,EAAIgB,QAAU,KAChBd,EAAiB,CACfC,MAAKxE,EAAAC,EAAE,CAAAC,GAAA,SAA0B,EACjCuE,QAASJ,EAAIiB,SAAS/C,KAAKgD,OACxB3C,IAAK4C,GAAeA,EAAMf,OAAO,EACjCgB,KAAK;AAAA,CAAI,EACZf,MAAO,MACPgB,WAAOC,GAAA,EAAK,EACb,CAEL,CAAC,EAGH,SAAA7F,MAAAY,EAAA,CAAAR,GAAA,SAAwB,EAC1B,GACF,GACF,CAEJ,CAEA,SAAS0F,GAAe,CAAEC,UAA+C,EAAG,CAC1E,aACGpF,EAAA,CAEC,QAAQ,UACR,QAAS,IAAMqF,GAAcD,EAAU,SAAS,EAEhD,SAAA/F,MAACU,GAAM,QAAQ,gBAAiBqF,WAAS7G,KAAK,GAJzC6G,EAAS3F,EAKhB,CAEJ,CAEA,SAASoB,GAAgB,CACvBV,aACiD,EAAG,CACpD,KAAM,CAAC1B,EAAOC,CAAQ,EAAIL,WAAiB,EAAE,EACvC,CAAEuE,YAAWd,OAAMe,WAAYC,EAAS,CAC5CC,SAAU,CAAC,eAAe,EAC1BC,QAASA,IACPxB,EAAQC,EAAOC,EAAa4D,cAAc,CAAC,EACxC1D,eAAcsB,2BAAKpB,OAALoB,cAAWpB,OAAQ,GAAE,EACnC6B,MAAM,IAAM,EAAE,EACpB,EAEK4B,EAAqBnC,UAAQ,IAAM,CACvC,GAAI,CAACjD,GAAe,CAAC2B,QAAa,GAElC,MAAM0D,EAAsB1D,EAAKK,IAAKsD,GAAcA,EAAKL,SAAS3F,EAAE,EACpE,OAAOU,EAAYuF,cAAcC,UAAUC,OACxCR,GAAkB,CAACI,EAAoBK,SAAST,EAAS3F,EAAE,CAC9D,CACF,EAAG,CAACU,EAAa2B,CAAI,CAAC,EAEtB,SAASgE,GAAiB,CACxB,KAAM,CAACC,EAAKX,CAAQ,EAAI3G,EAAMuH,MAAM,GAAG,EACvCxE,EAAQC,EAAOC,EAAa4D,cAAc,EAAGjC,OAAW,SAAU,CAChE+B,WACAa,QAASF,EACV,EACEnE,KAAK,IAAM,CACViB,GACF,CAAC,EACAc,MAAOT,GAAQgD,QAAQC,IAAIjD,EAAIpB,IAAI,CAAC,CACzC,CAEA,OAAIc,EAAkBvD,MAAC6E,EAAA,EAAM,SAG1BkC,EAAA,CACC,UAAA/G,MAAC+G,EAAK,IAAL,CAAS,KAAM,EACbtE,WAAKwB,QAAU,EACdjE,MAACK,EAAA,CAAM,IAAI,KACT,SAAAL,MAACyB,GACC,KAAMzB,MAAC0B,GAAgB,KAAK,OAAM,EAClC,MAAMxB,EAAAC,EAAC,CAAAC,GAAA,SAAgB,EACvB,MAAM,SAEN,SAAAJ,MAAAY,EAAA,CAAAR,GAAA,QAA+D,CAAC,EAClE,EACF,SAECC,EAAA,CACC,UAAAL,MAACiF,EAAM,MAAN,CACC,MAAA7F,EACA,SAAUC,EACV,KAAK,eACL,MAAMa,EAAAC,EAAC,CAAAC,GAAA,SAAsE,EAE7E,SAAAJ,MAACK,EAAA,CAAM,GAAG,KACPoC,WAAKK,IAAKkE,SACR/B,EAAA,CAEC,MAAO,CAAC+B,EAAKN,IAAKM,EAAKjB,SAAS3F,EAAE,EAAEuF,KAAK,GAAG,EAC5C,MAAO,GAAGqB,EAAKjB,SAAS7G,IAAI,KAAK8H,EAAKC,OAAO,IAFxCD,EAAKN,GAEsC,CAEnD,EACH,EACF,EACA1G,MAACW,EAAA,CAAO,QAAS8F,EACf,eAAA7F,EAAA,CAAAR,GAAA,SAAmC,EACrC,GACF,EAEJ,QACC2G,EAAK,IAAL,CAAS,KAAM,EACd,gBAAC1G,EAAA,CACC,UAAAL,MAACkH,IAAK,2BAAe,EACpBhB,IAAuBlC,OACtBhE,MAACkH,GAAA,CACC,eAAAtG,EAAA,CAAAR,GAAA,SAAsB,EACxB,EAEAJ,MAACK,EAAA,CAAM,IAAI,KACR6F,WAAmBpD,IAAKiD,GACvB/F,MAAC8F,GAAA,CAAiC,SAAAC,GAAbA,EAAS3F,EAAuB,CACtD,EACH,GAEJ,EACF,GACF,CAEJ,CAEA,SAASuB,IAAa,SACpB,KAAM,CAAClC,EAAeM,CAAW,EAAIlB,KAC/B,CAACsI,EAAeC,CAAgB,EAAIpI,aAGpC,CACJqI,EACA,CAAE/H,KAAMgI,EAAmBC,MAAOC,EAAoB,EACpDC,GAAc,EAAK,EACjB,CAAElE,YAAWd,OAAMe,WAAYC,EAAS,CAC5CC,SAAU,CAAC,UAAU,EACrBC,QAASA,IACP+D,GACGC,IAAIvF,EAAOC,EAAauF,mBAAmB,CAAC,EAC5CrF,eAAcsB,2BAAKpB,OAALoB,cAAWpB,OAAQ,GAAE,EACnC6B,MAAM,IAAM,EAAE,EACpB,EAED,SAASuD,EAAkBC,EAAsB,CAC/CV,EAAiBU,CAAK,EACtBR,GACF,CAEA,MAAMS,EAAaA,IAAM,CACvBC,EACE,IACE7F,EAAQC,EAAOC,EAAa4F,SAAS,EAAGjE,OAAW,QAAQ,EAAEzB,KAC3D,KACEiB,IACO0E,EAEX,EACFzI,CACF,CACF,EACM0I,EAAoBA,IAAM,CAC9BH,EACE,IACE7F,EAAQC,EAAOC,EAAa+F,aAAa,EAAGpE,OAAW,KAAK,EAAEzB,KAC3DsB,IACCgE,EAAkBhE,EAAIpB,KAAKA,IAAI,EACxByF,EAEX,EACFzI,CACF,CACF,EAEM4I,EAAOtE,UAAQ,IACfR,GAAa,CAACd,EAAa,KACxBA,EAAKK,IAAKwF,GACf7H,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CAAU0F,WAAMC,KAAK,QACrB3F,EAAM,GAAN,CAAUK,WAAUqF,EAAME,YAAY,EAAE,QACxC5F,EAAM,GAAN,CAAUK,WAAUqF,EAAMG,UAAU,EAAE,EACvChI,OAACmC,EAAM,GAAN,CACE0F,YAAMC,MAAQ,QACbvI,MAACW,EAAA,CAAO,MAAM,MAAM,QAASoH,EAC3B,SAAA/H,MAAAY,EAAA,CAAAR,GAAA,SAAqB,EACvB,EAEDkI,EAAMC,MAAQ,kBACbvI,MAACW,GAAO,QAASwH,EACf,eAAAvH,EAAA,CAAAR,GAAA,SAAmB,EACrB,GAEJ,IAfa,GAAGkI,EAAMG,UAAU,IAAIH,EAAMC,IAAI,EAgBhD,CACD,EACA,CAAC9F,EAAMc,CAAS,CAAC,EAEdmF,EAAwB3E,UAAQ,IAChCR,GAAa,CAACd,EAAa,GACxBA,EAAKK,IAAKwF,GAAeA,EAAMC,IAAI,EACzC,CAAC9F,CAAI,CAAC,EAET,OAAIc,EAAkBvD,MAAC6E,EAAA,EAAM,EAG3BpE,OAAAkI,WAAA,CACE,UAAA3I,MAACD,EAAA,EAAW,EACZU,OAACqE,GAAW,KAAM,CAAEC,GAAI,EAAGC,GAAI,GAAK,QAAQ,KACzCvC,YAAKwB,QAAU,EACdjE,MAACK,EAAA,CAAM,IAAI,KACT,SAAAL,MAACyB,EAAA,CACC,MAAMvB,EAAAC,EAAC,CAAAC,GAAA,SAAgB,EACvB,KAAMJ,MAAC0B,EAAA,CAAgB,KAAK,OAAM,EAClC,MAAM,SAEN,SAAA1B,MAAAY,EAAA,CAAAR,GAAA,QAAgE,CAAC,EACnE,EACF,EAEAK,OAACmC,EAAA,CAAM,aAAY,GAAC,QAAO,GAAC,iBAAgB,GAAC,gBAAe,GAC1D,UAAA5C,MAAC4C,EAAM,MAAN,CACC,SAAAnC,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAAY,EAAA,CAAAR,GAAA,SAAmB,EACrB,EACAJ,MAAC4C,EAAM,GAAN,CACC,eAAAhC,EAAA,CAAAR,GAAA,SAA2B,EAC7B,EACAJ,MAAC4C,EAAM,GAAN,CACC,eAAAhC,EAAA,CAAAR,GAAA,SAAyB,EAC3B,EACAJ,MAAC4C,EAAM,GAAN,CACC,eAAAhC,EAAA,CAAAR,GAAA,SAAsB,EACxB,GACF,EACF,EACAJ,MAAC4C,EAAM,MAAN,CAAayF,WAAK,GACrB,EAEFrI,MAAC4I,GAAA,CACC,YAAAF,EACA,QAAAlF,EACA,kBAAAqE,CAAA,CAAqC,EAEvCpH,OAACR,EAAA,CACC,OAAQoH,EACR,QAAS,IAAM,CACb7D,IACAgE,GACF,EACA,MAAMtH,EAAAC,EAAC,CAAAC,GAAA,SAAgB,EACvB,SAAQ,GAER,UAAAJ,MAACsB,EAAA,CAAY,KAAK,KAChB,SAAAtB,MAAAY,EAAA,CAAAR,GAAA,SAA2B,EAC7B,QACCyI,GAAA,CAAM1B,6BAAe2B,eAAf3B,cAA6BxB,KAAK;AAAA,GAAM,EAE/C3F,MAACsB,EAAA,CAAY,KAAK,KAChB,eAAAV,EAAA,CAAAR,GAAA,SAAyB,EAC3B,QACCyI,GAAA,CAAM1B,6BAAe4B,aAAf5B,cAA2BxB,KAAK;AAAA,EAAI,CAAE,GAC/C,GACF,GACF,CAEJ,CAoBA,SAASiD,GAAc,CACrBF,cACAlF,UACAqE,mBAKD,EAAG,CACF,KAAM,CAAC/G,CAAW,EAAIE,EACpBC,KAAsB,CAACC,EAAMJ,WAAW,CAAC,CAC3C,EACM,CAACkI,EAAY,CAAE1J,KAAM2J,EAAY1B,MAAO2B,EAAa,EACzDzB,GAAc,EAAK,EACf,CAAC0B,EAAQC,CAAS,EAAIpK,aACtB,CAACI,EAAOC,CAAQ,EAAIL,WAAS,EAAE,EAC/B,CAACS,EAAeM,CAAW,EAAIlB,KAE/BwK,EAAwB,SAAY,CACxC,MAAMrB,EACJ,IACE7F,EAAQC,EAAOC,EAAa+F,aAAa,EAAGpE,OAAW,MAAM,EAC1DzB,KAAMsB,IACLgE,EAAkBhE,EAAIpB,KAAKA,IAAI,EACxByF,EACR,EACA5D,MAAOC,IACNE,EAAiB,CACfC,MAAKxE,EAAAC,EAAE,CAAAC,GAAA,SAAwC,EAC/CuE,QAASJ,EAAIiB,SAAS/C,KAAKgD,OACxB3C,IAAK4C,GAAeA,EAAMf,OAAO,EACjCgB,KAAK;AAAA,CAAI,EACZf,MAAO,MACPgB,WAAOC,GAAA,EAAK,EACb,EAEMqC,EACR,EACLzI,CACF,CACF,EACM6J,EAAe,SAAY,CAC/B,MAAMtB,EACJ,IACE7F,EAAQC,EAAOC,EAAa4F,SAAS,EAAGjE,OAAW,KAAK,EACrDzB,KAAK,IAAM2F,GACX5D,MAAOC,GACFA,EAAIgB,QAAU,KAAOhB,EAAIiB,SAAS/C,KAAK8G,KAAKC,QAC9CJ,EAAU7E,EAAIiB,SAAS/C,KAAK8G,IAAI,EAChCN,IACOf,GAEFA,CACR,EACLzI,CACF,CACF,EAEMgK,EAAkB1F,UAAQ,IACvB,CACL,CACEwE,KAAM,OACNrJ,KAAIgB,EAAAC,EAAE,CAAAC,GAAA,SAAM,EACZjB,YAAWe,EAAAC,EAAE,CAAAC,GAAA,SAA8B,EAC3CsJ,SAAUJ,EACVK,KAAMjB,iBAAalC,SAAS,OAAM,EAEpC,CACE+B,KAAM,iBACNrJ,KAAIgB,EAAAC,EAAE,CAAAC,GAAA,SAAgB,EACtBjB,YAAWe,EAAAC,EAAE,CAAAC,GAAA,SAAuC,EACpDsJ,SAAUL,EACVM,KAAMjB,iBAAalC,SAAS,iBAAgB,CAC7C,EACDD,OAAQqD,GAAW,OACnB,OAAO9I,mBAAa+I,MAAb/I,cAAkBgJ,gBAAgBtD,SAASoD,EAAOrB,KAC3D,CAAC,EACA,CAACG,EAAa5H,CAAW,CAAC,EAEvB,CAACiJ,EAAWC,CAAY,EAAIhL,WAAiB,EAAE,EAErD,cACGqB,EAAA,CACC,UAAAL,MAACD,EAAA,EAAW,EACZC,MAACsB,EAAA,CAAY,KAAK,KAAKpB,WAAAC,EAAC,CAAAC,GAAA,SAAW,EAAE,EACpCqJ,EAAgB3G,IAAK8G,GACpB5J,MAACiK,IAAQ,MAAOL,EAAOzK,YACrB,SAAAa,MAACW,EAAA,CACC,QAASiJ,EAAOF,SAChB,SAAUE,EAAOD,KACjB,QAAQ,UAEPC,WAAO1K,KACV,GAPuC0K,EAAOrB,IAQhD,CACD,EACDvI,MAACC,EAAA,CACC,OAAQ+I,EACR,QAASE,EACT,MAAOlJ,MAACsB,EAAA,CAAY,KAAK,KAAKpB,WAAAC,EAAC,CAAAC,GAAA,SAAqB,CAAC,CAAC,EAEtD,SAAAK,OAACJ,EAAA,CACC,UAAAL,MAACkK,GAAA,CACC,KAAKf,iBAAQgB,WAAY,GACzB,QAAQhB,iBAAQK,SAAU,GAC1B,MAAApK,EACA,MAAO2K,EACP,SAAA1K,EAAmB,EAErBW,MAACW,EAAA,CACC,UAAS,GACT,QAAS,IACPqH,EACE,IACE7F,EAAQC,EAAOC,EAAa4F,SAAS,EAAGjE,OAAW,OAAQ,CACzDoG,KAAMhL,EACP,EACEmD,KAAK,KACJyH,EAAa,EAAE,EACfd,IACA1F,IACO0E,EACR,EACA5D,MAAOoB,GAAU,WAChB,MAAM2E,EAAQnK,EAAAC,EAAG,CAAAC,GAAA,SAA8B,EAE/C4J,WACEtE,UAAMF,WAANE,cAAgBjD,OAAhBiD,cAAsBD,OAAO,KAA7BC,cAAiCf,UAAW0F,CAC9C,EAEA7F,GAAiB,YAAY,EAC7BC,EAAiB,CACfrE,GAAI,aACJsE,MAAKxE,EAAAC,EAAE,CAAAC,GAAA,SAAO,EACduE,QAAS0F,EACTzF,MAAO,MACPgB,WAAO0E,GAAA,EAAqB,EAC7B,EACMpC,CACT,CAAC,EACLzI,CACF,EAGF,eAAAmB,EAAA,CAAAR,GAAA,SAAqB,EACvB,GACF,EACF,GACF,CAEJ,CAEA,eAAe4H,EACb7D,EACA1E,EACA,CACA,KAAM,CAAEuC,kBAAmBhB,EAAkBuJ,WACvC1K,EAAS,MAAMsE,IAASG,MAAOC,GAAQ,OAG3C,OAFAvC,GAAeuC,IAAIiB,SAAS/C,OAAb8B,cAAmB9B,IAAI,EAElC8B,EAAIgB,QAAU,IAEdhB,EAAIiB,SAAS/C,KAAKA,KAAK+H,MAAMC,KAC1BC,GAAcA,EAAKtK,IAAMuK,GAASC,iBACrC,EAEO1C,EAEP3D,EAAIiB,SAAS/C,KAAKA,KAAK+H,MAAMC,KAC1BC,GAAcA,EAAKtK,IAAMuK,GAASE,cACrC,EAEO3C,EAEAA,EAGFA,CAEX,CAAC,EACGrI,GAAUqI,EACZ/F,EAAQC,EAAOC,EAAayI,uBAAuB,EAAG9G,OAAW,OAAQ,CACvEoG,KAAM,MAAM3K,EAAc,CACxBR,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAW,EAClBlB,KAAM,OACNC,YAAWe,EAAAC,EAAE,CAAAC,GAAA,SAAkC,CAAC,CACjD,EACF,EACEmC,KAAMiD,GAAa,OAClBxD,GAAewD,IAAS/C,OAAT+C,cAAe/C,IAAI,EAClC0B,GACF,CAAC,EACAG,MAAOC,GAAQ,OACdvC,GAAeuC,IAAIiB,SAAS/C,OAAb8B,cAAmB9B,IAAI,CACxC,CAAC,EACM5C,GAAUqI,GACnB/F,EAAQC,EAAOC,EAAa0I,mBAAmB,EAAG/G,OAAW,OAAQ,CACnEgH,SAAU,MAAMvL,EAAc,CAC5BR,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAU,EACjBlB,KAAM,WACNC,YAAWe,EAAAC,EAAE,CAAAC,GAAA,SAAqB,CAAC,CACpC,EACF,EACEmC,KAAMiD,GAAa,OAClBxD,GAAewD,IAAS/C,OAAT+C,cAAe/C,IAAI,EAClC0B,GACF,CAAC,EACAG,MAAOC,GAAQ,OACdvC,GAAeuC,IAAIiB,SAAS/C,OAAb8B,cAAmB9B,IAAI,CACxC,CAAC,CAEP,CAEO,MAAMQ,EAAagI,GACxBA,GAAQ,KAAO,QAAU,IAAIC,KAAKD,EAAO,GAAI,EAAEE,iBCzvB1C,SAASC,IAAqB,CACnC,MAAMC,EAAWC,KAEX,CAACnK,EAAMoK,CAAc,EAAInK,EAC7BH,EAAYC,GAAU,CAACA,EAAMC,KAAMD,EAAMqK,cAAc,CAAC,CAC1D,EAEMC,EAA8BzH,UAAQ,KACnC,CACL0H,WAAY,GACZC,UAAW,EAAC,GAEb,EAAE,EAECC,EAAcC,GAAoB,CACtClH,MAAKxE,EAAAC,EAAE,CAAAC,GAAA,SAA0B,EACjCyL,IAAKxJ,EAAayJ,QAClBC,cAAeR,EACfS,OAAQR,EACRS,eAAc/L,EAAAC,EAAE,CAAAC,GAAA,SAAyB,CAAC,CAC3C,EAEK8L,EAAiCnI,UAAQ,KACtC,CACLoI,YAAa,GACbC,SAAU,GACV7G,OAAQ,GACR8G,SAAU,GACVC,OAAQ,GACRC,QAAS,GACThE,KAAM,GACNiE,aAAc,GACdC,cAAe,EAAC,GAEjB,EAAE,EAECC,EAAcd,GAAoB,CACtClH,MAAKxE,EAAAC,EAAE,CAAAC,GAAA,SAA0B,EACjCyL,IAAKxJ,EAAasK,aAClBZ,cAAeR,EACfS,OAAQE,EACRD,eAAc/L,EAAAC,EAAE,CAAAC,GAAA,SAAyB,CAAC,CAC3C,EAEKwM,EAAsB7I,UAC1B,WAAM,OACJ,CAAE9E,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAU,EAAGhB,MAAO+B,iBAAM0L,UACnC,CAAE5N,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAY,EAAGhB,MAAO+B,iBAAMsK,YACrC,CAAExM,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAW,EAAGhB,MAAO+B,iBAAMuK,WACpC,CACEzM,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAQ,EACfhB,MAAOY,MAAC8M,EAAA,CAAqB,OAAO3L,mBAAM4L,UAAN5L,cAAemL,OAAO,GAE5D,CACErN,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAc,EACrBhB,MAAOY,MAAC8M,EAAA,CAAqB,MAAO3L,iBAAM6L,SAAS,GAErD,CACE/N,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAW,EAClBhB,MAAOY,MAAC8M,EAAA,CAAqB,MAAO3L,iBAAM8L,aAAa,EACxD,GAEH,CAAC9L,CAAI,CACP,EAEM+L,EAAsBnJ,UAC1B,yBAAM,OACJ,CAAE9E,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAc,EAAGhB,OAAO+B,mBAAM4L,UAAN5L,cAAegL,aAChD,CAAElN,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAU,EAAGhB,OAAO+B,mBAAM4L,UAAN5L,cAAeiL,UAC5C,CAAEnN,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAQ,EAAGhB,OAAO+B,mBAAM4L,UAAN5L,cAAeoE,QAC1C,CAAEtG,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAU,EAAGhB,OAAO+B,mBAAM4L,UAAN5L,cAAekL,UAC5C,CAAEpN,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAS,EAAGhB,OAAO+B,mBAAM4L,UAAN5L,cAAeoL,SAC3C,CAAEtN,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAM,EAAGhB,MAAOY,MAACoF,EAAA,CAAOjE,6BAAM4L,UAAN5L,cAAeoH,KAAK,GACrD,CAAEtJ,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAc,EAAGhB,OAAO+B,mBAAM4L,UAAN5L,cAAeqL,cAChD,CAAEvN,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAe,EAAGhB,OAAO+B,mBAAM4L,UAAN5L,cAAesL,cAAe,GAElE,CAACtL,CAAI,CACP,EAEA,OACEV,OAAAkI,WAAA,CACGgD,YAAYwB,MACZT,EAAYS,MACb1M,OAACJ,EAAA,CAAM,IAAI,KACT,UAAAI,OAACC,EAAA,CAAM,QAAQ,gBACb,UAAAV,MAACsB,EAAA,CAAY,KAAK,KAChB,SAAAtB,MAAAY,EAAA,CAAAR,GAAA,SAA8B,EAChC,EACAJ,MAACoN,GAAA,CACC,QAAQlN,EAAAC,EAAC,CAAAC,GAAA,SAAiB,EAC1B,KAAMJ,MAACqN,GAAA,EAAQ,EACf,QAAS,CACP,CACEnO,KAAIgB,EAAAC,EAAE,CAAAC,GAAA,SAAc,EACpBwF,WAAO0H,GAAA,EAAQ,EACfC,QAAOrN,EAAAC,EAAE,CAAAC,GAAA,SAA0B,EACnCR,QAAS+L,EAAYrM,MAEvB,CACEJ,KAAIgB,EAAAC,EAAE,CAAAC,GAAA,SAAiB,EACvBwF,WAAO4H,GAAA,EAAO,EACdD,QAAOrN,EAAAC,EAAE,CAAAC,GAAA,SAAsB,EAC/BR,QAASA,IAAM,CACbyL,EAAS,kBAAkB,CAC7B,EACD,EACD,GAEN,EACCoC,EAAkBb,CAAmB,EAEtCnM,OAACC,EAAA,CAAM,QAAQ,gBACb,UAAAV,MAACsB,EAAA,CAAY,KAAK,KAChB,SAAAtB,MAAAY,EAAA,CAAAR,GAAA,SAA8B,EAChC,EACAJ,MAAC0N,GAAA,CACC,KAAKxN,EAAAC,EAAC,CAAAC,GAAA,SAAc,EACpB,KAAMJ,MAACsN,GAAA,EAAQ,EACf,QAAQpN,EAAAC,EAAC,CAAAC,GAAA,SAA0B,EACnC,QAASsM,EAAYpN,KACrB,QAAQ,QAAO,GAEnB,EACCmO,EAAkBP,CAAmB,GACxC,GACF,EAGF,SAASO,EAAkBhL,EAAuC,CAChE,OACEzC,MAAC4C,EAAA,CACC,SAAA5C,MAAC4C,EAAM,MAAN,CACEH,WAAKK,IAAKsD,GACT3F,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAAY,EAAA,CAAAR,GAAA,SAAAuN,OAAA,CAAAC,EAAQxH,EAAKnH,OAAc,EAC7B,EACAe,MAAC4C,EAAM,GAAN,CAAUwD,WAAKhH,MAAM,IAJTgH,EAAKnH,KAKpB,CACD,EACH,EACF,CAEJ,CACF,CCtIA,SAAS4O,GAAOjJ,EAAe,CAC7B,MAAO,CAAE,CAACkJ,GAAcC,OAAOnJ,CAAK,EAAE,CAAC,CAAC,EAAGA,EAC7C,CACA,MAAMoJ,GAASC,OAAOC,OACpB,GACA,GAAGD,OAAOE,KAAKL,GAAcC,MAAM,EAAEjL,IAAKsL,GAAQP,GAAOO,CAAG,CAAC,CAC/D,EAEO,SAASC,GAAU,CAAEC,QAAqC,EAAG,CAClE,MAAMC,EAAQC,KACR,CAACC,EAAWC,EAAUC,CAAW,EAAIC,GACzC3N,EAAYC,GAAU,CAACA,EAAMuN,UAAWvN,EAAMwN,SAAUxN,EAAMyN,WAAW,CAAC,CAC5E,EAGA,SAASE,EAAmBzP,EAAe,CACzC,MAAM0P,EAAMC,GAAUtE,KAAMuE,GAASA,EAAK5P,QAAUA,CAAK,EACzD,OAAI0P,EAAYA,EAAI7P,MACb,IACT,CAEA,KAAM,CAACgQ,EAAQC,CAAS,EAAIlQ,WAAS,EAAE,EAEvC,SAASmQ,EAAa/P,EAAe,CACnC,MAAMgQ,EAAIP,EAAmBzP,CAAK,EAClC8P,EAAU9P,CAAK,EAEfsP,EAAS,CAAC,CAAEW,IAAK,SAAUjQ,MAAOgQ,EAAEE,UAAS,CAAG,CAAC,CACnD,CAEA,cACGC,GAAA,CAAU,EAAE,OAAO,IAAKjB,EAAQ,EAAG,EAClC,UAAAtO,MAACsB,EAAA,CAAY,KAAK,KAChB,SAAAtB,MAAAY,EAAA,CAAAR,GAAA,SAA+B,EACjC,EACAJ,MAAC4C,EAAA,CACC,SAAAnC,OAACmC,EAAM,MAAN,CACC,UAAAnC,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAAY,EAAA,CAAAR,GAAA,SAAuB,EACzB,EACAJ,MAAC4C,EAAM,GAAN,CACC,eAAC4M,GAAA,CAAe,MAAO,IAAI,EAC7B,QACC5M,EAAM,GAAN,CACE6M,WAMC,CAEJ,GACF,EACAhP,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAAY,EAAA,CAAAR,GAAA,SAAyB,EAC3B,EACAJ,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAACU,EAAA,CAAM,QAAQ,OACb,SAAAV,MAAC0P,GAAA,EAAW,EACd,EACF,EACA1P,MAAC4C,EAAM,GAAN,EAAQ,GACX,EACAnC,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAAY,EAAA,CAAAR,GAAA,SAA8B,EAChC,EACAJ,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAC2P,GAAA,CACC,OAAO,MACP,SAAWC,GACTlB,EAAS,CAAC,CAAEW,IAAK,eAAgBjQ,MAAO4O,GAAO4B,CAAC,EAAG,CAAC,EAEtD,WAAY,GACZ,SAAU3B,OAAOE,KAAKH,EAAM,EAAE,EAElC,EACAhO,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAACW,EAAA,CAAO,MAAO4N,EAAMsB,aAAc,QAAQ,QACzC,SAAA7P,MAAAY,EAAA,CAAAR,GAAA,QAAqB,CAAC,EACxB,EACF,GACF,EACAK,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAAY,EAAA,CAAAR,GAAA,SAA0B,EAC5B,EACAJ,MAAC4C,EAAM,GAAN,CACC,eAACkN,GAAA,CACC,aAAW,qBACX,MAAOrB,EAAUsB,WACjB,SAAWH,GAAMlB,EAAS,CAAC,CAAEW,IAAK,aAAcjQ,MAAOwQ,EAAG,CAAC,EAAE,EAEjE,EACA5P,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAC0C,EAAA,CACC,QAAQ,UACR,aAAW,oBACX,QAAS,IACPgM,EAAS,CAAC,CAAEW,IAAK,aAAcjQ,MAAO,UAAW,CAAC,EAGpD,SAAAY,MAACgQ,GAAA,EAAW,EACd,EACF,GACF,EACAvP,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAAY,EAAA,CAAAR,GAAA,SAA0B,EAC5B,EACAJ,MAAC4C,EAAM,GAAN,CACC,eAACkN,GAAA,CACC,aAAW,qBACX,MAAOrB,EAAUwB,WACjB,SAAWL,GAAMlB,EAAS,CAAC,CAAEW,IAAK,aAAcjQ,MAAOwQ,EAAG,CAAC,EAAE,EAEjE,EACA5P,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAC0C,EAAA,CACC,QAAQ,UACR,aAAW,oBACX,QAAS,IACPgM,EAAS,CAAC,CAAEW,IAAK,aAAcjQ,MAAO,UAAW,CAAC,EAGpD,SAAAY,MAACgQ,GAAA,EAAW,EACd,EACF,GACF,EACAvP,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAAY,EAAA,CAAAR,GAAA,SAA4B,EAC9B,EACAJ,MAAC4C,EAAM,GAAN,CACC,eAACsN,GAAA,CACC,MAAQC,GAAQtB,EAAmBsB,CAAG,EACtC,aAAc,GACd,KAAM,GACN,MAAOpB,GACP,MAAOE,EACP,SAAUE,EACV,GAAI,GAAG,EAEX,GACF,EACA1O,OAACmC,EAAM,GAAN,CACC,UAAA5C,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAAAY,EAAA,CAAAR,GAAA,SAAqB,EACvB,EACAJ,MAAC4C,EAAM,GAAN,CACC,SAAA5C,MAACU,EAAA,CAAM,QAAQ,OACb,SAAAV,MAACoQ,GAAA,CACC,aAAW,uBACX,KAAM,CACJ,CAAEhR,MAAO,OAAQH,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAM,CAAC,EAC/B,CAAEhB,MAAO,OAAQH,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAM,CAAC,EAC/B,CAAEhB,MAAO,OAAQH,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAM,CAAC,CAAE,EAEnC,MAAOqO,EAAU4B,OACjB,SAAWT,GAAM,CACXA,GAAK,MAAMlB,EAAS,CAAC,CAAEW,IAAK,SAAUjQ,MAAOwQ,EAAG,CAAC,CACvD,EAAE,EAEN,EACF,QACChN,EAAM,GAAN,CACC,SAAA5C,MAACU,EAAA,CAAM,QAAQ,OACb,SAAAV,MAAC6E,EAAA,CAAO,KAAM4J,EAAU4B,OAAQ,IAAK,GAAI,KAAK,KAAI,EACpD,EACF,GACF,GACF,EACF,GACF,CAEJ,CCxMO,SAASC,IAAiB,CAI/B,OACEtQ,MAAC,OACC,SAAAS,OAACqE,EAAA,CAAW,KAAM,CAAEyL,KAAM,EAAGvL,GAAI,GAAK,QAAQ,KAC5C,UAAAhF,MAACuP,GAAA,CAAU,EAAE,OACX,SAAAvP,MAACoL,KAAkB,EACrB,EACApL,MAAC+G,EAAA,CAAK,OAAO,KACX,SAAA/G,MAAC+G,EAAK,IAAL,CACC,SAAA/G,MAACqO,GAAA,CAAU,OAAQmC,IAAqB,EAC1C,EACF,GACF,EACF,CAEJ,CCCA,MAAMC,GAAsBC,GAC1BC,OAAK,WAAM,OAAO,mCAAuB,4DAAC,CAC5C,EAKA,SAAwBC,IAAe,CACrC,KAAM,CAACzP,EAAM0P,CAAU,EAAIzP,EACzBH,EAAYC,GAAU,CAACA,EAAMC,KAAMD,EAAM2P,UAAU,CAAC,CACtD,EAEMC,EAAkC/M,UAAQ,IACvC,CACL,CACE7E,KAAM,UACND,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAS,EAChBwF,WAAOmL,GAAA,EAAc,EACrBC,cAAUV,GAAA,EAAc,GAE1B,CACEpR,KAAM,WACND,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAU,EACjBwF,WAAOqL,GAAA,EAAQ,EACfD,cAAUnQ,GAAA,EAAe,GAE3B,CACE3B,KAAM,UACND,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAiB,EACxBwF,WAAOsL,GAAA,EAAiB,EACxBF,QACEhR,MAACmR,EAAA,CACC,KAAM,CACJ,kBACA,gBACA,sBACA,iBACA,sBACA,2BACA,wBACA,yBACA,+BACA,8BAA8B,EAC9B,GAIR,CACEjS,KAAM,SACND,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAQ,EACfwF,WAAOwL,GAAA,EAAU,EACjBJ,QACEhR,MAACmR,EAAA,CACC,KAAM,CACJ,eACA,eACA,eACA,yBACA,4BACA,6BACA,qCACA,yCACA,iCACA,4BACA,wCACA,gCACA,gCACA,mCACA,sCACA,kDACA,mCACA,+CACA,4CACA,oCACA,+CAA+C,EAC/C,GAIR,CACEjS,KAAM,gBACND,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAe,EACtBwF,WAAOyL,GAAA,EAAW,EAClBL,cACGP,GAAA,CACC,MAAM,eACN,OAAQ,GACR,QAAQvQ,EAAAC,EAAC,CAAAC,GAAA,SAAuE,CAAC,CAAC,GAIxF,CACElB,KAAM,YACND,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAW,EAClBwF,WAAO0L,GAAA,EAAiB,EACxBN,cACGG,EAAA,CACC,KAAM,CAAC,gBAAiB,eAAgB,uBAAuB,EAAE,GAIvE,CACEjS,KAAM,UACND,MAAKiB,EAAAC,EAAE,CAAAC,GAAA,SAAiB,EACxBwF,WAAO2L,GAAA,EAAiB,EACxBP,QAAShR,MAACyQ,GAAA,CAAoB,OAAQ,GAAM,EAC7C,EAEF,EAAE,EAEL,OAAKI,IAKHpQ,OAAAkI,WAAA,CACE,UAAA3I,MAACwR,GAAA,CAAU,MAAMtR,EAAAC,EAAC,CAAAC,GAAA,SAAe,EAAE,EACnCK,OAACJ,EAAA,CAAM,IAAI,KACT,UAAAL,MAACyR,GAAA,CACC,MAAM,OACN,MAAMvR,EAAAC,EAAC,CAAAC,GAAA,SAAkB,EACzB,SACEe,WAAMsK,aAActK,WAAMuK,WACtB,GAAGvK,iBAAMsK,UAAU,IAAItK,iBAAMuK,SAAS,GACtC,KAEN,WAAWvK,iBAAM0L,WAAY,GAAG,EAElC7M,MAAC0R,IACC,QAAQ,gBACR,OAAQZ,EACR,MAAM,eACN,GAAI,KAAK,GAEb,GACF,QAxBQa,GAAA,EAAQ,CA0BpB","names":["createPromise","resolver","Promise","resolve","useReauth","inputProps","setInputProps","useState","label","name","description","value","setValue","open","setOpen","setResolver","getReauthText","props","promise","onClick","result","positive","ReauthModal","jsx","Modal","_i18n","_","id","Stack","TextInput","event","currentTarget","jsxs","Group","Button","_Trans","SecurityContent","auth_config","sso_enabled","useServerApiState","useShallow","state","user","useUserState","Accordion","StylishText","EmailSection","ProviderSection","Alert","IconAlertCircle","MfaSection","ApiTokenTable","isSuperuser","AuthContextSection","auth_context","setAuthContext","fetchAuthContext","useCallback","authApi","apiUrl","ApiEndpoints","auth_session","then","resp","data","ActionIcon","IconRefresh","Table","methods","map","method","index","parseDate","at","selectedEmail","setSelectedEmail","newEmailValue","setNewEmailValue","isLoading","refetch","useQuery","queryKey","queryFn","auth_email","res","emailAvailable","useMemo","undefined","length","runServerAction","action","vals","email","catch","err","hideNotification","showNotification","title","message","color","Loader","SimpleGrid","xs","md","Radio","String","primary","Badge","verified","IconAt","status","response","errors","error","join","icon","IconX","ProviderButton","provider","ProviderLogin","auth_providers","availableProviders","configuredProviders","item","socialaccount","providers","filter","includes","removeProvider","uid","split","account","console","log","Grid","link","display","Text","recoveryCodes","setRecoveryCodes","recoveryCodesOpen","openRecoveryCodes","close","closeRecoveryCodes","useDisclosure","api","get","auth_authenticators","showRecoveryCodes","codes","removeTotp","runActionWithFallback","auth_totp","ResultType","viewRecoveryCodes","auth_recovery","rows","token","type","last_used_at","created_at","usedFactors","Fragment","MfaAddSection","Code","unused_codes","used_codes","totpQrOpen","openTotpQr","closeTotpQr","totpQr","setTotpQr","registerRecoveryCodes","registerTotp","meta","secret","possibleFactors","function","used","factor","mfa","supported_types","totpError","setTotpError","Tooltip","QrRegistrationForm","totp_url","code","errorMsg","IconExclamationCircle","getState","flows","find","flow","FlowEnum","MfaReauthenticate","Reauthenticate","auth_mfa_reauthenticate","auth_reauthenticate","password","date","Date","toLocaleString","AccountDetailPanel","navigate","useNavigate","fetchUserState","userFields","first_name","last_name","editAccount","useEditApiFormModal","url","user_me","onFormSuccess","fields","successMessage","profileFields","displayname","position","location","active","contact","organisation","primary_group","editProfile","user_profile","accountDetailFields","username","YesNoUndefinedButton","profile","is_staff","is_superuser","profileDetailFields","modal","ActionDropdown","IconUser","IconEdit","tooltip","IconKey","renderDetailTable","ActionButton","values","0","getLkp","DEFAULT_THEME","colors","LOOKUP","Object","assign","keys","clr","UserTheme","height","theme","useMantineTheme","userTheme","setTheme","setLanguage","useLocalState","getRadiusFromValue","obj","SizeMarks","mark","radius","setRadius","changeRadius","r","key","toString","Container","LanguageSelect","IS_DEV","ColorToggle","ColorPicker","v","primaryColor","ColorInput","whiteColor","IconRestore","blackColor","Slider","val","Select","loader","AccountContent","base","SECONDARY_COL_HEIGHT","PluginSettingsGroup","Loadable","lazy","UserSettings","isLoggedIn","userSettingsPanels","IconUserCircle","content","IconLock","IconDeviceDesktop","UserSettingList","IconSearch","IconBellCog","IconFileAnalytics","IconPlugConnected","PageTitle","SettingsHeader","PanelGroup","Skeleton"],"ignoreList":[],"sources":["../../../../../../frontend/src/pages/Index/Settings/AccountSettings/useConfirm.tsx","../../../../../../frontend/src/pages/Index/Settings/AccountSettings/SecurityContent.tsx","../../../../../../frontend/src/pages/Index/Settings/AccountSettings/AccountDetailPanel.tsx","../../../../../../frontend/src/pages/Index/Settings/AccountSettings/UserThemePanel.tsx","../../../../../../frontend/src/pages/Index/Settings/AccountSettings/UserPanel.tsx","../../../../../../frontend/src/pages/Index/Settings/UserSettings.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Button, Group, Modal, Stack, TextInput } from '@mantine/core';\nimport { type JSX, useState } from 'react';\n\n/* Adapted from https://daveteu.medium.com/react-custom-confirmation-box-458cceba3f7b */\nconst createPromise = () => {\n  let resolver: any;\n  return [\n    new Promise((resolve) => {\n      resolver = resolve;\n    }),\n    resolver\n  ];\n};\n\n/* Adapted from https://daveteu.medium.com/react-custom-confirmation-box-458cceba3f7b */\nexport const useConfirm = () => {\n  const [open, setOpen] = useState(false);\n  const [resolver, setResolver] = useState<((status: boolean) => void) | null>(\n    null\n  );\n  const [label, setLabel] = useState('');\n\n  const getConfirmation = async (text: string) => {\n    setLabel(text);\n    setOpen(true);\n    const [promise, resolve] = await createPromise();\n\n    setResolver(resolve);\n    return promise;\n  };\n\n  const onClick = async (status: boolean) => {\n    setOpen(false);\n    if (resolver) {\n      resolver(status);\n    }\n  };\n\n  const Confirmation = () => (\n    <Modal opened={open} onClose={() => setOpen(false)}>\n      {label}\n      <Button onClick={() => onClick(false)}> Cancel </Button>\n      <Button onClick={() => onClick(true)}> OK </Button>\n    </Modal>\n  );\n\n  return [getConfirmation, Confirmation];\n};\n\ntype InputProps = {\n  label: string;\n  name: string;\n  description: string;\n};\nexport const useReauth = (): [\n  (props: InputProps) => Promise<[string, boolean]>,\n  () => JSX.Element\n] => {\n  const [inputProps, setInputProps] = useState<InputProps>({\n    label: '',\n    name: '',\n    description: ''\n  });\n\n  const [value, setValue] = useState('');\n  const [open, setOpen] = useState(false);\n  const [resolver, setResolver] = useState<{\n    resolve: (result: string, positive: boolean) => void;\n  } | null>(null);\n\n  const getReauthText = async (props: InputProps) => {\n    setInputProps(props);\n    setOpen(true);\n    const [promise, resolve] = await createPromise();\n\n    setResolver({ resolve });\n    return promise;\n  };\n\n  const onClick = async (result: string, positive: boolean) => {\n    setOpen(false);\n    if (resolver) {\n      resolver.resolve(result, positive);\n    }\n  };\n\n  const ReauthModal = () => (\n    <Modal\n      opened={open}\n      onClose={() => setOpen(false)}\n      title={t`Reauthentication`}\n    >\n      <Stack>\n        <TextInput\n          required\n          label={inputProps.label}\n          name={inputProps.name}\n          description={inputProps.description}\n          value={value}\n          onChange={(event) => setValue(event.currentTarget.value)}\n        />\n        <Group justify='space-between'>\n          <Button onClick={() => onClick('', false)} color='red'>\n            <Trans>Cancel</Trans>\n          </Button>\n          <Button onClick={() => onClick(value, true)}>\n            <Trans>OK</Trans>\n          </Button>\n        </Group>\n      </Stack>\n    </Modal>\n  );\n\n  return [getReauthText, ReauthModal];\n};\n","import { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { type AuthConfig, type AuthProvider, FlowEnum } from '@lib/types/Auth';\nimport { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  Accordion,\n  ActionIcon,\n  Alert,\n  Badge,\n  Button,\n  Code,\n  Grid,\n  Group,\n  Loader,\n  Modal,\n  Radio,\n  SimpleGrid,\n  Stack,\n  Table,\n  Text,\n  TextInput,\n  Tooltip\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { hideNotification, showNotification } from '@mantine/notifications';\nimport {\n  IconAlertCircle,\n  IconAt,\n  IconExclamationCircle,\n  IconRefresh,\n  IconX\n} from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useShallow } from 'zustand/react/shallow';\nimport { api } from '../../../../App';\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { ProviderLogin, authApi } from '../../../../functions/auth';\nimport { useServerApiState } from '../../../../states/ServerApiState';\nimport { useUserState } from '../../../../states/UserState';\nimport { ApiTokenTable } from '../../../../tables/settings/ApiTokenTable';\nimport { QrRegistrationForm } from './QrRegistrationForm';\nimport { useReauth } from './useConfirm';\n\nexport function SecurityContent() {\n  const [auth_config, sso_enabled] = useServerApiState(\n    useShallow((state) => [state.auth_config, state.sso_enabled])\n  );\n\n  const user = useUserState();\n\n  return (\n    <Stack>\n      <Accordion multiple defaultValue={['email']}>\n        <Accordion.Item value='email'>\n          <Accordion.Control>\n            <StylishText size='lg'>{t`Email Addresses`}</StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <EmailSection />\n          </Accordion.Panel>\n        </Accordion.Item>\n        <Accordion.Item value='sso'>\n          <Accordion.Control>\n            <StylishText size='lg'>{t`Single Sign On`}</StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            {sso_enabled() ? (\n              <ProviderSection auth_config={auth_config} />\n            ) : (\n              <Alert\n                icon={<IconAlertCircle size='1rem' />}\n                title={t`Not enabled`}\n                color='yellow'\n              >\n                <Trans>Single Sign On is not enabled for this server </Trans>\n              </Alert>\n            )}\n          </Accordion.Panel>\n        </Accordion.Item>\n        <Accordion.Item value='mfa'>\n          <Accordion.Control>\n            <StylishText size='lg'>{t`Multi-Factor Authentication`}</StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <MfaSection />\n          </Accordion.Panel>\n        </Accordion.Item>\n        <Accordion.Item value='token'>\n          <Accordion.Control>\n            <StylishText size='lg'>{t`Access Tokens`}</StylishText>\n          </Accordion.Control>\n          <Accordion.Panel>\n            <ApiTokenTable only_myself />\n          </Accordion.Panel>\n        </Accordion.Item>\n        {user.isSuperuser() && (\n          <Accordion.Item value='session'>\n            <Accordion.Control>\n              <StylishText size='lg'>{t`Session Information`}</StylishText>\n            </Accordion.Control>\n            <Accordion.Panel>\n              <AuthContextSection />\n            </Accordion.Panel>\n          </Accordion.Item>\n        )}\n      </Accordion>\n    </Stack>\n  );\n}\n\nfunction AuthContextSection() {\n  const [auth_context, setAuthContext] = useServerApiState(\n    useShallow((state) => [state.auth_context, state.setAuthContext])\n  );\n\n  const fetchAuthContext = useCallback(() => {\n    authApi(apiUrl(ApiEndpoints.auth_session)).then((resp) => {\n      setAuthContext(resp.data.data);\n    });\n  }, [setAuthContext]);\n\n  return (\n    <Stack gap='xs'>\n      <Group>\n        <ActionIcon\n          onClick={fetchAuthContext}\n          variant='transparent'\n          aria-label='refresh-auth-context'\n        >\n          <IconRefresh />\n        </ActionIcon>\n      </Group>\n\n      <Table>\n        <Table.Thead>\n          <Table.Tr>\n            <Table.Th>{t`Timestamp`}</Table.Th>\n            <Table.Th>{t`Method`}</Table.Th>\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>\n          {auth_context?.methods?.map((method: any, index: number) => (\n            <Table.Tr key={`auth-method-${index}`}>\n              <Table.Td>{parseDate(method.at)}</Table.Td>\n              <Table.Td>{method.method}</Table.Td>\n            </Table.Tr>\n          ))}\n        </Table.Tbody>\n      </Table>\n    </Stack>\n  );\n}\n\nfunction EmailSection() {\n  const [selectedEmail, setSelectedEmail] = useState<string>('');\n  const [newEmailValue, setNewEmailValue] = useState('');\n  const { isLoading, data, refetch } = useQuery({\n    queryKey: ['emails'],\n    queryFn: () =>\n      authApi(apiUrl(ApiEndpoints.auth_email)).then((res) => res.data.data)\n  });\n  const emailAvailable = useMemo(() => {\n    return data == undefined || data.length == 0;\n  }, [data]);\n\n  function runServerAction(\n    action: 'patch' | 'post' | 'put' | 'delete' = 'post',\n    data?: any\n  ) {\n    const vals: any = data || { email: selectedEmail };\n    return authApi(apiUrl(ApiEndpoints.auth_email), undefined, action, vals)\n      .then(() => {\n        refetch();\n      })\n      .catch((err) => {\n        hideNotification('email-error');\n\n        showNotification({\n          id: 'email-error',\n          title: t`Error`,\n          message: t`Error while updating email`,\n          color: 'red'\n        });\n      });\n  }\n\n  if (isLoading) return <Loader />;\n\n  return (\n    <SimpleGrid cols={{ xs: 1, md: 2 }} spacing='sm'>\n      {emailAvailable ? (\n        <Stack gap='xs'>\n          <Alert\n            icon={<IconAlertCircle size='1rem' />}\n            title={t`Not Configured`}\n            color='yellow'\n          >\n            <Trans>Currently no email addresses are registered.</Trans>\n          </Alert>\n        </Stack>\n      ) : (\n        <Radio.Group\n          value={selectedEmail}\n          onChange={setSelectedEmail}\n          name='email_accounts'\n          label={t`The following email addresses are associated with your account:`}\n        >\n          <Stack mt='xs'>\n            {data.map((email: any) => (\n              <Radio\n                key={email.email}\n                value={String(email.email)}\n                label={\n                  <Group justify='space-apart'>\n                    {email.email}\n                    <Group justify='right'>\n                      {email.primary && (\n                        <Badge color='blue'>\n                          <Trans>Primary</Trans>\n                        </Badge>\n                      )}\n                      {email.verified ? (\n                        <Badge color='green'>\n                          <Trans>Verified</Trans>\n                        </Badge>\n                      ) : (\n                        <Badge color='yellow'>\n                          <Trans>Unverified</Trans>\n                        </Badge>\n                      )}\n                    </Group>\n                  </Group>\n                }\n              />\n            ))}\n            <Group>\n              <Button\n                onClick={() =>\n                  runServerAction('patch', {\n                    email: selectedEmail,\n                    primary: true\n                  })\n                }\n                disabled={!selectedEmail}\n              >\n                <Trans>Make Primary</Trans>\n              </Button>\n              <Button\n                onClick={() => runServerAction('put')}\n                disabled={!selectedEmail}\n              >\n                <Trans>Re-send Verification</Trans>\n              </Button>\n              <Button\n                onClick={() => runServerAction('delete')}\n                disabled={!selectedEmail}\n                color='red'\n              >\n                <Trans>Remove</Trans>\n              </Button>\n            </Group>\n          </Stack>\n        </Radio.Group>\n      )}\n      <Stack>\n        <StylishText size='md'>{t`Add Email Address`}</StylishText>\n        <TextInput\n          label={t`E-Mail`}\n          placeholder={t`E-Mail address`}\n          leftSection={<IconAt />}\n          aria-label='email-address-input'\n          value={newEmailValue}\n          onChange={(event) => setNewEmailValue(event.currentTarget.value)}\n        />\n        <Button\n          aria-label='email-address-submit'\n          onClick={() =>\n            runServerAction('post', { email: newEmailValue }).catch((err) => {\n              if (err.status == 400) {\n                showNotification({\n                  title: t`Error while adding email`,\n                  message: err.response.data.errors\n                    .map((error: any) => error.message)\n                    .join('\\n'),\n                  color: 'red',\n                  icon: <IconX />\n                });\n              }\n            })\n          }\n        >\n          <Trans>Add Email</Trans>\n        </Button>\n      </Stack>\n    </SimpleGrid>\n  );\n}\n\nfunction ProviderButton({ provider }: Readonly<{ provider: AuthProvider }>) {\n  return (\n    <Button\n      key={provider.id}\n      variant='outline'\n      onClick={() => ProviderLogin(provider, 'connect')}\n    >\n      <Group justify='space-between'>{provider.name}</Group>\n    </Button>\n  );\n}\n\nfunction ProviderSection({\n  auth_config\n}: Readonly<{ auth_config: AuthConfig | undefined }>) {\n  const [value, setValue] = useState<string>('');\n  const { isLoading, data, refetch } = useQuery({\n    queryKey: ['provider-list'],\n    queryFn: () =>\n      authApi(apiUrl(ApiEndpoints.auth_providers))\n        .then((res) => res?.data?.data ?? [])\n        .catch(() => [])\n  });\n\n  const availableProviders = useMemo(() => {\n    if (!auth_config || !data) return [];\n\n    const configuredProviders = data.map((item: any) => item.provider.id);\n    return auth_config.socialaccount.providers.filter(\n      (provider: any) => !configuredProviders.includes(provider.id)\n    );\n  }, [auth_config, data]);\n\n  function removeProvider() {\n    const [uid, provider] = value.split('$');\n    authApi(apiUrl(ApiEndpoints.auth_providers), undefined, 'delete', {\n      provider,\n      account: uid\n    })\n      .then(() => {\n        refetch();\n      })\n      .catch((res) => console.log(res.data));\n  }\n\n  if (isLoading) return <Loader />;\n\n  return (\n    <Grid>\n      <Grid.Col span={6}>\n        {data.length == 0 ? (\n          <Stack gap='xs'>\n            <Alert\n              icon={<IconAlertCircle size='1rem' />}\n              title={t`Not Configured`}\n              color='yellow'\n            >\n              <Trans>There are no providers connected to this account.</Trans>\n            </Alert>\n          </Stack>\n        ) : (\n          <Stack>\n            <Radio.Group\n              value={value}\n              onChange={setValue}\n              name='sso_accounts'\n              label={t`You can sign in to your account using any of the following providers`}\n            >\n              <Stack mt='xs'>\n                {data.map((link: any) => (\n                  <Radio\n                    key={link.uid}\n                    value={[link.uid, link.provider.id].join('$')}\n                    label={`${link.provider.name}: ${link.display}`}\n                  />\n                ))}\n              </Stack>\n            </Radio.Group>\n            <Button onClick={removeProvider}>\n              <Trans>Remove Provider Link</Trans>\n            </Button>\n          </Stack>\n        )}\n      </Grid.Col>\n      <Grid.Col span={6}>\n        <Stack>\n          <Text>Add SSO Account</Text>\n          {availableProviders === undefined ? (\n            <Text>\n              <Trans>Loading</Trans>\n            </Text>\n          ) : (\n            <Stack gap='xs'>\n              {availableProviders.map((provider: any) => (\n                <ProviderButton key={provider.id} provider={provider} />\n              ))}\n            </Stack>\n          )}\n        </Stack>\n      </Grid.Col>\n    </Grid>\n  );\n}\n\nfunction MfaSection() {\n  const [getReauthText, ReauthModal] = useReauth();\n  const [recoveryCodes, setRecoveryCodes] = useState<\n    Recoverycodes | undefined\n  >();\n  const [\n    recoveryCodesOpen,\n    { open: openRecoveryCodes, close: closeRecoveryCodes }\n  ] = useDisclosure(false);\n  const { isLoading, data, refetch } = useQuery({\n    queryKey: ['mfa-list'],\n    queryFn: () =>\n      api\n        .get(apiUrl(ApiEndpoints.auth_authenticators))\n        .then((res) => res?.data?.data ?? [])\n        .catch(() => [])\n  });\n\n  function showRecoveryCodes(codes: Recoverycodes) {\n    setRecoveryCodes(codes);\n    openRecoveryCodes();\n  }\n\n  const removeTotp = () => {\n    runActionWithFallback(\n      () =>\n        authApi(apiUrl(ApiEndpoints.auth_totp), undefined, 'delete').then(\n          () => {\n            refetch();\n            return ResultType.success;\n          }\n        ),\n      getReauthText\n    );\n  };\n  const viewRecoveryCodes = () => {\n    runActionWithFallback(\n      () =>\n        authApi(apiUrl(ApiEndpoints.auth_recovery), undefined, 'get').then(\n          (res) => {\n            showRecoveryCodes(res.data.data);\n            return ResultType.success;\n          }\n        ),\n      getReauthText\n    );\n  };\n\n  const rows = useMemo(() => {\n    if (isLoading || !data) return null;\n    return data.map((token: any) => (\n      <Table.Tr key={`${token.created_at}-${token.type}`}>\n        <Table.Td>{token.type}</Table.Td>\n        <Table.Td>{parseDate(token.last_used_at)}</Table.Td>\n        <Table.Td>{parseDate(token.created_at)}</Table.Td>\n        <Table.Td>\n          {token.type == 'totp' && (\n            <Button color='red' onClick={removeTotp}>\n              <Trans>Remove</Trans>\n            </Button>\n          )}\n          {token.type == 'recovery_codes' && (\n            <Button onClick={viewRecoveryCodes}>\n              <Trans>View</Trans>\n            </Button>\n          )}\n        </Table.Td>\n      </Table.Tr>\n    ));\n  }, [data, isLoading]);\n\n  const usedFactors: string[] = useMemo(() => {\n    if (isLoading || !data) return [];\n    return data.map((token: any) => token.type);\n  }, [data]);\n\n  if (isLoading) return <Loader />;\n\n  return (\n    <>\n      <ReauthModal />\n      <SimpleGrid cols={{ xs: 1, md: 2 }} spacing='sm'>\n        {data.length == 0 ? (\n          <Stack gap='xs'>\n            <Alert\n              title={t`Not Configured`}\n              icon={<IconAlertCircle size='1rem' />}\n              color='yellow'\n            >\n              <Trans>No multi-factor tokens configured for this account</Trans>\n            </Alert>\n          </Stack>\n        ) : (\n          <Table stickyHeader striped highlightOnHover withTableBorder>\n            <Table.Thead>\n              <Table.Tr>\n                <Table.Th>\n                  <Trans>Type</Trans>\n                </Table.Th>\n                <Table.Th>\n                  <Trans>Last used at</Trans>\n                </Table.Th>\n                <Table.Th>\n                  <Trans>Created at</Trans>\n                </Table.Th>\n                <Table.Th>\n                  <Trans>Actions</Trans>\n                </Table.Th>\n              </Table.Tr>\n            </Table.Thead>\n            <Table.Tbody>{rows}</Table.Tbody>\n          </Table>\n        )}\n        <MfaAddSection\n          usedFactors={usedFactors}\n          refetch={refetch}\n          showRecoveryCodes={showRecoveryCodes}\n        />\n        <Modal\n          opened={recoveryCodesOpen}\n          onClose={() => {\n            refetch();\n            closeRecoveryCodes();\n          }}\n          title={t`Recovery Codes`}\n          centered\n        >\n          <StylishText size='lg'>\n            <Trans>Unused Codes</Trans>\n          </StylishText>\n          <Code>{recoveryCodes?.unused_codes?.join('\\n')}</Code>\n\n          <StylishText size='lg'>\n            <Trans>Used Codes</Trans>\n          </StylishText>\n          <Code>{recoveryCodes?.used_codes?.join('\\n')}</Code>\n        </Modal>\n      </SimpleGrid>\n    </>\n  );\n}\n\nenum ResultType {\n  success = 0,\n  reauth = 1,\n  mfareauth = 2,\n  error = 3\n}\n\nexport interface Recoverycodes {\n  type: string;\n  created_at: number;\n  last_used_at: null;\n  total_code_count: number;\n  unused_code_count: number;\n  unused_codes: string[];\n  used_code_count: number;\n  used_codes: string[];\n}\n\nfunction MfaAddSection({\n  usedFactors,\n  refetch,\n  showRecoveryCodes\n}: Readonly<{\n  usedFactors: string[];\n  refetch: () => void;\n  showRecoveryCodes: (codes: Recoverycodes) => void;\n}>) {\n  const [auth_config] = useServerApiState(\n    useShallow((state) => [state.auth_config])\n  );\n  const [totpQrOpen, { open: openTotpQr, close: closeTotpQr }] =\n    useDisclosure(false);\n  const [totpQr, setTotpQr] = useState<{ totp_url: string; secret: string }>();\n  const [value, setValue] = useState('');\n  const [getReauthText, ReauthModal] = useReauth();\n\n  const registerRecoveryCodes = async () => {\n    await runActionWithFallback(\n      () =>\n        authApi(apiUrl(ApiEndpoints.auth_recovery), undefined, 'post')\n          .then((res) => {\n            showRecoveryCodes(res.data.data);\n            return ResultType.success;\n          })\n          .catch((err) => {\n            showNotification({\n              title: t`Error while registering recovery codes`,\n              message: err.response.data.errors\n                .map((error: any) => error.message)\n                .join('\\n'),\n              color: 'red',\n              icon: <IconX />\n            });\n\n            return ResultType.error;\n          }),\n      getReauthText\n    );\n  };\n  const registerTotp = async () => {\n    await runActionWithFallback(\n      () =>\n        authApi(apiUrl(ApiEndpoints.auth_totp), undefined, 'get')\n          .then(() => ResultType.error)\n          .catch((err) => {\n            if (err.status == 404 && err.response.data.meta.secret) {\n              setTotpQr(err.response.data.meta);\n              openTotpQr();\n              return ResultType.success;\n            }\n            return ResultType.error;\n          }),\n      getReauthText\n    );\n  };\n\n  const possibleFactors = useMemo(() => {\n    return [\n      {\n        type: 'totp',\n        name: t`TOTP`,\n        description: t`Time-based One-Time Password`,\n        function: registerTotp,\n        used: usedFactors?.includes('totp')\n      },\n      {\n        type: 'recovery_codes',\n        name: t`Recovery Codes`,\n        description: t`One-Time pre-generated recovery codes`,\n        function: registerRecoveryCodes,\n        used: usedFactors?.includes('recovery_codes')\n      }\n    ].filter((factor) => {\n      return auth_config?.mfa?.supported_types.includes(factor.type);\n    });\n  }, [usedFactors, auth_config]);\n\n  const [totpError, setTotpError] = useState<string>('');\n\n  return (\n    <Stack>\n      <ReauthModal />\n      <StylishText size='md'>{t`Add Token`}</StylishText>\n      {possibleFactors.map((factor) => (\n        <Tooltip label={factor.description} key={factor.type}>\n          <Button\n            onClick={factor.function}\n            disabled={factor.used}\n            variant='outline'\n          >\n            {factor.name}\n          </Button>\n        </Tooltip>\n      ))}\n      <Modal\n        opened={totpQrOpen}\n        onClose={closeTotpQr}\n        title={<StylishText size='lg'>{t`Register TOTP Token`}</StylishText>}\n      >\n        <Stack>\n          <QrRegistrationForm\n            url={totpQr?.totp_url ?? ''}\n            secret={totpQr?.secret ?? ''}\n            value={value}\n            error={totpError}\n            setValue={setValue}\n          />\n          <Button\n            fullWidth\n            onClick={() =>\n              runActionWithFallback(\n                () =>\n                  authApi(apiUrl(ApiEndpoints.auth_totp), undefined, 'post', {\n                    code: value\n                  })\n                    .then(() => {\n                      setTotpError('');\n                      closeTotpQr();\n                      refetch();\n                      return ResultType.success;\n                    })\n                    .catch((error) => {\n                      const errorMsg = t`Error registering TOTP token`;\n\n                      setTotpError(\n                        error.response?.data?.errors[0]?.message ?? errorMsg\n                      );\n\n                      hideNotification('totp-error');\n                      showNotification({\n                        id: 'totp-error',\n                        title: t`Error`,\n                        message: errorMsg,\n                        color: 'red',\n                        icon: <IconExclamationCircle />\n                      });\n                      return ResultType.error;\n                    }),\n                getReauthText\n              )\n            }\n          >\n            <Trans>Submit</Trans>\n          </Button>\n        </Stack>\n      </Modal>\n    </Stack>\n  );\n}\n\nasync function runActionWithFallback(\n  action: () => Promise<ResultType>,\n  getReauthText: (props: any) => any\n) {\n  const { setAuthContext } = useServerApiState.getState();\n  const result = await action().catch((err) => {\n    setAuthContext(err.response.data?.data);\n    // check if we need to re-authenticate\n    if (err.status == 401) {\n      if (\n        err.response.data.data.flows.find(\n          (flow: any) => flow.id == FlowEnum.MfaReauthenticate\n        )\n      ) {\n        return ResultType.mfareauth;\n      } else if (\n        err.response.data.data.flows.find(\n          (flow: any) => flow.id == FlowEnum.Reauthenticate\n        )\n      ) {\n        return ResultType.reauth;\n      } else {\n        return ResultType.error;\n      }\n    } else {\n      return ResultType.error;\n    }\n  });\n  if (result == ResultType.mfareauth) {\n    authApi(apiUrl(ApiEndpoints.auth_mfa_reauthenticate), undefined, 'post', {\n      code: await getReauthText({\n        label: t`TOTP Code`,\n        name: 'TOTP',\n        description: t`Enter your TOTP or recovery code`\n      })\n    })\n      .then((response) => {\n        setAuthContext(response.data?.data);\n        action();\n      })\n      .catch((err) => {\n        setAuthContext(err.response.data?.data);\n      });\n  } else if (result == ResultType.reauth) {\n    authApi(apiUrl(ApiEndpoints.auth_reauthenticate), undefined, 'post', {\n      password: await getReauthText({\n        label: t`Password`,\n        name: 'password',\n        description: t`Enter your password`\n      })\n    })\n      .then((response) => {\n        setAuthContext(response.data?.data);\n        action();\n      })\n      .catch((err) => {\n        setAuthContext(err.response.data?.data);\n      });\n  }\n}\n\nexport const parseDate = (date: number) =>\n  date == null ? 'Never' : new Date(date * 1000).toLocaleString();\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport { Badge, Group, Stack, Table } from '@mantine/core';\nimport { IconEdit, IconKey, IconUser } from '@tabler/icons-react';\nimport { useMemo } from 'react';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { YesNoUndefinedButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport { useNavigate } from 'react-router-dom';\nimport { useShallow } from 'zustand/react/shallow';\nimport { ActionDropdown } from '../../../../components/items/ActionDropdown';\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { useEditApiFormModal } from '../../../../hooks/UseForm';\nimport { useUserState } from '../../../../states/UserState';\n\nexport function AccountDetailPanel() {\n  const navigate = useNavigate();\n\n  const [user, fetchUserState] = useUserState(\n    useShallow((state) => [state.user, state.fetchUserState])\n  );\n\n  const userFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      first_name: {},\n      last_name: {}\n    };\n  }, []);\n\n  const editAccount = useEditApiFormModal({\n    title: t`Edit Account Information`,\n    url: ApiEndpoints.user_me,\n    onFormSuccess: fetchUserState,\n    fields: userFields,\n    successMessage: t`Account details updated`\n  });\n\n  const profileFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      displayname: {},\n      position: {},\n      status: {},\n      location: {},\n      active: {},\n      contact: {},\n      type: {},\n      organisation: {},\n      primary_group: {}\n    };\n  }, []);\n\n  const editProfile = useEditApiFormModal({\n    title: t`Edit Profile Information`,\n    url: ApiEndpoints.user_profile,\n    onFormSuccess: fetchUserState,\n    fields: profileFields,\n    successMessage: t`Profile details updated`\n  });\n\n  const accountDetailFields = useMemo(\n    () => [\n      { label: t`Username`, value: user?.username },\n      { label: t`First Name`, value: user?.first_name },\n      { label: t`Last Name`, value: user?.last_name },\n      {\n        label: t`Active`,\n        value: <YesNoUndefinedButton value={user?.profile?.active} />\n      },\n      {\n        label: t`Staff Access`,\n        value: <YesNoUndefinedButton value={user?.is_staff} />\n      },\n      {\n        label: t`Superuser`,\n        value: <YesNoUndefinedButton value={user?.is_superuser} />\n      }\n    ],\n    [user]\n  );\n\n  const profileDetailFields = useMemo(\n    () => [\n      { label: t`Display Name`, value: user?.profile?.displayname },\n      { label: t`Position`, value: user?.profile?.position },\n      { label: t`Status`, value: user?.profile?.status },\n      { label: t`Location`, value: user?.profile?.location },\n      { label: t`Contact`, value: user?.profile?.contact },\n      { label: t`Type`, value: <Badge>{user?.profile?.type}</Badge> },\n      { label: t`Organisation`, value: user?.profile?.organisation },\n      { label: t`Primary Group`, value: user?.profile?.primary_group }\n    ],\n    [user]\n  );\n\n  return (\n    <>\n      {editAccount.modal}\n      {editProfile.modal}\n      <Stack gap='xs'>\n        <Group justify='space-between'>\n          <StylishText size='lg'>\n            <Trans>Account Details</Trans>\n          </StylishText>\n          <ActionDropdown\n            tooltip={t`Account Actions`}\n            icon={<IconUser />}\n            actions={[\n              {\n                name: t`Edit Account`,\n                icon: <IconEdit />,\n                tooltip: t`Edit Account Information`,\n                onClick: editAccount.open\n              },\n              {\n                name: t`Change Password`,\n                icon: <IconKey />,\n                tooltip: t`Change User Password`,\n                onClick: () => {\n                  navigate('/change-password');\n                }\n              }\n            ]}\n          />\n        </Group>\n        {renderDetailTable(accountDetailFields)}\n\n        <Group justify='space-between'>\n          <StylishText size='lg'>\n            <Trans>Profile Details</Trans>\n          </StylishText>\n          <ActionButton\n            text={t`Edit Profile`}\n            icon={<IconEdit />}\n            tooltip={t`Edit Profile Information`}\n            onClick={editProfile.open}\n            variant='light'\n          />\n        </Group>\n        {renderDetailTable(profileDetailFields)}\n      </Stack>\n    </>\n  );\n\n  function renderDetailTable(data: { label: string; value: any }[]) {\n    return (\n      <Table>\n        <Table.Tbody>\n          {data.map((item) => (\n            <Table.Tr key={item.label}>\n              <Table.Td>\n                <Trans>{item.label}</Trans>\n              </Table.Td>\n              <Table.Td>{item.value}</Table.Td>\n            </Table.Tr>\n          ))}\n        </Table.Tbody>\n      </Table>\n    );\n  }\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  ActionIcon,\n  Button,\n  ColorInput,\n  ColorPicker,\n  Container,\n  DEFAULT_THEME,\n  Group,\n  Loader,\n  Select,\n  Slider,\n  Table,\n  useMantineTheme\n} from '@mantine/core';\nimport { IconRestore } from '@tabler/icons-react';\nimport { useState } from 'react';\n\nimport { useShallow } from 'zustand/react/shallow';\nimport { ColorToggle } from '../../../../components/items/ColorToggle';\nimport { LanguageSelect } from '../../../../components/items/LanguageSelect';\nimport { StylishText } from '../../../../components/items/StylishText';\nimport { SizeMarks } from '../../../../defaults/defaults';\nimport { IS_DEV } from '../../../../main';\nimport { useLocalState } from '../../../../states/LocalState';\n\nfunction getLkp(color: string) {\n  return { [DEFAULT_THEME.colors[color][6]]: color };\n}\nconst LOOKUP = Object.assign(\n  {},\n  ...Object.keys(DEFAULT_THEME.colors).map((clr) => getLkp(clr))\n);\n\nexport function UserTheme({ height }: Readonly<{ height: number }>) {\n  const theme = useMantineTheme();\n  const [userTheme, setTheme, setLanguage] = useLocalState(\n    useShallow((state) => [state.userTheme, state.setTheme, state.setLanguage])\n  );\n\n  // radius\n  function getRadiusFromValue(value: number) {\n    const obj = SizeMarks.find((mark) => mark.value === value);\n    if (obj) return obj.label;\n    return 'sm';\n  }\n\n  const [radius, setRadius] = useState(25);\n\n  function changeRadius(value: number) {\n    const r = getRadiusFromValue(value);\n    setRadius(value);\n\n    setTheme([{ key: 'radius', value: r.toString() }]);\n  }\n\n  return (\n    <Container w='100%' mih={height} p={0}>\n      <StylishText size='lg'>\n        <Trans>Display Settings</Trans>\n      </StylishText>\n      <Table>\n        <Table.Tbody>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Language</Trans>\n            </Table.Td>\n            <Table.Td>\n              <LanguageSelect width={200} />\n            </Table.Td>\n            <Table.Td>\n              {IS_DEV && (\n                <Button\n                  onClick={() => setLanguage('pseudo-LOCALE', true)}\n                  variant='light'\n                >\n                  <Trans>Use pseudo language</Trans>\n                </Button>\n              )}\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Color Mode</Trans>\n            </Table.Td>\n            <Table.Td>\n              <Group justify='left'>\n                <ColorToggle />\n              </Group>\n            </Table.Td>\n            <Table.Td />\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Highlight color</Trans>\n            </Table.Td>\n            <Table.Td>\n              <ColorPicker\n                format='hex'\n                onChange={(v) =>\n                  setTheme([{ key: 'primaryColor', value: LOOKUP[v] }])\n                }\n                withPicker={false}\n                swatches={Object.keys(LOOKUP)}\n              />\n            </Table.Td>\n            <Table.Td>\n              <Button color={theme.primaryColor} variant='light'>\n                <Trans>Example</Trans>\n              </Button>\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>White color</Trans>\n            </Table.Td>\n            <Table.Td>\n              <ColorInput\n                aria-label='Color Picker White'\n                value={userTheme.whiteColor}\n                onChange={(v) => setTheme([{ key: 'whiteColor', value: v }])}\n              />\n            </Table.Td>\n            <Table.Td>\n              <ActionIcon\n                variant='default'\n                aria-label='Reset White Color'\n                onClick={() =>\n                  setTheme([{ key: 'whiteColor', value: '#FFFFFF' }])\n                }\n              >\n                <IconRestore />\n              </ActionIcon>\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Black color</Trans>\n            </Table.Td>\n            <Table.Td>\n              <ColorInput\n                aria-label='Color Picker Black'\n                value={userTheme.blackColor}\n                onChange={(v) => setTheme([{ key: 'blackColor', value: v }])}\n              />\n            </Table.Td>\n            <Table.Td>\n              <ActionIcon\n                variant='default'\n                aria-label='Reset Black Color'\n                onClick={() =>\n                  setTheme([{ key: 'blackColor', value: '#000000' }])\n                }\n              >\n                <IconRestore />\n              </ActionIcon>\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Border Radius</Trans>\n            </Table.Td>\n            <Table.Td>\n              <Slider\n                label={(val) => getRadiusFromValue(val)}\n                defaultValue={50}\n                step={25}\n                marks={SizeMarks}\n                value={radius}\n                onChange={changeRadius}\n                mb={18}\n              />\n            </Table.Td>\n          </Table.Tr>\n          <Table.Tr>\n            <Table.Td>\n              <Trans>Loader</Trans>\n            </Table.Td>\n            <Table.Td>\n              <Group justify='left'>\n                <Select\n                  aria-label='Loader Type Selector'\n                  data={[\n                    { value: 'bars', label: t`Bars` },\n                    { value: 'oval', label: t`Oval` },\n                    { value: 'dots', label: t`Dots` }\n                  ]}\n                  value={userTheme.loader}\n                  onChange={(v) => {\n                    if (v != null) setTheme([{ key: 'loader', value: v }]);\n                  }}\n                />\n              </Group>\n            </Table.Td>\n            <Table.Td>\n              <Group justify='left'>\n                <Loader type={userTheme.loader} mah={16} size='sm' />\n              </Group>\n            </Table.Td>\n          </Table.Tr>\n        </Table.Tbody>\n      </Table>\n    </Container>\n  );\n}\n","import { Container, Grid, SimpleGrid } from '@mantine/core';\n\nimport { AccountDetailPanel } from './AccountDetailPanel';\nimport { UserTheme } from './UserThemePanel';\n\nexport function AccountContent() {\n  const PRIMARY_COL_HEIGHT = 300;\n  const SECONDARY_COL_HEIGHT = PRIMARY_COL_HEIGHT / 2 - 8;\n\n  return (\n    <div>\n      <SimpleGrid cols={{ base: 1, md: 2 }} spacing='md'>\n        <Container w='100%'>\n          <AccountDetailPanel />\n        </Container>\n        <Grid gutter='md'>\n          <Grid.Col>\n            <UserTheme height={SECONDARY_COL_HEIGHT} />\n          </Grid.Col>\n        </Grid>\n      </SimpleGrid>\n    </div>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Skeleton, Stack } from '@mantine/core';\nimport {\n  IconBellCog,\n  IconDeviceDesktop,\n  IconFileAnalytics,\n  IconLock,\n  IconPlugConnected,\n  IconSearch,\n  IconUserCircle\n} from '@tabler/icons-react';\nimport { lazy, useMemo } from 'react';\n\nimport { useShallow } from 'zustand/react/shallow';\nimport PageTitle from '../../../components/nav/PageTitle';\nimport { SettingsHeader } from '../../../components/nav/SettingsHeader';\nimport type { PanelType } from '../../../components/panels/Panel';\nimport { PanelGroup } from '../../../components/panels/PanelGroup';\nimport { UserSettingList } from '../../../components/settings/SettingList';\nimport { Loadable } from '../../../functions/loading';\nimport { useUserState } from '../../../states/UserState';\nimport { SecurityContent } from './AccountSettings/SecurityContent';\nimport { AccountContent } from './AccountSettings/UserPanel';\n\nconst PluginSettingsGroup = Loadable(\n  lazy(() => import('./PluginSettingsGroup'))\n);\n\n/**\n * User settings page\n */\nexport default function UserSettings() {\n  const [user, isLoggedIn] = useUserState(\n    useShallow((state) => [state.user, state.isLoggedIn])\n  );\n\n  const userSettingsPanels: PanelType[] = useMemo(() => {\n    return [\n      {\n        name: 'account',\n        label: t`Account`,\n        icon: <IconUserCircle />,\n        content: <AccountContent />\n      },\n      {\n        name: 'security',\n        label: t`Security`,\n        icon: <IconLock />,\n        content: <SecurityContent />\n      },\n      {\n        name: 'display',\n        label: t`Display Options`,\n        icon: <IconDeviceDesktop />,\n        content: (\n          <UserSettingList\n            keys={[\n              'ICONS_IN_NAVBAR',\n              'STICKY_HEADER',\n              'STICKY_TABLE_HEADER',\n              'SHOW_SPOTLIGHT',\n              'DATE_DISPLAY_FORMAT',\n              'FORMS_CLOSE_USING_ESCAPE',\n              'DISPLAY_STOCKTAKE_TAB',\n              'ENABLE_LAST_BREADCRUMB',\n              'SHOW_FULL_LOCATION_IN_TABLES',\n              'SHOW_FULL_CATEGORY_IN_TABLES'\n            ]}\n          />\n        )\n      },\n      {\n        name: 'search',\n        label: t`Search`,\n        icon: <IconSearch />,\n        content: (\n          <UserSettingList\n            keys={[\n              'SEARCH_WHOLE',\n              'SEARCH_REGEX',\n              'SEARCH_NOTES',\n              'SEARCH_PREVIEW_RESULTS',\n              'SEARCH_PREVIEW_SHOW_PARTS',\n              'SEARCH_HIDE_INACTIVE_PARTS',\n              'SEARCH_PREVIEW_SHOW_SUPPLIER_PARTS',\n              'SEARCH_PREVIEW_SHOW_MANUFACTURER_PARTS',\n              'SEARCH_PREVIEW_SHOW_CATEGORIES',\n              'SEARCH_PREVIEW_SHOW_STOCK',\n              'SEARCH_PREVIEW_HIDE_UNAVAILABLE_STOCK',\n              'SEARCH_PREVIEW_SHOW_LOCATIONS',\n              'SEARCH_PREVIEW_SHOW_COMPANIES',\n              'SEARCH_PREVIEW_SHOW_BUILD_ORDERS',\n              'SEARCH_PREVIEW_SHOW_PURCHASE_ORDERS',\n              'SEARCH_PREVIEW_EXCLUDE_INACTIVE_PURCHASE_ORDERS',\n              'SEARCH_PREVIEW_SHOW_SALES_ORDERS',\n              'SEARCH_PREVIEW_EXCLUDE_INACTIVE_SALES_ORDERS',\n              'SEARCH_PREVIEW_SHOW_SALES_ORDER_SHIPMENTS',\n              'SEARCH_PREVIEW_SHOW_RETURN_ORDERS',\n              'SEARCH_PREVIEW_EXCLUDE_INACTIVE_RETURN_ORDERS'\n            ]}\n          />\n        )\n      },\n      {\n        name: 'notifications',\n        label: t`Notifications`,\n        icon: <IconBellCog />,\n        content: (\n          <PluginSettingsGroup\n            mixin='notification'\n            global={false}\n            message={t`The settings below are specific to each available notification method`}\n          />\n        )\n      },\n      {\n        name: 'reporting',\n        label: t`Reporting`,\n        icon: <IconFileAnalytics />,\n        content: (\n          <UserSettingList\n            keys={['REPORT_INLINE', 'LABEL_INLINE', 'LABEL_DEFAULT_PRINTER']}\n          />\n        )\n      },\n      {\n        name: 'plugins',\n        label: t`Plugin Settings`,\n        icon: <IconPlugConnected />,\n        content: <PluginSettingsGroup global={false} />\n      }\n    ];\n  }, []);\n\n  if (!isLoggedIn()) {\n    return <Skeleton />;\n  }\n\n  return (\n    <>\n      <PageTitle title={t`User Settings`} />\n      <Stack gap='xs'>\n        <SettingsHeader\n          label='user'\n          title={t`Account Settings`}\n          subtitle={\n            user?.first_name && user?.last_name\n              ? `${user?.first_name} ${user?.last_name}`\n              : null\n          }\n          shorthand={user?.username || ''}\n        />\n        <PanelGroup\n          pageKey='user-settings'\n          panels={userSettingsPanels}\n          model='usersettings'\n          id={null}\n        />\n      </Stack>\n    </>\n  );\n}\n"],"file":"assets/UserSettings-CchXMHS7.js"}