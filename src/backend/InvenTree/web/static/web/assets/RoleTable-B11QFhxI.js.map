{"version":3,"file":"RoleTable-B11QFhxI.js","sources":["../../../../../../frontend/src/components/items/RoleTable.tsx"],"sourcesContent":["import { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { apiUrl } from '@lib/functions/Api';\nimport { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  Button,\n  Checkbox,\n  Group,\n  Stack,\n  Table,\n  Text,\n  Tooltip\n} from '@mantine/core';\nimport { notifications } from '@mantine/notifications';\nimport { IconCircleCheck, IconReload } from '@tabler/icons-react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { api } from '../../App';\n\nexport interface RuleSet {\n  pk?: number;\n  group?: number;\n  name: string;\n  label: string;\n  can_view: boolean;\n  can_add: boolean;\n  can_change: boolean;\n  can_delete: boolean;\n  edited?: boolean;\n}\n\nexport function RoleTable({\n  roles,\n  editable = false\n}: {\n  roles: RuleSet[];\n  editable?: boolean;\n}) {\n  const [rulesets, setRulesets] = useState<RuleSet[]>(roles);\n\n  useEffect(() => {\n    setRulesets(roles);\n  }, [roles]);\n\n  const edited = useMemo(() => rulesets.some((r) => r.edited), [rulesets]);\n\n  // Ensure the rulesets are always displayed in the same order\n  const sortedRulesets = useMemo(() => {\n    return rulesets.sort((a, b) => (a.label > b.label ? 1 : -1));\n  }, [rulesets]);\n\n  // Change the edited state of the ruleset\n  const onToggle = useCallback(\n    (rule: RuleSet, field: string) => {\n      if (!editable) {\n        return;\n      }\n      setRulesets((prev) => {\n        const updated = prev.map((r) => {\n          if (r.pk === rule.pk) {\n            return {\n              ...r,\n              [field]: !(r as any)[field],\n              edited: true\n            };\n          }\n          return r;\n        });\n        return updated;\n      });\n    },\n    [editable]\n  );\n\n  const onSave = async (rulesets: RuleSet[]) => {\n    if (!editable) {\n      return;\n    }\n\n    notifications.show({\n      id: 'group-roles-update',\n      title: t`Updating`,\n      message: t`Updating group roles`,\n      loading: true,\n      color: 'blue',\n      autoClose: false\n    });\n\n    for (const ruleset of rulesets.filter((r) => r.edited)) {\n      await api\n        .patch(apiUrl(ApiEndpoints.ruleset_list, ruleset.pk), {\n          can_view: ruleset.can_view,\n          can_add: ruleset.can_add,\n          can_change: ruleset.can_change,\n          can_delete: ruleset.can_delete\n        })\n        .then(() => {\n          // Mark this ruleset as \"not edited\"\n          setRulesets((prev) => {\n            const updated = prev.map((r) => {\n              if (r.pk === ruleset.pk) {\n                return {\n                  ...r,\n                  edited: false\n                };\n              }\n              return r;\n            });\n            return updated;\n          });\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n\n    notifications.update({\n      id: 'group-roles-update',\n      title: t`Updated`,\n      message: t`Group roles updated`,\n      autoClose: 2000,\n      color: 'green',\n      icon: <IconCircleCheck />,\n      loading: false\n    });\n  };\n\n  return (\n    <>\n      <Stack gap='xs'>\n        <Table striped withColumnBorders withRowBorders withTableBorder>\n          <Table.Thead>\n            <Table.Tr>\n              <Table.Th>\n                <Text fw={700}>\n                  <Trans>Role</Trans>\n                </Text>\n              </Table.Th>\n              <Table.Th>\n                <Text fw={700}>\n                  <Trans>View</Trans>\n                </Text>\n              </Table.Th>\n              <Table.Th>\n                <Text fw={700}>\n                  <Trans>Change</Trans>\n                </Text>\n              </Table.Th>\n              <Table.Th>\n                <Text fw={700}>\n                  <Trans>Add</Trans>\n                </Text>\n              </Table.Th>\n              <Table.Th>\n                <Text fw={700}>\n                  <Trans>Delete</Trans>\n                </Text>\n              </Table.Th>\n            </Table.Tr>\n          </Table.Thead>\n          <Table.Tbody>\n            {sortedRulesets.map((rule) => (\n              <Table.Tr key={rule.pk ?? rule.name}>\n                <Table.Td>\n                  <Group gap='xs'>\n                    <Text>{rule.label}</Text>\n                    {rule.edited && <Text>*</Text>}\n                  </Group>\n                </Table.Td>\n                <Table.Td>\n                  <Checkbox\n                    disabled={!editable}\n                    checked={rule.can_view}\n                    onChange={() => onToggle(rule, 'can_view')}\n                  />\n                </Table.Td>\n                <Table.Td>\n                  <Checkbox\n                    disabled={!editable}\n                    checked={rule.can_change}\n                    onChange={() => onToggle(rule, 'can_change')}\n                  />\n                </Table.Td>\n                <Table.Td>\n                  <Checkbox\n                    disabled={!editable}\n                    checked={rule.can_add}\n                    onChange={() => onToggle(rule, 'can_add')}\n                  />\n                </Table.Td>\n                <Table.Td>\n                  <Checkbox\n                    disabled={!editable}\n                    checked={rule.can_delete}\n                    onChange={() => onToggle(rule, 'can_delete')}\n                  />\n                </Table.Td>\n              </Table.Tr>\n            ))}\n          </Table.Tbody>\n        </Table>\n        {editable && (\n          <Group justify='right'>\n            <Tooltip label={t`Reset group roles`} disabled={!edited}>\n              <Button\n                color='red'\n                onClick={() => {\n                  setRulesets(roles);\n                }}\n                disabled={!edited}\n                leftSection={<IconReload />}\n              >\n                {t`Reset`}\n              </Button>\n            </Tooltip>\n            <Tooltip label={t`Save group roles`} disabled={!edited}>\n              <Button\n                color='green'\n                onClick={() => {\n                  onSave(rulesets);\n                }}\n                disabled={!edited}\n                leftSection={<IconCircleCheck />}\n              >\n                {t`Save`}\n              </Button>\n            </Tooltip>\n          </Group>\n        )}\n      </Stack>\n    </>\n  );\n}\n"],"names":["RoleTable","roles","editable","rulesets","setRulesets","useState","useEffect","edited","useMemo","some","r","sortedRulesets","sort","a","b","label","onToggle","useCallback","rule","field","prev","map","pk","onSave","notifications","show","id","title","_i18n","_","message","loading","color","autoClose","ruleset","filter","api","patch","apiUrl","ApiEndpoints","ruleset_list","can_view","can_add","can_change","can_delete","then","catch","error","console","update","icon","IconCircleCheck","jsx","Fragment","jsxs","Stack","Table","Text","_Trans","Group","Checkbox","name","Tooltip","Button","IconReload"],"mappings":"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"}