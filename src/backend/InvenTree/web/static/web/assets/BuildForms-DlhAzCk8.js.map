{"version":3,"file":"BuildForms-DlhAzCk8.js","sources":["../../../../../../frontend/src/forms/BuildForms.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Alert, Divider, Group, List, Stack, Table, Text } from '@mantine/core';\nimport {\n  IconCalendar,\n  IconCircleCheck,\n  IconInfoCircle,\n  IconLink,\n  IconList,\n  IconSitemap,\n  IconTruckDelivery,\n  IconUser,\n  IconUsersGroup\n} from '@tabler/icons-react';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport RemoveRowButton from '../components/buttons/RemoveRowButton';\nimport { StandaloneField } from '../components/forms/StandaloneField';\n\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { ApiFormFieldSet, ApiFormFieldType } from '@lib/types/Forms';\nimport {\n  TableFieldErrorWrapper,\n  type TableFieldRowProps\n} from '../components/forms/fields/TableField';\nimport { StatusRenderer } from '../components/render/StatusRenderer';\nimport {\n  RenderStockItem,\n  RenderStockLocation\n} from '../components/render/Stock';\nimport { useCreateApiFormModal } from '../hooks/UseForm';\nimport {\n  useBatchCodeGenerator,\n  useSerialNumberGenerator\n} from '../hooks/UseGenerator';\nimport { useGlobalSettingsState } from '../states/SettingsStates';\nimport { RenderPartColumn } from '../tables/ColumnRenderers';\n\n/**\n * Field set for BuildOrder forms\n */\nexport function useBuildOrderFields({\n  create,\n  modalId\n}: {\n  create: boolean;\n  modalId: string;\n}): ApiFormFieldSet {\n  const [destination, setDestination] = useState<number | null | undefined>(\n    null\n  );\n\n  const [batchCode, setBatchCode] = useState<string>('');\n\n  const batchGenerator = useBatchCodeGenerator({\n    modalId: modalId,\n    onGenerate: (value: any) => {\n      setBatchCode((batch: any) => batch || value);\n    }\n  });\n\n  const globalSettings = useGlobalSettingsState();\n\n  return useMemo(() => {\n    const fields: ApiFormFieldSet = {\n      reference: {},\n      part: {\n        disabled: !create,\n        filters: {\n          assembly: true,\n          virtual: false,\n          active: globalSettings.isSet('BUILDORDER_REQUIRE_ACTIVE_PART')\n            ? true\n            : undefined,\n          locked: globalSettings.isSet('BUILDORDER_REQUIRE_LOCKED_PART')\n            ? true\n            : undefined\n        },\n        onValueChange(value: any, record?: any) {\n          // Adjust the destination location for the build order\n          if (record) {\n            setDestination(\n              record.default_location || record.category_default_location\n            );\n          }\n\n          batchGenerator.update({\n            part: value\n          });\n        }\n      },\n      title: {},\n      quantity: {},\n      project_code: {\n        icon: <IconList />\n      },\n      priority: {},\n      parent: {\n        icon: <IconSitemap />,\n        filters: {\n          part_detail: true\n        }\n      },\n      sales_order: {\n        icon: <IconTruckDelivery />\n      },\n      batch: {\n        placeholder:\n          batchGenerator.result &&\n          `${t`Next batch code`}: ${batchGenerator.result}`,\n        value: batchCode,\n        onValueChange: (value: any) => setBatchCode(value)\n      },\n      start_date: {\n        icon: <IconCalendar />\n      },\n      target_date: {\n        icon: <IconCalendar />\n      },\n      take_from: {},\n      destination: {\n        filters: {\n          structural: false\n        },\n        value: destination\n      },\n      link: {\n        icon: <IconLink />\n      },\n      issued_by: {\n        icon: <IconUser />,\n        filters: {\n          is_active: true\n        }\n      },\n      responsible: {\n        icon: <IconUsersGroup />,\n        filters: {\n          is_active: true\n        }\n      },\n      external: {}\n    };\n\n    if (!globalSettings.isSet('PROJECT_CODES_ENABLED', true)) {\n      delete fields.project_code;\n    }\n\n    if (!globalSettings.isSet('BUILDORDER_EXTERNAL_BUILDS', true)) {\n      delete fields.external;\n    }\n\n    return fields;\n  }, [create, destination, batchCode, batchGenerator.result, globalSettings]);\n}\n\nexport function useBuildOrderOutputFields({\n  build,\n  modalId\n}: {\n  build: any;\n  modalId: string;\n}): ApiFormFieldSet {\n  const trackable: boolean = useMemo(() => {\n    return build.part_detail?.trackable ?? false;\n  }, [build.part_detail]);\n\n  const [location, setLocation] = useState<number | null>(null);\n\n  useEffect(() => {\n    setLocation(build.location || build.part_detail?.default_location || null);\n  }, [build.location, build.part_detail]);\n\n  const [quantity, setQuantity] = useState<number>(0);\n\n  useEffect(() => {\n    const build_quantity = build.quantity ?? 0;\n    const build_complete = build.completed ?? 0;\n\n    setQuantity(Math.max(0, build_quantity - build_complete));\n  }, [build]);\n\n  const serialGenerator = useSerialNumberGenerator({\n    modalId: modalId,\n    initialQuery: {\n      part: build.part || build.part_detail?.pk\n    }\n  });\n\n  const batchGenerator = useBatchCodeGenerator({\n    modalId: modalId,\n    initialQuery: {\n      part: build.part || build.part_detail?.pk,\n      quantity: build.quantity\n    }\n  });\n\n  return useMemo(() => {\n    return {\n      quantity: {\n        value: quantity,\n        onValueChange: (value: any) => {\n          setQuantity(value);\n        }\n      },\n      serial_numbers: {\n        hidden: !trackable,\n        placeholder:\n          serialGenerator.result &&\n          `${t`Next serial number`}: ${serialGenerator.result}`\n      },\n      batch_code: {\n        placeholder:\n          batchGenerator.result &&\n          `${t`Next batch code`}: ${batchGenerator.result}`\n      },\n      location: {\n        value: location,\n        onValueChange: (value: any) => {\n          setQuantity(value);\n        }\n      },\n      auto_allocate: {\n        hidden: !trackable\n      }\n    };\n  }, [quantity, batchGenerator.result, serialGenerator.result, trackable]);\n}\n\nfunction BuildOutputFormRow({\n  props,\n  record\n}: Readonly<{\n  props: TableFieldRowProps;\n  record: any;\n}>) {\n  const stockItemColumn = useMemo(() => {\n    if (record.serial) {\n      return `# ${record.serial}`;\n    } else {\n      return `${t`Quantity`}: ${record.quantity}`;\n    }\n  }, [record]);\n\n  const quantityColumn = useMemo(() => {\n    // Serialized output - quantity cannot be changed\n    if (record.serial) {\n      return '1';\n    }\n\n    // Non-serialized output - quantity can be changed\n    return (\n      <StandaloneField\n        fieldName='quantity'\n        fieldDefinition={{\n          field_type: 'number',\n          required: true,\n          value: props.item.quantity,\n          onValueChange: (value: any) => {\n            props.changeFn(props.idx, 'quantity', value);\n          }\n        }}\n        error={props.rowErrors?.quantity?.message}\n      />\n    );\n  }, [props, record]);\n\n  return (\n    <>\n      <Table.Tr>\n        <Table.Td>\n          <RenderPartColumn part={record.part_detail} />\n        </Table.Td>\n        <Table.Td>{stockItemColumn}</Table.Td>\n        <Table.Td>\n          <TableFieldErrorWrapper props={props} errorKey='output'>\n            {quantityColumn}\n          </TableFieldErrorWrapper>\n        </Table.Td>\n        <Table.Td>{record.batch}</Table.Td>\n        <Table.Td>\n          <StatusRenderer\n            status={record.status}\n            type={ModelType.stockitem}\n          />{' '}\n        </Table.Td>\n        <Table.Td style={{ width: '1%', whiteSpace: 'nowrap' }}>\n          <RemoveRowButton onClick={() => props.removeFn(props.idx)} />\n        </Table.Td>\n      </Table.Tr>\n    </>\n  );\n}\n\nexport function useCompleteBuildOutputsForm({\n  build,\n  outputs,\n  onFormSuccess\n}: {\n  build: any;\n  outputs: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const [location, setLocation] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (location) {\n      return;\n    }\n\n    setLocation(\n      build.destination || build.part_detail?.default_location || null\n    );\n  }, [location, build.destination, build.part_detail]);\n\n  const buildOutputCompleteFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      outputs: {\n        field_type: 'table',\n        value: outputs.map((output: any) => {\n          return {\n            output: output.pk,\n            quantity: output.quantity\n          };\n        }),\n        modelRenderer: (row: TableFieldRowProps) => {\n          const record = outputs.find((output) => output.pk == row.item.output);\n          return (\n            <BuildOutputFormRow props={row} record={record} key={record.pk} />\n          );\n        },\n        headers: [\n          { title: t`Part` },\n          { title: t`Build Output` },\n          { title: t`Quantity to Complete`, style: { width: '200px' } },\n          { title: t`Batch` },\n          { title: t`Status` },\n          { title: '', style: { width: '50px' } }\n        ]\n      },\n      status_custom_key: {},\n      location: {\n        filters: {\n          structural: false\n        },\n        value: location,\n        onValueChange: (value: any) => {\n          setLocation(value);\n        }\n      },\n      notes: {},\n      accept_incomplete_allocation: {}\n    };\n  }, [location, outputs]);\n\n  return useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_output_complete, build.pk),\n    method: 'POST',\n    title: t`Complete Build Outputs`,\n    fields: buildOutputCompleteFields,\n    onFormSuccess: onFormSuccess,\n    successMessage: t`Build outputs have been completed`,\n    size: '80%'\n  });\n}\n\n/*\n * Dynamic form for scraping multiple build outputs\n */\nexport function useScrapBuildOutputsForm({\n  build,\n  outputs,\n  onFormSuccess\n}: {\n  build: any;\n  outputs: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const [location, setLocation] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (location) {\n      return;\n    }\n\n    setLocation(\n      build.destination || build.part_detail?.default_location || null\n    );\n  }, [location, build.destination, build.part_detail]);\n\n  const buildOutputScrapFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      outputs: {\n        field_type: 'table',\n        value: outputs.map((output: any) => {\n          return {\n            output: output.pk,\n            quantity: output.quantity\n          };\n        }),\n        modelRenderer: (row: TableFieldRowProps) => {\n          const record = outputs.find((output) => output.pk == row.item.output);\n          return (\n            <BuildOutputFormRow props={row} record={record} key={record.pk} />\n          );\n        },\n        headers: [\n          { title: t`Part` },\n          { title: t`Build Output` },\n          { title: t`Quantity to Scrap`, style: { width: '200px' } },\n          { title: t`Batch` },\n          { title: t`Status` },\n          { title: '', style: { width: '50px' } }\n        ]\n      },\n      location: {\n        value: location,\n        onValueChange: (value) => {\n          setLocation(value);\n        }\n      },\n      notes: {},\n      discard_allocations: {}\n    };\n  }, [location, outputs]);\n\n  return useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_output_scrap, build.pk),\n    method: 'POST',\n    title: t`Scrap Build Outputs`,\n    preFormContent: (\n      <Alert title={t`Scrap Build Outputs`} color='yellow'>\n        <List>\n          <List.Item>\n            {t`Selected build outputs will be completed, but marked as scrapped`}\n          </List.Item>\n          <List.Item>{t`Allocated stock items will be consumed`}</List.Item>\n        </List>\n      </Alert>\n    ),\n    fields: buildOutputScrapFields,\n    onFormSuccess: onFormSuccess,\n    successMessage: t`Build outputs have been scrapped`,\n    size: '80%'\n  });\n}\n\nexport function useCancelBuildOutputsForm({\n  build,\n  outputs,\n  onFormSuccess\n}: {\n  build: any;\n  outputs: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const buildOutputCancelFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      outputs: {\n        field_type: 'table',\n        value: outputs.map((output: any) => {\n          return {\n            output: output.pk\n          };\n        }),\n        modelRenderer: (row: TableFieldRowProps) => {\n          const record = outputs.find((output) => output.pk == row.item.output);\n          return (\n            <BuildOutputFormRow props={row} record={record} key={record.pk} />\n          );\n        },\n        headers: [\n          { title: t`Part` },\n          { title: t`Stock Item` },\n          { title: t`Batch` },\n          { title: t`Status` },\n          { title: '', style: { width: '50px' } }\n        ]\n      }\n    };\n  }, [outputs]);\n\n  return useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.build_output_delete, build.pk),\n    method: 'POST',\n    title: t`Cancel Build Outputs`,\n    preFormContent: (\n      <Alert title={t`Cancel Build Outputs`} color='yellow'>\n        <List>\n          <List.Item>{t`Selected build outputs will be removed`}</List.Item>\n          <List.Item>\n            {t`Allocated stock items will be returned to stock`}\n          </List.Item>\n        </List>\n      </Alert>\n    ),\n    fields: buildOutputCancelFields,\n    onFormSuccess: onFormSuccess,\n    successMessage: t`Build outputs have been cancelled`,\n    size: '80%'\n  });\n}\n\n// Construct a single row in the 'allocate stock to build' table\nfunction BuildAllocateLineRow({\n  props,\n  output,\n  record,\n  sourceLocation\n}: Readonly<{\n  props: TableFieldRowProps;\n  output: any;\n  record: any;\n  sourceLocation: number | undefined;\n}>) {\n  const stockField: ApiFormFieldType = useMemo(() => {\n    return {\n      field_type: 'related field',\n      api_url: apiUrl(ApiEndpoints.stock_item_list),\n      model: ModelType.stockitem,\n      autoFill: !!output?.serial,\n      autoFillFilters: {\n        serial: output?.serial\n      },\n      filters: {\n        available: true,\n        part_detail: true,\n        location_detail: true,\n        bom_item: record.bom_item,\n        location: sourceLocation,\n        cascade: sourceLocation ? true : undefined\n      },\n      value: props.item.stock_item,\n      name: 'stock_item',\n      onValueChange: (value: any, instance: any) => {\n        props.changeFn(props.idx, 'stock_item', value);\n\n        // Update the allocated quantity based on the selected stock item\n        if (instance) {\n          const available = instance.quantity - instance.allocated;\n\n          if (available < props.item.quantity) {\n            props.changeFn(\n              props.idx,\n              'quantity',\n              Math.min(props.item.quantity, available)\n            );\n          }\n        }\n      }\n    };\n  }, [record, props]);\n\n  const quantityField: ApiFormFieldType = useMemo(() => {\n    return {\n      field_type: 'number',\n      name: 'quantity',\n      required: true,\n      value: props.item.quantity,\n      onValueChange: (value: any) => {\n        props.changeFn(props.idx, 'quantity', value);\n      }\n    };\n  }, [props]);\n\n  return (\n    <Table.Tr key={`table-row-${record.pk}`}>\n      <Table.Td>\n        <RenderPartColumn part={record.part_detail} />\n      </Table.Td>\n      <Table.Td>\n        <ProgressBar\n          value={record.allocatedQuantity}\n          maximum={record.requiredQuantity - record.consumed}\n          progressLabel\n        />\n      </Table.Td>\n      <Table.Td>\n        <StandaloneField\n          fieldName='stock_item'\n          fieldDefinition={stockField}\n          error={props.rowErrors?.stock_item?.message}\n        />\n      </Table.Td>\n      <Table.Td>\n        <StandaloneField\n          fieldName='quantity'\n          fieldDefinition={quantityField}\n          error={props.rowErrors?.quantity?.message}\n        />\n      </Table.Td>\n      <Table.Td>\n        <RemoveRowButton onClick={() => props.removeFn(props.idx)} />\n      </Table.Td>\n    </Table.Tr>\n  );\n}\n\n/*\n * Dynamic form for allocating stock against multiple build order line items\n */\nexport function useAllocateStockToBuildForm({\n  buildId,\n  output,\n  outputId,\n  build,\n  lineItems,\n  onFormSuccess\n}: {\n  buildId?: number;\n  output?: any;\n  outputId?: number | null;\n  build?: any;\n  lineItems: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const [sourceLocation, setSourceLocation] = useState<number | undefined>(\n    undefined\n  );\n\n  const buildAllocateFields: ApiFormFieldSet = useMemo(() => {\n    const fields: ApiFormFieldSet = {\n      items: {\n        field_type: 'table',\n        value: [],\n        headers: [\n          { title: t`Part`, style: { minWidth: '175px' } },\n          { title: t`Allocated`, style: { minWidth: '175px' } },\n          { title: t`Stock Item`, style: { width: '100%' } },\n          { title: t`Quantity`, style: { minWidth: '175px' } },\n          { title: '', style: { width: '50px' } }\n        ],\n        modelRenderer: (row: TableFieldRowProps) => {\n          // Find the matching record from the passed 'lineItems'\n          const record =\n            lineItems.find((item) => item.pk == row.item.build_line) ?? {};\n          return (\n            <BuildAllocateLineRow\n              key={row.idx}\n              output={output}\n              props={row}\n              record={record}\n              sourceLocation={sourceLocation}\n            />\n          );\n        }\n      }\n    };\n\n    return fields;\n  }, [output, lineItems, sourceLocation]);\n\n  useEffect(() => {\n    setSourceLocation(build?.take_from);\n  }, [build?.take_from]);\n\n  const sourceLocationField: ApiFormFieldType = useMemo(() => {\n    return {\n      field_type: 'related field',\n      api_url: apiUrl(ApiEndpoints.stock_location_list),\n      model: ModelType.stocklocation,\n      required: false,\n      label: t`Source Location`,\n      description: t`Select the source location for the stock allocation`,\n      name: 'source_location',\n      value: build?.take_from,\n      onValueChange: (value: any) => {\n        setSourceLocation(value);\n      }\n    };\n  }, [build?.take_from]);\n\n  const preFormContent = useMemo(() => {\n    return (\n      <Stack gap='xs'>\n        {output?.pk && (\n          <Stack gap='xs'>\n            <Alert\n              color='blue'\n              icon={<IconInfoCircle />}\n              title={t`Build Output`}\n            >\n              <RenderStockItem instance={output} />\n            </Alert>\n            <Divider />\n          </Stack>\n        )}\n        <StandaloneField fieldDefinition={sourceLocationField} />\n      </Stack>\n    );\n  }, [output, sourceLocationField]);\n\n  return useCreateApiFormModal({\n    url: ApiEndpoints.build_order_allocate,\n    pk: buildId,\n    title: t`Allocate Stock`,\n    fields: buildAllocateFields,\n    preFormContent: preFormContent,\n    successMessage: t`Stock items allocated`,\n    onFormSuccess: onFormSuccess,\n    initialData: {\n      items: lineItems\n        .filter((item) => {\n          if (outputId) {\n            // Do not filter items for tracked outputs\n            return true;\n          } else {\n            return (\n              item.requiredQuantity > item.allocatedQuantity + item.consumed\n            );\n          }\n        })\n        .map((item) => {\n          return {\n            build_line: item.pk,\n            stock_item: undefined,\n            quantity: Math.max(\n              0,\n              item.requiredQuantity - item.allocatedQuantity - item.consumed\n            ),\n            output: outputId\n          };\n        })\n    },\n    size: '80%'\n  });\n}\n\nfunction BuildConsumeItemRow({\n  props,\n  record\n}: {\n  props: TableFieldRowProps;\n  record: any;\n}) {\n  return (\n    <Table.Tr key={`table-row-${record.pk}`}>\n      <Table.Td>\n        <RenderPartColumn part={record.part_detail} />\n      </Table.Td>\n      <Table.Td>\n        <RenderStockItem instance={record.stock_item_detail} />\n      </Table.Td>\n      <Table.Td>\n        {record.location_detail && (\n          <RenderStockLocation instance={record.location_detail} />\n        )}\n      </Table.Td>\n      <Table.Td>{record.quantity}</Table.Td>\n      <Table.Td>\n        <StandaloneField\n          fieldName='quantity'\n          fieldDefinition={{\n            field_type: 'number',\n            required: true,\n            value: props.item.quantity,\n            onValueChange: (value: any) => {\n              props.changeFn(props.idx, 'quantity', value);\n            }\n          }}\n          error={props.rowErrors?.quantity?.message}\n        />\n      </Table.Td>\n      <Table.Td>\n        <RemoveRowButton onClick={() => props.removeFn(props.idx)} />\n      </Table.Td>\n    </Table.Tr>\n  );\n}\n\n/**\n * Dynamic form for consuming stock against multiple BuildItem records\n */\nexport function useConsumeBuildItemsForm({\n  buildId,\n  allocatedItems,\n  onFormSuccess\n}: {\n  buildId: number;\n  allocatedItems: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const consumeFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      items: {\n        field_type: 'table',\n        value: [],\n        headers: [\n          { title: t`Part` },\n          { title: t`Stock Item` },\n          { title: t`Location` },\n          { title: t`Allocated` },\n          { title: t`Quantity` }\n        ],\n        modelRenderer: (row: TableFieldRowProps) => {\n          const record = allocatedItems.find(\n            (item) => item.pk == row.item.build_item\n          );\n\n          return (\n            <BuildConsumeItemRow key={row.idx} props={row} record={record} />\n          );\n        }\n      },\n      notes: {}\n    };\n  }, [allocatedItems]);\n\n  return useCreateApiFormModal({\n    url: ApiEndpoints.build_order_consume,\n    pk: buildId,\n    title: t`Consume Stock`,\n    successMessage: t`Stock items consumed`,\n    onFormSuccess: onFormSuccess,\n    size: '80%',\n    fields: consumeFields,\n    initialData: {\n      items: allocatedItems.map((item) => {\n        return {\n          build_item: item.pk,\n          quantity: item.quantity\n        };\n      })\n    }\n  });\n}\n\nfunction BuildConsumeLineRow({\n  props,\n  record\n}: {\n  props: TableFieldRowProps;\n  record: any;\n}) {\n  const allocated: number = record.allocatedQuantity ?? record.allocated;\n  const required: number = record.requiredQuantity ?? record.required;\n  const remaining: number = Math.max(0, required - record.consumed);\n\n  return (\n    <Table.Tr key={`table-row-${record.pk}`}>\n      <Table.Td>\n        <RenderPartColumn part={record.part_detail} />\n      </Table.Td>\n      <Table.Td>\n        {remaining <= 0 ? (\n          <Group gap='xs'>\n            <IconCircleCheck size={16} color='green' />\n            <Text size='sm' style={{ fontStyle: 'italic' }}>\n              {t`Fully consumed`}\n            </Text>\n          </Group>\n        ) : (\n          <ProgressBar value={allocated} maximum={remaining} progressLabel />\n        )}\n      </Table.Td>\n      <Table.Td>\n        <ProgressBar\n          value={record.consumed}\n          maximum={record.quantity}\n          progressLabel\n        />\n      </Table.Td>\n      <Table.Td>\n        <RemoveRowButton onClick={() => props.removeFn(props.idx)} />\n      </Table.Td>\n    </Table.Tr>\n  );\n}\n\n/**\n * Dynamic form for consuming stock against multiple BuildLine records\n */\nexport function useConsumeBuildLinesForm({\n  buildId,\n  buildLines,\n  onFormSuccess\n}: {\n  buildId: number;\n  buildLines: any[];\n  onFormSuccess: (response: any) => void;\n}) {\n  const filteredLines = useMemo(() => {\n    return buildLines.filter((line) => !line.part_detail?.trackable);\n  }, [buildLines]);\n\n  const consumeFields: ApiFormFieldSet = useMemo(() => {\n    return {\n      lines: {\n        field_type: 'table',\n        value: [],\n        headers: [\n          { title: t`Part` },\n          { title: t`Allocated` },\n          { title: t`Consumed` }\n        ],\n        modelRenderer: (row: TableFieldRowProps) => {\n          const record = filteredLines.find(\n            (item) => item.pk == row.item.build_line\n          );\n\n          return (\n            <BuildConsumeLineRow key={row.idx} props={row} record={record} />\n          );\n        }\n      },\n      notes: {}\n    };\n  }, [filteredLines]);\n\n  return useCreateApiFormModal({\n    url: ApiEndpoints.build_order_consume,\n    pk: buildId,\n    title: t`Consume Stock`,\n    successMessage: t`Stock items consumed`,\n    onFormSuccess: onFormSuccess,\n    fields: consumeFields,\n    initialData: {\n      lines: filteredLines.map((item) => {\n        return {\n          build_line: item.pk\n        };\n      })\n    }\n  });\n}\n"],"names":["useBuildOrderFields","create","modalId","destination","setDestination","useState","batchCode","setBatchCode","batchGenerator","useBatchCodeGenerator","onGenerate","value","batch","globalSettings","useGlobalSettingsState","useMemo","fields","reference","part","disabled","filters","assembly","virtual","active","isSet","undefined","locked","onValueChange","record","default_location","category_default_location","update","title","quantity","project_code","icon","IconList","priority","parent","IconSitemap","part_detail","sales_order","IconTruckDelivery","placeholder","result","_i18n","_","id","start_date","IconCalendar","target_date","take_from","structural","link","IconLink","issued_by","IconUser","is_active","responsible","IconUsersGroup","external","useBuildOrderOutputFields","build","trackable","location","setLocation","useEffect","setQuantity","build_quantity","build_complete","completed","Math","max","serialGenerator","useSerialNumberGenerator","initialQuery","pk","serial_numbers","hidden","batch_code","auto_allocate","BuildOutputFormRow","props","stockItemColumn","serial","quantityColumn","jsx","StandaloneField","field_type","required","item","changeFn","idx","rowErrors","message","Fragment","jsxs","Table","RenderPartColumn","TableFieldErrorWrapper","StatusRenderer","status","ModelType","stockitem","width","whiteSpace","RemoveRowButton","removeFn","useCompleteBuildOutputsForm","outputs","onFormSuccess","buildOutputCompleteFields","map","output","modelRenderer","row","find","headers","style","status_custom_key","notes","accept_incomplete_allocation","useCreateApiFormModal","url","apiUrl","ApiEndpoints","build_output_complete","method","successMessage","size","useScrapBuildOutputsForm","buildOutputScrapFields","discard_allocations","build_output_scrap","preFormContent","Alert","List","useCancelBuildOutputsForm","buildOutputCancelFields","build_output_delete","BuildAllocateLineRow","sourceLocation","stockField","api_url","stock_item_list","model","autoFill","autoFillFilters","available","location_detail","bom_item","cascade","stock_item","name","instance","allocated","min","quantityField","ProgressBar","allocatedQuantity","requiredQuantity","consumed","useAllocateStockToBuildForm","buildId","outputId","lineItems","setSourceLocation","buildAllocateFields","items","minWidth","build_line","sourceLocationField","stock_location_list","stocklocation","label","description","Stack","IconInfoCircle","RenderStockItem","Divider","build_order_allocate","initialData","filter","BuildConsumeItemRow","stock_item_detail","RenderStockLocation","useConsumeBuildItemsForm","allocatedItems","consumeFields","build_item","build_order_consume","BuildConsumeLineRow","remaining","Group","IconCircleCheck","Text","fontStyle","useConsumeBuildLinesForm","buildLines","filteredLines","line","lines"],"mappings":"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"}