{"version":3,"file":"CustomStateTable-B6XbyELs.js","sources":["../../../../../../frontend/src/tables/settings/CustomStateTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Badge } from '@mantine/core';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowDuplicateAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport type {\n  StatusCodeInterface,\n  StatusCodeListInterface\n} from '../../components/render/StatusRenderer';\nimport { statusColorMap } from '../../defaults/backendMappings';\nimport { useCustomStateFields } from '../../forms/CommonForms';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useGlobalStatusState } from '../../states/GlobalStatusState';\nimport { useUserState } from '../../states/UserState';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\n/**\n * Table for displaying list of custom states\n */\nexport default function CustomStateTable() {\n  const table = useTable('customstates');\n\n  const statusCodes = useGlobalStatusState();\n\n  // Find the associated logical state key\n  const getLogicalState = useCallback(\n    (group: string, key: number) => {\n      const valuesList = Object.values(statusCodes.status ?? {}).find(\n        (value: StatusCodeListInterface) => value.status_class === group\n      );\n\n      const value = Object.values(valuesList?.values ?? {}).find(\n        (value: StatusCodeInterface) => value.key === key\n      );\n\n      return value?.label ?? value?.name ?? '';\n    },\n    [statusCodes]\n  );\n\n  const user = useUserState();\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'reference_status',\n        label: t`Status Group`,\n        field_type: 'choice',\n        choices: Object.values(statusCodes.status ?? {}).map(\n          (value: StatusCodeListInterface) => ({\n            label: value.status_class,\n            value: value.status_class\n          })\n        )\n      }\n    ];\n  }, [statusCodes]);\n\n  const columns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'reference_status',\n        title: t`Status`,\n        sortable: true\n      },\n      {\n        accessor: 'logical_key',\n        title: t`Logical State`,\n        sortable: true,\n        render: (record: any) => {\n          const stateText = getLogicalState(\n            record.reference_status,\n            record.logical_key\n          );\n          return stateText ? stateText : record.logical_key;\n        }\n      },\n      {\n        accessor: 'name',\n        title: t`Identifier`,\n        sortable: true\n      },\n      {\n        accessor: 'label',\n        title: t`Display Name`,\n        sortable: true\n      },\n      {\n        accessor: 'key',\n        sortable: true\n      },\n      {\n        accessor: 'color',\n        render: (record: any) => {\n          return (\n            <Badge\n              color={statusColorMap[record.color] || statusColorMap['default']}\n              variant='filled'\n              size='xs'\n            >\n              {record.color}\n            </Badge>\n          );\n        }\n      }\n    ];\n  }, [getLogicalState]);\n\n  const newCustomStateFields = useCustomStateFields();\n  const duplicateCustomStateFields = useCustomStateFields();\n  const editCustomStateFields = useCustomStateFields();\n\n  const [initialStateData, setInitialStateData] = useState<any>({});\n\n  const newCustomState = useCreateApiFormModal({\n    url: ApiEndpoints.custom_state_list,\n    title: t`Add State`,\n    fields: newCustomStateFields,\n    table: table\n  });\n\n  const duplicateCustomState = useCreateApiFormModal({\n    url: ApiEndpoints.custom_state_list,\n    title: t`Add State`,\n    fields: duplicateCustomStateFields,\n    initialData: initialStateData,\n    table: table\n  });\n\n  const [selectedCustomState, setSelectedCustomState] = useState<\n    number | undefined\n  >(undefined);\n\n  const editCustomState = useEditApiFormModal({\n    url: ApiEndpoints.custom_state_list,\n    pk: selectedCustomState,\n    title: t`Edit State`,\n    fields: editCustomStateFields,\n    table: table\n  });\n\n  const deleteCustomState = useDeleteApiFormModal({\n    url: ApiEndpoints.custom_state_list,\n    pk: selectedCustomState,\n    title: t`Delete State`,\n    table: table\n  });\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      return [\n        RowEditAction({\n          hidden: !user.hasChangeRole(UserRoles.admin),\n          onClick: () => {\n            setSelectedCustomState(record.pk);\n            editCustomState.open();\n          }\n        }),\n        RowDuplicateAction({\n          hidden: !user.hasAddRole(UserRoles.admin),\n          onClick: () => {\n            setInitialStateData(record);\n            duplicateCustomState.open();\n          }\n        }),\n        RowDeleteAction({\n          hidden: !user.hasDeleteRole(UserRoles.admin),\n          onClick: () => {\n            setSelectedCustomState(record.pk);\n            deleteCustomState.open();\n          }\n        })\n      ];\n    },\n    [user]\n  );\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key={'add'}\n        onClick={() => {\n          setInitialStateData({});\n          newCustomState.open();\n        }}\n        tooltip={t`Add State`}\n      />\n    ];\n  }, []);\n\n  return (\n    <>\n      {newCustomState.modal}\n      {editCustomState.modal}\n      {duplicateCustomState.modal}\n      {deleteCustomState.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.custom_state_list)}\n        tableState={table}\n        columns={columns}\n        props={{\n          rowActions: rowActions,\n          tableActions: tableActions,\n          tableFilters: tableFilters,\n          enableDownload: true\n        }}\n      />\n    </>\n  );\n}\n"],"names":["CustomStateTable","table","useTable","statusCodes","useGlobalStatusState","getLogicalState","useCallback","group","key","valuesList","Object","values","status","find","value","status_class","label","name","user","useUserState","tableFilters","useMemo","_i18n","_","id","field_type","choices","map","columns","accessor","title","sortable","render","record","stateText","reference_status","logical_key","jsx","Badge","statusColorMap","color","newCustomStateFields","useCustomStateFields","duplicateCustomStateFields","editCustomStateFields","initialStateData","setInitialStateData","useState","newCustomState","useCreateApiFormModal","url","ApiEndpoints","custom_state_list","fields","duplicateCustomState","initialData","selectedCustomState","setSelectedCustomState","undefined","editCustomState","useEditApiFormModal","pk","deleteCustomState","useDeleteApiFormModal","rowActions","RowEditAction","hidden","hasChangeRole","UserRoles","admin","onClick","open","RowDuplicateAction","hasAddRole","RowDeleteAction","hasDeleteRole","tableActions","AddItemButton","jsxs","Fragment","modal","InvenTreeTable","apiUrl","enableDownload"],"mappings":"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"}