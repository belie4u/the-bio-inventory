{"version":3,"file":"LanguageSelect-B65jaXb9.js","sources":["../../../../../../frontend/src/components/items/ColorToggle.tsx","../../../../../../frontend/src/components/items/LanguageSelect.tsx"],"sourcesContent":["import {\n  ActionIcon,\n  Group,\n  Tooltip,\n  useMantineColorScheme\n} from '@mantine/core';\nimport { IconMoonStars, IconSun } from '@tabler/icons-react';\n\nimport { t } from '@lingui/core/macro';\nimport { vars } from '../../theme';\n\nexport function ColorToggle() {\n  const { colorScheme, toggleColorScheme } = useMantineColorScheme();\n\n  return (\n    <Group justify='center'>\n      <Tooltip label={t`Toggle color scheme`}>\n        <ActionIcon\n          onClick={toggleColorScheme}\n          size='lg'\n          style={{\n            color:\n              colorScheme === 'dark'\n                ? vars.colors.yellow[4]\n                : vars.colors.blue[6]\n          }}\n          variant='transparent'\n        >\n          {colorScheme === 'dark' ? <IconSun /> : <IconMoonStars />}\n        </ActionIcon>\n      </Tooltip>\n    </Group>\n  );\n}\n","import { Select } from '@mantine/core';\nimport { useEffect, useState } from 'react';\n\nimport { useShallow } from 'zustand/react/shallow';\nimport { getSupportedLanguages } from '../../contexts/LanguageContext';\nimport { useLocalState } from '../../states/LocalState';\n\nexport function LanguageSelect({ width = 80 }: Readonly<{ width?: number }>) {\n  const [value, setValue] = useState<string | null>(null);\n  const [locale, setLanguage] = useLocalState(\n    useShallow((state) => [state.language, state.setLanguage])\n  );\n  const [langOptions, setLangOptions] = useState<any[]>([]);\n\n  // change global language on change\n  useEffect(() => {\n    if (value === null) return;\n    setLanguage(value as string);\n  }, [value]);\n\n  // set language on component load\n  useEffect(() => {\n    const languages = getSupportedLanguages();\n\n    const newLangOptions = Object.keys(languages).map((key) => ({\n      value: key,\n      label: languages[key as string]\n    }));\n    setLangOptions(newLangOptions);\n    setValue(locale);\n  }, [locale]);\n\n  return (\n    <Select\n      w={width}\n      data={langOptions}\n      value={value}\n      onChange={setValue}\n      searchable\n      aria-label='Select language'\n    />\n  );\n}\n"],"names":["ColorToggle","colorScheme","toggleColorScheme","useMantineColorScheme","Group","jsx","Tooltip","_i18n","_","id","ActionIcon","color","vars","colors","yellow","blue","IconSun","IconMoonStars","LanguageSelect","width","value","setValue","useState","locale","setLanguage","useLocalState","useShallow","state","language","langOptions","setLangOptions","useEffect","languages","getSupportedLanguages","newLangOptions","Object","keys","map","key","label","Select"],"mappings":"mNAWO,SAASA,GAAc,CAC5B,KAAM,CAAEC,YAAAA,EAAaC,kBAAAA,CAAAA,EAAsBC,EAAAA,EAE3C,aACGC,EAAA,CAAM,QAAQ,SACb,SAAAC,EAAAA,IAACC,EAAA,CAAQ,MAAMC,EAAAC,EAAC,CAAAC,GAAA,QAAA,CAAqB,EACnC,SAAAJ,EAAAA,IAACK,EAAA,CACC,QAASR,EACT,KAAK,KACL,MAAO,CACLS,MACEV,IAAgB,OACZW,EAAKC,OAAOC,OAAO,CAAC,EACpBF,EAAKC,OAAOE,KAAK,CAAC,CAAA,EAE1B,QAAQ,cAEPd,SAAAA,IAAgB,OAASI,EAAAA,IAACW,EAAA,CAAA,CAAO,EAAMX,EAAAA,IAACY,EAAA,CAAA,CAAa,CAAA,CACxD,CAAA,CACF,EACF,CAEJ,CC1BO,SAASC,EAAe,CAAEC,MAAAA,EAAQ,EAAiC,EAAG,CAC3E,KAAM,CAACC,EAAOC,CAAQ,EAAIC,EAAAA,SAAwB,IAAI,EAChD,CAACC,EAAQC,CAAW,EAAIC,EAC5BC,EAAYC,GAAU,CAACA,EAAMC,SAAUD,EAAMH,WAAW,CAAC,CAC3D,EACM,CAACK,EAAaC,CAAc,EAAIR,EAAAA,SAAgB,CAAA,CAAE,EAGxDS,OAAAA,EAAAA,UAAU,IAAM,CACVX,IAAU,MACdI,EAAYJ,CAAe,CAC7B,EAAG,CAACA,CAAK,CAAC,EAGVW,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAYC,EAAAA,EAEZC,EAAiBC,OAAOC,KAAKJ,CAAS,EAAEK,IAAKC,IAAS,CAC1DlB,MAAOkB,EACPC,MAAOP,EAAUM,CAAa,CAAA,EAC9B,EACFR,EAAeI,CAAc,EAC7Bb,EAASE,CAAM,CACjB,EAAG,CAACA,CAAM,CAAC,EAGTlB,EAAAA,IAACmC,EAAA,CACC,EAAGrB,EACH,KAAMU,EACN,MAAAT,EACA,SAAUC,EACV,WAAU,GACV,aAAW,iBAAA,CAAiB,CAGlC"}