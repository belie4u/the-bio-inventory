{"version":3,"file":"AttachmentPanel-Be6kmD3E.js","sources":["../../../../../../frontend/src/tables/general/AttachmentTable.tsx","../../../../../../frontend/src/components/panels/AttachmentPanel.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Badge, Group, Paper, Stack, Text } from '@mantine/core';\nimport { Dropzone } from '@mantine/dropzone';\nimport { notifications } from '@mantine/notifications';\nimport {\n  IconCircleCheck,\n  IconExclamationCircle,\n  IconExternalLink,\n  IconFileUpload,\n  IconUpload,\n  IconX\n} from '@tabler/icons-react';\nimport { type ReactNode, useCallback, useMemo, useState } from 'react';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { ProgressBar } from '@lib/components/ProgressBar';\nimport {\n  type RowAction,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { AttachmentLink } from '../../components/items/AttachmentLink';\nimport { useApi } from '../../contexts/ApiContext';\nimport { formatFileSize } from '../../defaults/formatters';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\n/**\n * Define set of columns to display for the attachment table\n */\nfunction attachmentTableColumns(): TableColumn[] {\n  return [\n    {\n      accessor: 'attachment',\n      sortable: false,\n      switchable: false,\n      noWrap: true,\n      render: (record: any) => {\n        if (record.attachment) {\n          return <AttachmentLink attachment={record.attachment} />;\n        } else if (record.link) {\n          return <AttachmentLink attachment={record.link} external />;\n        } else {\n          return '-';\n        }\n      },\n      noContext: true\n    },\n    {\n      accessor: 'comment',\n      sortable: false,\n\n      render: (record: any) => {\n        return record.comment;\n      }\n    },\n    {\n      accessor: 'upload_date',\n      sortable: true,\n\n      render: (record: any) => {\n        return (\n          <Group justify='space-between'>\n            <Text>{record.upload_date}</Text>\n            {record.user_detail && (\n              <Badge size='xs'>{record.user_detail.username}</Badge>\n            )}\n          </Group>\n        );\n      }\n    },\n    {\n      accessor: 'file_size',\n      sortable: true,\n      switchable: true,\n      render: (record: any) => {\n        if (!record.attachment) {\n          return '-';\n        } else {\n          return formatFileSize(record.file_size);\n        }\n      }\n    }\n  ];\n}\n\nfunction UploadProgress({\n  filename,\n  progress\n}: {\n  filename: string;\n  progress: number;\n}) {\n  return (\n    <Stack gap='xs'>\n      <Text size='sm'>{t`Uploading file ${filename}`}</Text>\n      <ProgressBar value={progress} progressLabel={false} />\n    </Stack>\n  );\n}\n\n/**\n * Construct a table for displaying uploaded attachments\n */\nexport function AttachmentTable({\n  model_type,\n  model_id\n}: Readonly<{\n  model_type: ModelType;\n  model_id: number;\n}>): ReactNode {\n  const api = useApi();\n  const user = useUserState();\n  const table = useTable(`${model_type}-attachments`);\n\n  const tableColumns = useMemo(() => attachmentTableColumns(), []);\n\n  const url = apiUrl(ApiEndpoints.attachment_list);\n\n  const validPk = useMemo(() => model_id > 0, [model_id]);\n\n  const canDelete = useMemo(\n    () => user.hasDeletePermission(model_type),\n    [user, model_type]\n  );\n\n  const [isUploading, setIsUploading] = useState<boolean>(false);\n\n  const allowDragAndDrop: boolean = useMemo(() => {\n    return user.hasAddPermission(model_type);\n  }, [user, model_type]);\n\n  // Callback to upload file attachment(s)\n  function uploadFiles(files: File[]) {\n    files.forEach((file) => {\n      const formData = new FormData();\n      formData.append('attachment', file);\n      formData.append('model_type', model_type);\n      formData.append('model_id', model_id.toString());\n\n      setIsUploading(true);\n\n      const name: string = file.name;\n      const id: string = `attachment-upload-${model_type}-${model_id}-${file.name}`;\n\n      notifications.show({\n        id: id,\n        title: t`Uploading File`,\n        message: <UploadProgress filename={name} progress={0} />,\n        color: 'blue',\n        loading: true,\n        autoClose: false\n      });\n\n      api\n        .post(url, formData, {\n          timeout: 30 * 1000,\n          onUploadProgress: (progressEvent) => {\n            const progress = 100 * (progressEvent?.progress ?? 0);\n            notifications.update({\n              id: id,\n              title: t`Uploading File`,\n              color: 'blue',\n              loading: true,\n              autoClose: false,\n              message: <UploadProgress filename={name} progress={progress} />\n            });\n          }\n        })\n        .then((response) => {\n          notifications.update({\n            id: id,\n            title: t`File Uploaded`,\n            message: t`File ${name} uploaded successfully`,\n            color: 'green',\n            autoClose: 3500,\n            icon: <IconCircleCheck />,\n            loading: false\n          });\n\n          table.refreshTable();\n\n          return response;\n        })\n        .catch((error) => {\n          console.error('Error uploading attachment:', file, '->', error);\n          notifications.update({\n            id: id,\n            title: t`Upload Error`,\n            message: t`File could not be uploaded`,\n            color: 'red',\n            autoClose: 5000,\n            icon: <IconExclamationCircle />,\n            loading: false\n          });\n          return error;\n        })\n        .finally(() => {\n          setIsUploading(false);\n        });\n    });\n  }\n\n  const [attachmentType, setAttachmentType] = useState<'attachment' | 'link'>(\n    'attachment'\n  );\n\n  const [selectedAttachment, setSelectedAttachment] = useState<\n    number | undefined\n  >(undefined);\n\n  const uploadFields: ApiFormFieldSet = useMemo(() => {\n    const fields: ApiFormFieldSet = {\n      model_type: {\n        value: model_type,\n        hidden: true\n      },\n      model_id: {\n        value: model_id,\n        hidden: true\n      },\n      attachment: {},\n      link: {},\n      comment: {}\n    };\n\n    if (attachmentType != 'link') {\n      delete fields['link'];\n    }\n\n    // Remove the 'attachment' field if we are editing an existing attachment, or uploading a link\n    if (attachmentType != 'attachment' || !!selectedAttachment) {\n      delete fields['attachment'];\n    }\n\n    return fields;\n  }, [model_type, model_id, attachmentType, selectedAttachment]);\n\n  const uploadAttachment = useCreateApiFormModal({\n    url: url,\n    title: t`Upload Attachment`,\n    fields: uploadFields,\n    onFormSuccess: () => {\n      table.refreshTable();\n    }\n  });\n\n  const editAttachment = useEditApiFormModal({\n    url: url,\n    pk: selectedAttachment,\n    title: t`Edit Attachment`,\n    fields: uploadFields,\n    onFormSuccess: (record: any) => {\n      if (record.pk) {\n        table.updateRecord(record);\n      } else {\n        table.refreshTable();\n      }\n    }\n  });\n\n  const deleteAttachment = useDeleteApiFormModal({\n    url: url,\n    pk: selectedAttachment,\n    title: t`Delete Attachment`,\n    onFormSuccess: () => {\n      table.refreshTable();\n    }\n  });\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'is_link',\n        label: t`Is Link`,\n        description: t`Show link attachments`\n      },\n      {\n        name: 'is_file',\n        label: t`Is File`,\n        description: t`Show file attachments`\n      }\n    ];\n  }, []);\n\n  const tableActions: ReactNode[] = useMemo(() => {\n    return [\n      <ActionButton\n        key='add-attachment'\n        tooltip={t`Add attachment`}\n        hidden={!user.hasAddPermission(model_type)}\n        icon={<IconFileUpload />}\n        onClick={() => {\n          setAttachmentType('attachment');\n          setSelectedAttachment(undefined);\n          uploadAttachment.open();\n        }}\n      />,\n      <ActionButton\n        key='add-external-link'\n        tooltip={t`Add external link`}\n        hidden={!user.hasAddPermission(model_type)}\n        icon={<IconExternalLink />}\n        onClick={() => {\n          setAttachmentType('link');\n          setSelectedAttachment(undefined);\n          uploadAttachment.open();\n        }}\n      />\n    ];\n  }, [user, model_type]);\n\n  // Construct row actions for the attachment table\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      return [\n        RowEditAction({\n          hidden: !user.hasChangePermission(model_type),\n          onClick: () => {\n            setSelectedAttachment(record.pk);\n            editAttachment.open();\n          }\n        }),\n        RowDeleteAction({\n          hidden: !canDelete,\n          onClick: () => {\n            setSelectedAttachment(record.pk);\n            deleteAttachment.open();\n          }\n        })\n      ];\n    },\n    [user, model_type]\n  );\n\n  return (\n    <>\n      {uploadAttachment.modal}\n      {editAttachment.modal}\n      {deleteAttachment.modal}\n      <Stack gap='xs'>\n        {validPk && (\n          <InvenTreeTable\n            key='attachment-table'\n            url={url}\n            tableState={table}\n            columns={tableColumns}\n            props={{\n              noRecordsText: t`No attachments found`,\n              enableSelection: canDelete,\n              enableBulkDelete: canDelete,\n              tableActions: tableActions,\n              tableFilters: tableFilters,\n              rowActions: rowActions,\n              params: {\n                model_type: model_type,\n                model_id: model_id\n              }\n            }}\n          />\n        )}\n        {allowDragAndDrop && validPk && (\n          <Paper p='md' shadow='xs' radius='md'>\n            <Dropzone\n              onDrop={uploadFiles}\n              loading={isUploading}\n              key='attachment-dropzone'\n            >\n              <Group justify='center' gap='lg' mih={100}>\n                <Dropzone.Accept>\n                  <IconUpload\n                    style={{ color: 'var(--mantine-color-blue-6)' }}\n                    stroke={1.5}\n                  />\n                </Dropzone.Accept>\n                <Dropzone.Reject>\n                  <IconX\n                    style={{ color: 'var(--mantine-color-red-6)' }}\n                    stroke={1.5}\n                  />\n                </Dropzone.Reject>\n                <Dropzone.Idle>\n                  <IconUpload\n                    style={{ color: 'var(--mantine-color-dimmed)' }}\n                    stroke={1.5}\n                  />\n                </Dropzone.Idle>\n                <Text size='sm'>{t`Drag attachment file here to upload`}</Text>\n              </Group>\n            </Dropzone>\n          </Paper>\n        )}\n      </Stack>\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Skeleton } from '@mantine/core';\nimport { IconPaperclip } from '@tabler/icons-react';\n\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { AttachmentTable } from '../../tables/general/AttachmentTable';\nimport type { PanelType } from './Panel';\n\nexport default function AttachmentPanel({\n  model_type,\n  model_id\n}: {\n  model_type: ModelType;\n  model_id: number | undefined;\n}): PanelType {\n  return {\n    name: 'attachments',\n    label: t`Attachments`,\n    icon: <IconPaperclip />,\n    content:\n      model_type && model_id ? (\n        <AttachmentTable model_type={model_type} model_id={model_id} />\n      ) : (\n        <Skeleton />\n      )\n  };\n}\n"],"names":["attachmentTableColumns","accessor","sortable","switchable","noWrap","render","record","attachment","jsx","AttachmentLink","link","noContext","comment","jsxs","Group","Text","upload_date","user_detail","Badge","username","formatFileSize","file_size","UploadProgress","filename","progress","Stack","_i18n","_","id","values","ProgressBar","AttachmentTable","model_type","model_id","api","useApi","user","useUserState","table","useTable","tableColumns","useMemo","url","apiUrl","ApiEndpoints","attachment_list","validPk","canDelete","hasDeletePermission","isUploading","setIsUploading","useState","allowDragAndDrop","hasAddPermission","uploadFiles","files","forEach","file","formData","FormData","append","toString","name","notifications","show","title","message","color","loading","autoClose","post","timeout","onUploadProgress","progressEvent","update","then","response","icon","IconCircleCheck","refreshTable","catch","error","console","IconExclamationCircle","finally","attachmentType","setAttachmentType","selectedAttachment","setSelectedAttachment","undefined","uploadFields","fields","value","hidden","uploadAttachment","useCreateApiFormModal","onFormSuccess","editAttachment","useEditApiFormModal","pk","updateRecord","deleteAttachment","useDeleteApiFormModal","tableFilters","label","description","tableActions","ActionButton","IconFileUpload","open","IconExternalLink","rowActions","useCallback","RowEditAction","hasChangePermission","onClick","RowDeleteAction","Fragment","modal","InvenTreeTable","noRecordsText","enableSelection","enableBulkDelete","params","Paper","Dropzone","IconUpload","IconX","AttachmentPanel","IconPaperclip","content","Skeleton"],"mappings":"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"}