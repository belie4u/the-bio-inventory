{"version":3,"file":"UseStatusCodes-ChLgWVsN.js","sources":["../../../../../../frontend/src/hooks/UseStatusCodes.tsx"],"sourcesContent":["import { useMemo } from 'react';\n\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { getStatusCodes } from '../components/render/StatusRenderer';\nimport { useGlobalStatusState } from '../states/GlobalStatusState';\n\n/**\n * Hook to access status codes, which are enumerated by the backend.\n *\n * This hook is used to return a map of status codes for a given model type.\n * It is a memoized wrapper around getStatusCodes,\n * and returns a simplified KEY:value map of status codes.\n *\n * e.g. for the \"PurchaseOrderStatus\" enumeration, returns a map like:\n *\n * {\n *   PENDING: 10\n *   PLACED: 20\n *   ON_HOLD: 25,\n *   COMPLETE: 30,â€‹\n *   CANCELLED: 40,\n *   LOST: 50,\n *   RETURNED: 60\n * }\n */\nexport default function useStatusCodes({\n  modelType\n}: {\n  modelType: ModelType | string;\n}) {\n  const statusCodeList = useGlobalStatusState.getState().status;\n\n  const codes = useMemo(() => {\n    const statusCodes = getStatusCodes(modelType) || null;\n\n    const codesMap: Record<any, any> = {};\n\n    if (!statusCodes) {\n      return codesMap;\n    }\n\n    Object.keys(statusCodes.values).forEach((name) => {\n      codesMap[name] = statusCodes.values[name].key;\n    });\n\n    return codesMap;\n  }, [modelType, statusCodeList]);\n\n  return codes;\n}\n"],"names":["useStatusCodes","modelType","statusCodeList","useGlobalStatusState","getState","status","useMemo","statusCodes","getStatusCodes","codesMap","Object","keys","values","forEach","name","key"],"mappings":"sHAyBA,SAAwBA,EAAe,CACrCC,UAAAA,CAGF,EAAG,CACD,MAAMC,EAAiBC,EAAqBC,SAAAA,EAAWC,OAkBvD,OAhBcC,EAAAA,QAAQ,IAAM,CAC1B,MAAMC,EAAcC,EAAeP,CAAS,GAAK,KAE3CQ,EAA6B,CAAA,EAEnC,OAAKF,GAILG,OAAOC,KAAKJ,EAAYK,MAAM,EAAEC,QAASC,GAAS,CAChDL,EAASK,CAAI,EAAIP,EAAYK,OAAOE,CAAI,EAAEC,GAC5C,CAAC,EAEMN,CACT,EAAG,CAACR,EAAWC,CAAc,CAAC,CAGhC"}