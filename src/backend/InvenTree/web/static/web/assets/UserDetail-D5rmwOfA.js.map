{"version":3,"file":"UserDetail-D5rmwOfA.js","sources":["../../../../../../frontend/src/pages/core/UserDetail.tsx"],"sourcesContent":["import { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { t } from '@lingui/core/macro';\nimport { Badge, Group, Skeleton, Stack } from '@mantine/core';\nimport { IconInfoCircle } from '@tabler/icons-react';\nimport { type ReactNode, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  type DetailsField,\n  DetailsTable\n} from '../../components/details/Details';\nimport { ItemDetailsGrid } from '../../components/details/ItemDetails';\nimport {} from '../../components/items/ActionDropdown';\nimport InstanceDetail from '../../components/nav/InstanceDetail';\nimport { PageDetail } from '../../components/nav/PageDetail';\nimport type { PanelType } from '../../components/panels/Panel';\nimport { PanelGroup } from '../../components/panels/PanelGroup';\nimport {} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\n\n/**\n * Detail page for a single user\n */\nexport default function UserDetail() {\n  const { id } = useParams();\n\n  const user = useUserState();\n  const settings = useGlobalSettingsState();\n\n  const { instance, instanceQuery } = useInstance({\n    endpoint: ApiEndpoints.user_list,\n    pk: id\n  });\n\n  const userGroups: any[] = useMemo(() => instance?.groups ?? [], [instance]);\n\n  const detailsPanel = useMemo(() => {\n    if (instanceQuery.isFetching) {\n      return <Skeleton />;\n    }\n\n    const tl: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'username',\n        label: t`Username`,\n        icon: 'info',\n        copy: true\n      },\n      {\n        type: 'text',\n        name: 'first_name',\n        label: t`First Name`,\n        icon: 'info',\n        copy: true,\n        hidden: !instance.first_name\n      },\n      {\n        type: 'text',\n        name: 'last_name',\n        label: t`Last Name`,\n        icon: 'info',\n        copy: true,\n        hidden: !instance.last_name\n      },\n      {\n        type: 'text',\n        name: 'email',\n        label: t`Email`,\n        copy: true,\n        hidden: !instance.email\n      }\n    ];\n\n    const tr: DetailsField[] = [\n      {\n        type: 'boolean',\n        name: 'is_active',\n        label: t`Active`,\n        icon: 'info'\n      },\n      {\n        type: 'boolean',\n        name: 'is_staff',\n        label: t`Staff`,\n        icon: 'info'\n      },\n      {\n        type: 'boolean',\n        name: 'is_superuser',\n        label: t`Superuser`,\n        icon: 'info'\n      },\n      {\n        type: 'text',\n        name: 'groups',\n        label: t`Groups`,\n        icon: 'group',\n        copy: false,\n        hidden: !userGroups,\n        value_formatter: () => {\n          return (\n            <Group gap='xs'>\n              {userGroups?.map((group) => (\n                <Badge key={group.pk}>{group.name}</Badge>\n              ))}\n            </Group>\n          );\n        }\n      }\n    ];\n\n    const br: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'displayname',\n        label: t`Display Name`,\n        icon: 'user',\n        copy: true,\n        hidden: !instance.displayname\n      },\n      {\n        type: 'text',\n        name: 'position',\n        label: t`Position`,\n        icon: 'info',\n        hidden: !instance.position\n      },\n\n      {\n        type: 'text',\n        name: 'contact',\n        label: t`Contact`,\n        icon: 'email',\n        copy: true,\n        hidden: !instance.contact\n      },\n      {\n        type: 'text',\n        name: 'organisation',\n        label: t`Organisation`,\n        icon: 'info',\n        copy: true,\n        hidden: !instance.organisation\n      },\n      {\n        type: 'text',\n        name: 'status',\n        label: t`Status`,\n        icon: 'note',\n        hidden: !instance.status\n      },\n      {\n        type: 'text',\n        name: 'location',\n        label: t`Location`,\n        icon: 'location',\n        copy: true,\n        hidden: !instance.location\n      }\n    ];\n\n    const hasProfile =\n      instance.displayname ||\n      instance.position ||\n      instance.contact ||\n      instance.organisation ||\n      instance.status ||\n      instance.location;\n\n    return (\n      <ItemDetailsGrid>\n        <DetailsTable fields={tl} item={instance} title={t`User Information`} />\n        <DetailsTable fields={tr} item={instance} title={t`User Permissions`} />\n        {hasProfile && settings.isSet('DISPLAY_PROFILE_INFO') && (\n          <DetailsTable fields={br} item={instance} title={t`User Profile`} />\n        )}\n      </ItemDetailsGrid>\n    );\n  }, [instance, userGroups, instanceQuery]);\n\n  const userPanels: PanelType[] = useMemo(() => {\n    return [\n      {\n        name: 'detail',\n        label: t`User Details`,\n        icon: <IconInfoCircle />,\n        content: detailsPanel\n      }\n    ];\n  }, [instance, id, user]);\n\n  const userBadges: ReactNode[] = useMemo(() => {\n    return instanceQuery.isLoading\n      ? []\n      : [\n          instance.is_staff && (\n            <Badge key='is_staff' color='blue'>{t`Staff`}</Badge>\n          ),\n          instance.is_superuser && (\n            <Badge key='is_superuser' color='red'>{t`Superuser`}</Badge>\n          ),\n          !instance.is_staff && !instance.is_superuser && (\n            <Badge key='is_normal' color='yellow'>{t`Basic user`}</Badge>\n          ),\n          instance.is_active ? (\n            <Badge key='is_active' color='green'>{t`Active`}</Badge>\n          ) : (\n            <Badge key='is_inactive' color='red'>{t`Inactive`}</Badge>\n          )\n        ];\n  }, [instance, instanceQuery]);\n\n  return (\n    <InstanceDetail query={instanceQuery}>\n      <Stack gap='xs'>\n        <PageDetail\n          title={`${t`User`}: ${instance.username}`}\n          imageUrl={instance?.image}\n          badges={userBadges}\n          breadcrumbs={[\n            { name: t`System Overview`, url: '/core/' },\n\n            { name: t`Users`, url: '/core/index/users/' }\n          ]}\n          lastCrumb={[\n            { name: instance.username, url: `/core/user/${instance.pk}/` }\n          ]}\n        />\n        <PanelGroup\n          pageKey='user'\n          panels={userPanels}\n          model={ModelType.user}\n          id={instance.pk}\n          instance={instance}\n          reloadInstance={instanceQuery.refetch}\n        />\n      </Stack>\n    </InstanceDetail>\n  );\n}\n"],"names":["UserDetail","id","useParams","user","useUserState","settings","useGlobalSettingsState","instance","instanceQuery","useInstance","endpoint","ApiEndpoints","user_list","pk","userGroups","useMemo","groups","detailsPanel","isFetching","Skeleton","tl","type","name","label","_i18n","_","icon","copy","hidden","first_name","last_name","email","tr","value_formatter","jsx","Group","map","group","Badge","br","displayname","position","contact","organisation","status","location","hasProfile","ItemDetailsGrid","DetailsTable","isSet","userPanels","IconInfoCircle","content","userBadges","isLoading","is_staff","is_superuser","is_active","InstanceDetail","jsxs","Stack","PageDetail","username","image","url","PanelGroup","ModelType","refetch"],"mappings":"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"}