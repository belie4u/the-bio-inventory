{"version":3,"file":"CategoryDetail-DU5m-1XL.js","sources":["../../../../../../frontend/src/tables/part/ParametricPartTableFilters.tsx","../../../../../../frontend/src/tables/part/ParametricPartTable.tsx","../../../../../../frontend/src/tables/part/PartCategoryTable.tsx","../../../../../../frontend/src/pages/part/CategoryDetail.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Divider, Group, Input, Select, Stack, TextInput } from '@mantine/core';\nimport { useEffect, useMemo, useState } from 'react';\n\n// Define set of allowed operators for parameter filters\nexport const PARAMETER_FILTER_OPERATORS: Record<string, string> = {\n  '=': '',\n  '>': '_gt',\n  '>=': '_gte',\n  '<': '_lt',\n  '<=': '_lte',\n  '!=': '_ne',\n  '~': '_icontains'\n};\n\ntype ParameterFilterProps = {\n  template: any;\n  filters: any;\n  setFilter: (templateId: number, value: string, operator: string) => void;\n  clearFilter: (templateId: number, operator?: string) => void;\n  closeFilter: () => void;\n};\n\n/**\n * UI element for viewing and changing boolean filter associated with a given parameter template\n */\nfunction BooleanParameterFilter(props: ParameterFilterProps) {\n  const filterValue = useMemo(() => {\n    return props.filters['='] ?? '';\n  }, [props.filters]);\n\n  return (\n    <Select\n      aria-label={`filter-${props.template.name}`}\n      data={[\n        { value: 'true', label: t`True` },\n        { value: 'false', label: t`False` }\n      ]}\n      value={filterValue}\n      clearable={true}\n      defaultValue={filterValue}\n      onClear={() => {\n        props.clearFilter(props.template.pk, '');\n        props.closeFilter();\n      }}\n      onChange={(val) => props.setFilter(props.template.pk, val ?? '', '=')}\n      placeholder={t`Select a choice`}\n      clearButtonProps={{\n        'aria-label': `clear-filter-${props.template.name}`\n      }}\n    />\n  );\n}\n\n/*\n * UI element for viewing and changing choice filter associated with a given parameter template.\n * In this case, the template defines a set of choices that can be selected.\n */\nfunction ChoiceParameterFilter(props: ParameterFilterProps) {\n  const filterValue = useMemo(() => {\n    return props.filters['='] ?? '';\n  }, [props.filters]);\n\n  return (\n    <Select\n      aria-label={`filter-${props.template.name}`}\n      data={props.template.choices\n        .split(',')\n        .map((choice: string) => choice.trim())}\n      value={filterValue}\n      defaultValue={filterValue}\n      onChange={(val) => props.setFilter(props.template.pk, val ?? '', '=')}\n      onClear={() => {\n        props.clearFilter(props.template.pk, '');\n        props.closeFilter();\n      }}\n      clearButtonProps={{\n        'aria-label': `clear-filter-${props.template.name}`\n      }}\n      placeholder={t`Select a choice`}\n      searchable\n      clearable\n      // rightSection={<ClearFilterButton props={props} />}\n    />\n  );\n}\n\nfunction GenericFilterRow({\n  props,\n  value,\n  operator,\n  readonly\n}: {\n  props: ParameterFilterProps;\n  value: string;\n  operator: string;\n  readonly?: boolean;\n}) {\n  const placeholder: string = useMemo(() => {\n    let placeholder = t`Enter a value`;\n\n    if (props.template.units) {\n      placeholder += ` [${props.template.units}]`;\n    }\n\n    return placeholder;\n  }, [props.template.units]);\n\n  const [op, setOp] = useState<string>(operator);\n\n  useEffect(() => {\n    setOp(operator);\n  }, [operator]);\n\n  return (\n    <Group gap='xs' wrap='nowrap'>\n      <div onMouseDown={(e) => e.stopPropagation()} style={{ width: 75 }}>\n        <Select\n          onClick={(event) => {\n            event?.stopPropagation();\n          }}\n          aria-label={`filter-${props.template.name}-operator`}\n          data={Object.keys(PARAMETER_FILTER_OPERATORS)}\n          value={op}\n          searchable={false}\n          clearable={false}\n          defaultValue={'='}\n          onChange={(value) => {\n            setOp(value ?? '=');\n          }}\n          size='sm'\n          disabled={readonly}\n          width={75}\n        />\n      </div>\n      <TextInput\n        aria-label={`filter-${props.template.name}`}\n        placeholder={placeholder}\n        defaultValue={value}\n        onKeyDown={(event) => {\n          if (event.key === 'Enter') {\n            props.setFilter(\n              props.template.pk,\n              event.currentTarget.value || '',\n              op\n            );\n            props.closeFilter();\n          }\n        }}\n        rightSection={\n          readonly && (\n            <Input.ClearButton\n              onClick={(event) => {\n                event.stopPropagation();\n                props.clearFilter(props.template.pk, op);\n                props.closeFilter();\n              }}\n              aria-label={`clear-filter-${props.template.name}`}\n            />\n          )\n        }\n      />\n    </Group>\n  );\n}\n\n/*\n * In this case, the template is generic and does not have a specific type.\n * Here, the user can apply multiple filter types (e.g., '=', '<', '>')\n */\nfunction GenericParameterFilter(props: ParameterFilterProps) {\n  return (\n    <Stack gap='xs'>\n      {/* Render a row for each operator defined in the filters object */}\n      {Object.keys(props.filters).map((operator) => {\n        return (\n          <GenericFilterRow\n            props={props}\n            value={props.filters[operator] ?? ''}\n            operator={operator}\n            readonly\n          />\n        );\n      })}\n      <Divider />\n      {/* Render an empty row for adding a new filter */}\n      <GenericFilterRow props={props} value='' operator='=' />\n    </Stack>\n  );\n}\n\n/**\n * UI element for viewing and changing filter(s) associated with a given parameter template\n * @param template - The parameter template object\n * @param filters - The current filters applied to the table\n * @param setFilter - Function to set a filter for the template\n * @param clearFilter - Function to clear the filter for the template\n * @param closeFilter - Function to close the filter UI\n */\nexport function ParameterFilter(props: ParameterFilterProps) {\n  // Filter input element (depends on template type)\n  return useMemo(() => {\n    if (props.template.checkbox) {\n      return <BooleanParameterFilter {...props} />;\n    } else if (!!props.template.choices) {\n      return <ChoiceParameterFilter {...props} />;\n    } else {\n      return <GenericParameterFilter {...props} />;\n    }\n  }, [props]);\n}\n","import { t } from '@lingui/core/macro';\nimport { Group } from '@mantine/core';\nimport { useHover } from '@mantine/hooks';\nimport { useQuery } from '@tanstack/react-query';\nimport { type ReactNode, useCallback, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { YesNoButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { cancelEvent } from '@lib/functions/Events';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport { navigateToLink } from '@lib/functions/Navigation';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { useApi } from '../../contexts/ApiContext';\nimport { formatDecimal } from '../../defaults/formatters';\nimport { usePartParameterFields } from '../../forms/PartForms';\nimport {\n  useCreateApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { DescriptionColumn, PartColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport { TableHoverCard } from '../TableHoverCard';\nimport {\n  PARAMETER_FILTER_OPERATORS,\n  ParameterFilter\n} from './ParametricPartTableFilters';\n\n// Render an individual parameter cell\nfunction ParameterCell({\n  record,\n  template,\n  canEdit\n}: Readonly<{\n  record: any;\n  template: any;\n  canEdit: boolean;\n}>) {\n  const { hovered, ref } = useHover();\n\n  // Find matching template parameter\n  const parameter = useMemo(() => {\n    return record.parameters?.find((p: any) => p.template == template.pk);\n  }, [record, template]);\n\n  const extra: any[] = [];\n\n  // Format the value for display\n  const value: ReactNode = useMemo(() => {\n    let v: any = parameter?.data;\n\n    // Handle boolean values\n    if (template?.checkbox && v != undefined) {\n      v = <YesNoButton value={parameter.data} />;\n    }\n\n    return v;\n  }, [parameter, template]);\n\n  if (\n    template.units &&\n    parameter &&\n    parameter.data_numeric &&\n    parameter.data_numeric != parameter.data\n  ) {\n    const numeric = formatDecimal(parameter.data_numeric, { digits: 15 });\n    extra.push(`${numeric} [${template.units}]`);\n  }\n\n  if (hovered && canEdit) {\n    extra.push(t`Click to edit`);\n  }\n\n  return (\n    <div>\n      <Group grow ref={ref} justify='space-between'>\n        <Group grow>\n          <TableHoverCard\n            value={value ?? '-'}\n            extra={extra}\n            icon={hovered && canEdit ? 'edit' : 'info'}\n            title={template.name}\n          />\n        </Group>\n      </Group>\n    </div>\n  );\n}\n\nexport default function ParametricPartTable({\n  categoryId\n}: Readonly<{\n  categoryId?: any;\n}>) {\n  const api = useApi();\n  const table = useTable('parametric-parts');\n  const user = useUserState();\n  const navigate = useNavigate();\n\n  const categoryParameters = useQuery({\n    queryKey: ['category-parameters', categoryId],\n    queryFn: async () => {\n      return api\n        .get(apiUrl(ApiEndpoints.part_parameter_template_list), {\n          params: {\n            category: categoryId\n          }\n        })\n        .then((response) => response.data);\n    },\n    refetchOnMount: true\n  });\n\n  /* Store filters against selected part parameters.\n   * These are stored in the format:\n   * {\n   *   parameter_1: {\n   *    '=': 'value1',\n   *    '<': 'value2',\n   *    ...\n   *   },\n   *   parameter_2: {\n   *    '=': 'value3',\n   *   },\n   *   ...\n   * }\n   *\n   * Which allows multiple filters to be applied against each parameter template.\n   */\n  const [parameterFilters, setParameterFilters] = useState<any>({});\n\n  /* Remove filters for a specific parameter template\n   * - If no operator is specified, remove all filters for this template\n   * - If an operator is specified, remove filters for that operator only\n   */\n  const clearParameterFilter = useCallback(\n    (templateId: number, operator?: string) => {\n      const filterName = `parameter_${templateId}`;\n\n      if (!operator) {\n        // If no operator is specified, remove all filters for this template\n        setParameterFilters((prev: any) => {\n          const newFilters = { ...prev };\n          // Remove any filters that match the template ID\n          Object.keys(newFilters).forEach((key: string) => {\n            if (key == filterName) {\n              delete newFilters[key];\n            }\n          });\n          return newFilters;\n        });\n\n        return;\n      }\n\n      // An operator is specified, so we remove filters for that operator only\n      setParameterFilters((prev: any) => {\n        const filters = { ...prev };\n\n        const paramFilters = filters[filterName] || {};\n\n        if (paramFilters[operator] !== undefined) {\n          // Remove the specific operator filter\n          delete paramFilters[operator];\n        }\n\n        return {\n          ...filters,\n          [filterName]: paramFilters\n        };\n      });\n\n      table.refreshTable();\n    },\n    [setParameterFilters, table.refreshTable]\n  );\n\n  /**\n   * Add (or update) a filter for a specific parameter template.\n   * @param templateId - The ID of the parameter template to filter on.\n   * @param value - The value to filter by.\n   * @param operator - The operator to use for filtering (e.g., '=', '<', '>', etc.).\n   */\n  const addParameterFilter = useCallback(\n    (templateId: number, value: string, operator: string) => {\n      const filterName = `parameter_${templateId}`;\n\n      const filterValue = value?.toString().trim() ?? '';\n\n      if (filterValue.length > 0) {\n        setParameterFilters((prev: any) => {\n          const filters = { ...prev };\n          const paramFilters = filters[filterName] || {};\n\n          paramFilters[operator] = filterValue;\n\n          return {\n            ...filters,\n            [filterName]: paramFilters\n          };\n        });\n\n        table.refreshTable();\n      }\n    },\n    [setParameterFilters, clearParameterFilter, table.refreshTable]\n  );\n\n  // Construct the query filters for the table based on the parameter filters\n  const parametricQueryFilters = useMemo(() => {\n    const filters: Record<string, string> = {};\n\n    Object.keys(parameterFilters).forEach((key: string) => {\n      const paramFilters: any = parameterFilters[key];\n\n      Object.keys(paramFilters).forEach((operator: string) => {\n        const name = `${key}${PARAMETER_FILTER_OPERATORS[operator] || ''}`;\n        const value = paramFilters[operator];\n\n        filters[name] = value;\n      });\n    });\n\n    return filters;\n  }, [parameterFilters]);\n\n  const [selectedPart, setSelectedPart] = useState<number>(0);\n  const [selectedTemplate, setSelectedTemplate] = useState<number>(0);\n  const [selectedParameter, setSelectedParameter] = useState<number>(0);\n\n  const partParameterFields: ApiFormFieldSet = usePartParameterFields({\n    editTemplate: false\n  });\n\n  const addParameter = useCreateApiFormModal({\n    url: ApiEndpoints.part_parameter_list,\n    title: t`Add Part Parameter`,\n    fields: useMemo(() => ({ ...partParameterFields }), [partParameterFields]),\n    focus: 'data',\n    onFormSuccess: (parameter: any) => {\n      updateParameterRecord(selectedPart, parameter);\n    },\n    initialData: {\n      part: selectedPart,\n      template: selectedTemplate\n    }\n  });\n\n  const editParameter = useEditApiFormModal({\n    url: ApiEndpoints.part_parameter_list,\n    title: t`Edit Part Parameter`,\n    pk: selectedParameter,\n    fields: useMemo(() => ({ ...partParameterFields }), [partParameterFields]),\n    focus: 'data',\n    onFormSuccess: (parameter: any) => {\n      updateParameterRecord(selectedPart, parameter);\n    }\n  });\n\n  // Update a single parameter record in the table\n  const updateParameterRecord = useCallback(\n    (part: number, parameter: any) => {\n      const records = table.records;\n      const partIndex = records.findIndex((record: any) => record.pk == part);\n\n      if (partIndex < 0) {\n        // No matching part: reload the entire table\n        table.refreshTable();\n        return;\n      }\n\n      const parameterIndex = records[partIndex].parameters.findIndex(\n        (p: any) => p.pk == parameter.pk\n      );\n\n      if (parameterIndex < 0) {\n        // No matching parameter - append new parameter\n        records[partIndex].parameters.push(parameter);\n      } else {\n        records[partIndex].parameters[parameterIndex] = parameter;\n      }\n\n      table.updateRecord(records[partIndex]);\n    },\n    [table.records, table.updateRecord]\n  );\n\n  const parameterColumns: TableColumn[] = useMemo(() => {\n    const data = categoryParameters?.data || [];\n\n    return data.map((template: any) => {\n      let title = template.name;\n\n      if (template.units) {\n        title += ` [${template.units}]`;\n      }\n\n      const filters = parameterFilters[`parameter_${template.pk}`] || {};\n\n      return {\n        accessor: `parameter_${template.pk}`,\n        title: title,\n        sortable: true,\n        extra: {\n          template: template.pk\n        },\n        render: (record: any) => (\n          <ParameterCell\n            record={record}\n            template={template}\n            canEdit={user.hasChangeRole(UserRoles.part)}\n          />\n        ),\n        filtering: Object.keys(filters).length > 0,\n        filter: ({ close }: { close: () => void }) => {\n          return (\n            <ParameterFilter\n              template={template}\n              filters={parameterFilters[`parameter_${template.pk}`] || {}}\n              setFilter={addParameterFilter}\n              clearFilter={clearParameterFilter}\n              closeFilter={close}\n            />\n          );\n        }\n      };\n    });\n  }, [user, categoryParameters.data, parameterFilters]);\n\n  const onParameterClick = useCallback((template: number, part: any) => {\n    setSelectedTemplate(template);\n    setSelectedPart(part.pk);\n    const parameter = part.parameters?.find((p: any) => p.template == template);\n\n    if (parameter) {\n      setSelectedParameter(parameter.pk);\n      editParameter.open();\n    } else {\n      addParameter.open();\n    }\n  }, []);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'active',\n        label: t`Active`,\n        description: t`Show active parts`\n      },\n      {\n        name: 'locked',\n        label: t`Locked`,\n        description: t`Show locked parts`\n      },\n      {\n        name: 'assembly',\n        label: t`Assembly`,\n        description: t`Show assembly parts`\n      }\n    ];\n  }, []);\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    const partColumns: TableColumn[] = [\n      PartColumn({\n        part: '',\n        switchable: false\n      }),\n      DescriptionColumn({\n        defaultVisible: false\n      }),\n      {\n        accessor: 'IPN',\n        sortable: true,\n        defaultVisible: false\n      },\n      {\n        accessor: 'total_in_stock',\n        sortable: true\n      }\n    ];\n\n    return [...partColumns, ...parameterColumns];\n  }, [parameterColumns]);\n\n  return (\n    <>\n      {addParameter.modal}\n      {editParameter.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.part_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          enableDownload: true,\n          tableFilters: tableFilters,\n          params: {\n            category: categoryId,\n            cascade: true,\n            category_detail: true,\n            parameters: true,\n            ...parametricQueryFilters\n          },\n          onCellClick: ({ event, record, index, column, columnIndex }) => {\n            cancelEvent(event);\n\n            // Is this a \"parameter\" cell?\n            if (column?.accessor?.toString()?.startsWith('parameter_')) {\n              const col = column as any;\n              onParameterClick(col.extra.template, record);\n            } else if (record?.pk) {\n              // Navigate through to the part detail page\n              const url = getDetailUrl(ModelType.part, record.pk);\n              navigateToLink(url, navigate, event);\n            }\n          }\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Group, Tooltip } from '@mantine/core';\nimport { IconBell } from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { type RowAction, RowEditAction } from '@lib/components/RowActions';\nimport { YesNoButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { ActionDropdown } from '../../components/items/ActionDropdown';\nimport { ApiIcon } from '../../components/items/ApiIcon';\nimport { partCategoryFields } from '../../forms/PartForms';\nimport { InvenTreeIcon } from '../../functions/icons';\nimport {\n  useBulkEditApiFormModal,\n  useCreateApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { DescriptionColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\n/**\n * PartCategoryTable - Displays a table of part categories\n */\nexport function PartCategoryTable({ parentId }: Readonly<{ parentId?: any }>) {\n  const table = useTable('partcategory');\n  const user = useUserState();\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'name',\n        sortable: true,\n        switchable: false,\n        render: (record: any) => (\n          <Group gap='xs' wrap='nowrap' justify='space-between'>\n            <Group gap='xs' wrap='nowrap'>\n              {record.icon && <ApiIcon name={record.icon} />}\n              {record.name}\n            </Group>\n            <Group gap='xs' justify='flex-end' wrap='nowrap'>\n              {record.starred && (\n                <Tooltip\n                  label={t`You are subscribed to notifications for this category`}\n                >\n                  <IconBell color='green' size={16} />\n                </Tooltip>\n              )}\n            </Group>\n          </Group>\n        )\n      },\n      DescriptionColumn({}),\n      {\n        accessor: 'pathstring',\n        sortable: false\n      },\n      {\n        accessor: 'structural',\n        sortable: true,\n        defaultVisible: false,\n        render: (record: any) => {\n          return <YesNoButton value={record.structural} />;\n        }\n      },\n      {\n        accessor: 'part_count',\n        sortable: true\n      }\n    ];\n  }, []);\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'cascade',\n        label: t`Include Subcategories`,\n        description: t`Include subcategories in results`\n      },\n      {\n        name: 'structural',\n        label: t`Structural`,\n        description: t`Show structural categories`\n      },\n      {\n        name: 'starred',\n        label: t`Subscribed`,\n        description: t`Show categories to which the user is subscribed`\n      }\n    ];\n  }, []);\n\n  const newCategoryFields = partCategoryFields({ create: true });\n\n  const newCategory = useCreateApiFormModal({\n    url: ApiEndpoints.category_list,\n    title: t`New Part Category`,\n    fields: newCategoryFields,\n    focus: 'name',\n    initialData: {\n      parent: parentId\n    },\n    follow: true,\n    modelType: ModelType.partcategory,\n    table: table\n  });\n\n  const [selectedCategory, setSelectedCategory] = useState<number>(-1);\n\n  const editCategoryFields = partCategoryFields({ create: false });\n\n  const editCategory = useEditApiFormModal({\n    url: ApiEndpoints.category_list,\n    pk: selectedCategory,\n    title: t`Edit Part Category`,\n    fields: editCategoryFields,\n    onFormSuccess: (record: any) => table.updateRecord(record)\n  });\n\n  const setParent = useBulkEditApiFormModal({\n    url: ApiEndpoints.category_list,\n    items: table.selectedIds,\n    title: t`Set Parent Category`,\n    fields: {\n      parent: {}\n    },\n    onFormSuccess: table.refreshTable\n  });\n\n  const tableActions = useMemo(() => {\n    const can_add = user.hasAddRole(UserRoles.part_category);\n    const can_edit = user.hasChangeRole(UserRoles.part_category);\n\n    return [\n      <ActionDropdown\n        tooltip={t`Category Actions`}\n        icon={<InvenTreeIcon icon='category' />}\n        disabled={!table.hasSelectedRecords}\n        actions={[\n          {\n            name: t`Set Parent`,\n            icon: <InvenTreeIcon icon='category' />,\n            tooltip: t`Set parent category for the selected items`,\n            hidden: !can_edit,\n            disabled: !table.hasSelectedRecords,\n            onClick: () => {\n              setParent.open();\n            }\n          }\n        ]}\n      />,\n      <AddItemButton\n        key='add-part-category'\n        tooltip={t`Add Part Category`}\n        onClick={() => newCategory.open()}\n        hidden={!can_add}\n      />\n    ];\n  }, [user, table.hasSelectedRecords]);\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      const can_edit = user.hasChangeRole(UserRoles.part_category);\n\n      return [\n        RowEditAction({\n          hidden: !can_edit,\n          onClick: () => {\n            setSelectedCategory(record.pk);\n            editCategory.open();\n          }\n        })\n      ];\n    },\n    [user]\n  );\n\n  return (\n    <>\n      {newCategory.modal}\n      {editCategory.modal}\n      {setParent.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.category_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          enableDownload: true,\n          enableSelection: true,\n          params: {\n            parent: parentId,\n            top_level: parentId === undefined ? true : undefined\n          },\n          tableFilters: tableFilters,\n          tableActions: tableActions,\n          rowActions: rowActions,\n          modelType: ModelType.partcategory\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Group, LoadingOverlay, Skeleton, Stack, Text } from '@mantine/core';\nimport {\n  IconCategory,\n  IconInfoCircle,\n  IconListDetails,\n  IconPackages,\n  IconSitemap\n} from '@tabler/icons-react';\nimport { useMemo, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport AdminButton from '../../components/buttons/AdminButton';\nimport StarredToggleButton from '../../components/buttons/StarredToggleButton';\nimport {\n  type DetailsField,\n  DetailsTable\n} from '../../components/details/Details';\nimport { ItemDetailsGrid } from '../../components/details/ItemDetails';\nimport {\n  DeleteItemAction,\n  EditItemAction,\n  OptionsActionDropdown\n} from '../../components/items/ActionDropdown';\nimport { ApiIcon } from '../../components/items/ApiIcon';\nimport InstanceDetail from '../../components/nav/InstanceDetail';\nimport NavigationTree from '../../components/nav/NavigationTree';\nimport { PageDetail } from '../../components/nav/PageDetail';\nimport type { PanelType } from '../../components/panels/Panel';\nimport { PanelGroup } from '../../components/panels/PanelGroup';\nimport { partCategoryFields } from '../../forms/PartForms';\nimport {\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport { useUserState } from '../../states/UserState';\nimport ParametricPartTable from '../../tables/part/ParametricPartTable';\nimport { PartCategoryTable } from '../../tables/part/PartCategoryTable';\nimport { PartListTable } from '../../tables/part/PartTable';\nimport { StockItemTable } from '../../tables/stock/StockItemTable';\n\n/**\n * Detail view for a single PartCategory instance.\n *\n * Note: If no category ID is supplied, this acts as the top-level part category page\n */\nexport default function CategoryDetail() {\n  const { id: _id } = useParams();\n  const id = useMemo(\n    () => (!Number.isNaN(Number.parseInt(_id || '')) ? _id : undefined),\n    [_id]\n  );\n\n  const navigate = useNavigate();\n  const user = useUserState();\n\n  const [treeOpen, setTreeOpen] = useState(false);\n\n  const {\n    instance: category,\n    refreshInstance,\n    instanceQuery\n  } = useInstance({\n    endpoint: ApiEndpoints.category_list,\n    hasPrimaryKey: true,\n    pk: id,\n    params: {\n      path_detail: true\n    }\n  });\n\n  const detailsPanel = useMemo(() => {\n    if (id && instanceQuery.isFetching) {\n      return <Skeleton />;\n    }\n\n    const left: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'name',\n        label: t`Name`,\n        copy: true,\n        value_formatter: () => (\n          <Group gap='xs'>\n            {category.icon && <ApiIcon name={category.icon} />}\n            {category.name}\n          </Group>\n        )\n      },\n      {\n        type: 'text',\n        name: 'pathstring',\n        label: t`Path`,\n        icon: 'sitemap',\n        copy: true,\n        hidden: !id\n      },\n      {\n        type: 'text',\n        name: 'description',\n        label: t`Description`,\n        copy: true\n      },\n      {\n        type: 'link',\n        name: 'parent',\n        model_field: 'name',\n        icon: 'location',\n        label: t`Parent Category`,\n        model: ModelType.partcategory,\n        hidden: !category?.parent\n      },\n      {\n        type: 'boolean',\n        name: 'starred',\n        icon: 'notification',\n        label: t`Subscribed`\n      }\n    ];\n\n    const right: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'part_count',\n        label: t`Parts`,\n        icon: 'part',\n        value_formatter: () => category?.part_count || '0'\n      },\n      {\n        type: 'text',\n        name: 'subcategories',\n        label: t`Subcategories`,\n        icon: 'sitemap',\n        hidden: !category?.subcategories\n      },\n      {\n        type: 'boolean',\n        name: 'structural',\n        label: t`Structural`,\n        icon: 'sitemap'\n      },\n      {\n        type: 'link',\n        name: 'parent_default_location',\n        label: t`Parent default location`,\n        model: ModelType.stocklocation,\n        hidden: !category.parent_default_location || category.default_location\n      },\n      {\n        type: 'link',\n        name: 'default_location',\n        label: t`Default location`,\n        model: ModelType.stocklocation,\n        hidden: !category.default_location\n      }\n    ];\n\n    return (\n      <ItemDetailsGrid>\n        {id && category?.pk ? (\n          <DetailsTable item={category} fields={left} />\n        ) : (\n          <Text>{t`Top level part category`}</Text>\n        )}\n        {id && category?.pk && <DetailsTable item={category} fields={right} />}\n      </ItemDetailsGrid>\n    );\n  }, [category, instanceQuery]);\n\n  const editCategory = useEditApiFormModal({\n    url: ApiEndpoints.category_list,\n    pk: id,\n    title: t`Edit Part Category`,\n    fields: partCategoryFields({}),\n    onFormSuccess: refreshInstance\n  });\n\n  const deleteOptions = useMemo(() => {\n    return [\n      {\n        value: 0,\n        display_name: t`Move items to parent category`\n      },\n      {\n        value: 1,\n        display_name: t`Delete items`\n      }\n    ];\n  }, []);\n\n  const deleteCategory = useDeleteApiFormModal({\n    url: ApiEndpoints.category_list,\n    pk: id,\n    title: t`Delete Part Category`,\n    fields: {\n      delete_parts: {\n        label: t`Parts Action`,\n        description: t`Action for parts in this category`,\n        choices: deleteOptions,\n        field_type: 'choice'\n      },\n      delete_child_categories: {\n        label: t`Child Categories Action`,\n        description: t`Action for child categories in this category`,\n        choices: deleteOptions,\n        field_type: 'choice'\n      }\n    },\n    onFormSuccess: () => {\n      if (category.parent) {\n        navigate(getDetailUrl(ModelType.partcategory, category.parent));\n      } else {\n        navigate('/part/');\n      }\n    }\n  });\n\n  const categoryActions = useMemo(() => {\n    return [\n      <AdminButton\n        key='admin'\n        model={ModelType.partcategory}\n        id={category.pk}\n      />,\n      <StarredToggleButton\n        key='starred_change'\n        instance={category}\n        model={ModelType.partcategory}\n        successFunction={() => {\n          refreshInstance();\n        }}\n      />,\n      <OptionsActionDropdown\n        key='category-actions'\n        tooltip={t`Category Actions`}\n        actions={[\n          EditItemAction({\n            hidden: !id || !user.hasChangeRole(UserRoles.part_category),\n            tooltip: t`Edit Part Category`,\n            onClick: () => editCategory.open()\n          }),\n          DeleteItemAction({\n            hidden: !id || !user.hasDeleteRole(UserRoles.part_category),\n            tooltip: t`Delete Part Category`,\n            onClick: () => deleteCategory.open()\n          })\n        ]}\n      />\n    ];\n  }, [id, user, category.pk, category.starred]);\n\n  const panels: PanelType[] = useMemo(\n    () => [\n      {\n        name: 'details',\n        label: t`Category Details`,\n        icon: <IconInfoCircle />,\n        content: detailsPanel\n      },\n      {\n        name: 'subcategories',\n        label: id ? t`Subcategories` : t`Part Categories`,\n        icon: <IconSitemap />,\n        content: <PartCategoryTable parentId={id} />\n      },\n      {\n        name: 'parts',\n        label: t`Parts`,\n        icon: <IconCategory />,\n        content: (\n          <PartListTable\n            props={{\n              params: {\n                category: id\n              }\n            }}\n          />\n        )\n      },\n      {\n        name: 'stockitem',\n        label: t`Stock Items`,\n        icon: <IconPackages />,\n        hidden: !id,\n        content: (\n          <StockItemTable\n            params={{\n              category: id\n            }}\n            allowAdd={false}\n            tableName='category-stockitems'\n          />\n        )\n      },\n      {\n        name: 'parameters',\n        label: t`Part Parameters`,\n        icon: <IconListDetails />,\n        content: <ParametricPartTable categoryId={id} />\n      }\n    ],\n    [category, id]\n  );\n\n  const breadcrumbs = useMemo(\n    () => [\n      { name: t`Parts`, url: '/part' },\n      ...(category.path ?? []).map((c: any) => ({\n        name: c.name,\n        url: getDetailUrl(ModelType.partcategory, c.pk),\n        icon: c.icon ? <ApiIcon name={c.icon} /> : undefined\n      }))\n    ],\n    [category]\n  );\n\n  return (\n    <>\n      {editCategory.modal}\n      {deleteCategory.modal}\n      <InstanceDetail\n        query={instanceQuery}\n        requiredRole={UserRoles.part_category}\n      >\n        <Stack gap='xs'>\n          <LoadingOverlay visible={instanceQuery.isFetching} />\n          <NavigationTree\n            modelType={ModelType.partcategory}\n            title={t`Part Categories`}\n            endpoint={ApiEndpoints.category_tree}\n            opened={treeOpen}\n            onClose={() => {\n              setTreeOpen(false);\n            }}\n            selectedId={category?.pk}\n          />\n          <PageDetail\n            title={(category?.name ?? id) ? t`Part Category` : t`Parts`}\n            subtitle={category?.description}\n            icon={category?.icon && <ApiIcon name={category?.icon} />}\n            breadcrumbs={breadcrumbs}\n            breadcrumbAction={() => {\n              setTreeOpen(true);\n            }}\n            actions={categoryActions}\n            editAction={editCategory.open}\n            editEnabled={\n              !!category?.pk && user.hasChangePermission(ModelType.partcategory)\n            }\n          />\n          <PanelGroup\n            pageKey='partcategory'\n            panels={panels}\n            model={ModelType.partcategory}\n            instance={category}\n            reloadInstance={refreshInstance}\n            id={category.pk ?? null}\n          />\n        </Stack>\n      </InstanceDetail>\n    </>\n  );\n}\n"],"names":["PARAMETER_FILTER_OPERATORS","BooleanParameterFilter","props","filterValue","useMemo","filters","jsx","Select","template","name","value","label","_i18n","_","id","clearFilter","pk","closeFilter","val","setFilter","ChoiceParameterFilter","choices","split","map","choice","trim","GenericFilterRow","operator","readonly","placeholder","units","op","setOp","useState","useEffect","jsxs","Group","e","stopPropagation","width","event","Object","keys","TextInput","key","currentTarget","Input","GenericParameterFilter","Stack","Divider","ParameterFilter","checkbox","ParameterCell","record","canEdit","hovered","ref","useHover","parameter","parameters","find","p","extra","v","data","undefined","YesNoButton","data_numeric","numeric","formatDecimal","digits","push","TableHoverCard","ParametricPartTable","categoryId","api","useApi","table","useTable","user","useUserState","navigate","useNavigate","categoryParameters","useQuery","queryKey","queryFn","get","apiUrl","ApiEndpoints","part_parameter_template_list","params","category","then","response","refetchOnMount","parameterFilters","setParameterFilters","clearParameterFilter","useCallback","templateId","filterName","prev","newFilters","forEach","paramFilters","refreshTable","addParameterFilter","toString","length","parametricQueryFilters","selectedPart","setSelectedPart","selectedTemplate","setSelectedTemplate","selectedParameter","setSelectedParameter","partParameterFields","usePartParameterFields","editTemplate","addParameter","useCreateApiFormModal","url","part_parameter_list","title","fields","focus","onFormSuccess","updateParameterRecord","initialData","part","editParameter","useEditApiFormModal","records","partIndex","findIndex","parameterIndex","updateRecord","parameterColumns","accessor","sortable","render","hasChangeRole","UserRoles","filtering","filter","close","onParameterClick","open","tableFilters","description","tableColumns","PartColumn","switchable","DescriptionColumn","defaultVisible","Fragment","modal","InvenTreeTable","part_list","enableDownload","cascade","category_detail","onCellClick","index","column","columnIndex","cancelEvent","startsWith","getDetailUrl","ModelType","navigateToLink","PartCategoryTable","parentId","icon","ApiIcon","starred","Tooltip","IconBell","structural","newCategoryFields","partCategoryFields","create","newCategory","category_list","parent","follow","modelType","partcategory","selectedCategory","setSelectedCategory","editCategoryFields","editCategory","setParent","useBulkEditApiFormModal","items","selectedIds","tableActions","can_add","hasAddRole","part_category","can_edit","ActionDropdown","InvenTreeIcon","hasSelectedRecords","tooltip","hidden","disabled","onClick","AddItemButton","rowActions","RowEditAction","enableSelection","top_level","CategoryDetail","_id","useParams","Number","isNaN","parseInt","treeOpen","setTreeOpen","instance","refreshInstance","instanceQuery","useInstance","endpoint","hasPrimaryKey","path_detail","detailsPanel","isFetching","Skeleton","left","type","copy","value_formatter","model_field","model","right","part_count","subcategories","stocklocation","parent_default_location","default_location","ItemDetailsGrid","DetailsTable","Text","deleteOptions","display_name","deleteCategory","useDeleteApiFormModal","delete_parts","field_type","delete_child_categories","categoryActions","AdminButton","StarredToggleButton","OptionsActionDropdown","EditItemAction","DeleteItemAction","hasDeleteRole","panels","IconInfoCircle","content","IconSitemap","IconCategory","PartListTable","IconPackages","StockItemTable","IconListDetails","breadcrumbs","path","c","InstanceDetail","LoadingOverlay","NavigationTree","category_tree","PageDetail","hasChangePermission","PanelGroup"],"mappings":"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"}