{"version":3,"file":"PluginSource-CHMSfDB-.js","sources":["../../../../../../frontend/lib/types/Plugins.tsx","../../../../../../frontend/src/components/plugins/PluginContext.tsx","../../../../../../frontend/src/components/plugins/PluginSource.tsx"],"sourcesContent":["import type { I18n } from '@lingui/core';\nimport type { MantineColorScheme, MantineTheme } from '@mantine/core';\nimport type { QueryClient } from '@tanstack/react-query';\nimport type { AxiosInstance } from 'axios';\nimport type { NavigateFunction } from 'react-router-dom';\nimport type { ModelDict } from '../enums/ModelInformation';\nimport type { ModelType } from '../enums/ModelType';\nimport type { ApiFormModalProps, BulkEditApiFormModalProps } from './Forms';\nimport type { UseModalReturn } from './Modals';\nimport type { RenderInstanceProps } from './Rendering';\nimport type { SettingsStateProps } from './Settings';\nimport type { UserStateProps } from './User';\n\nexport interface PluginProps {\n  name: string;\n  slug: string;\n  version: null | string;\n}\n\nexport interface PluginVersion {\n  inventree: string;\n  react: string;\n  reactDom: string;\n  mantine: string;\n}\n\nexport type InvenTreeFormsContext = {\n  bulkEdit: (props: BulkEditApiFormModalProps) => UseModalReturn;\n  create: (props: ApiFormModalProps) => UseModalReturn;\n  delete: (props: ApiFormModalProps) => UseModalReturn;\n  edit: (props: ApiFormModalProps) => UseModalReturn;\n};\n\n/**\n * A set of properties which are passed to a plugin,\n * for rendering an element in the user interface.\n *\n * @param version - The version of the running InvenTree software stack\n * @param api - The Axios API instance (see ../states/ApiState.tsx)\n * @param user - The current user instance (see ../states/UserState.tsx)\n * @param userSettings - The current user settings (see ../states/SettingsState.tsx)\n * @param globalSettings - The global settings (see ../states/SettingsState.tsx)\n * @param navigate - The navigation function (see react-router-dom)\n * @param theme - The current Mantine theme\n * @param colorScheme - The current Mantine color scheme (e.g. 'light' / 'dark')\n * @param host - The current host URL\n * @param i18n - The i18n instance for translations (from @lingui/core)\n * @param locale - The current locale string (e.g. 'en' / 'de')\n * @param model - The model type associated with the rendered component (if applicable)\n * @param modelInformation - A dictionary of available model information\n * @param renderInstance - A component function for rendering a model instance\n * @param id - The ID (primary key) of the model instance for the plugin (if applicable)\n * @param instance - The model instance data (if available)\n * @param reloadContent - A function which can be called to reload the plugin content\n * @param reloadInstance - A function which can be called to reload the model instance\n * @param context - Any additional context data which may be passed to the plugin\n */\nexport type InvenTreePluginContext = {\n  version: PluginVersion;\n  api: AxiosInstance;\n  queryClient: QueryClient;\n  user: UserStateProps;\n  userSettings: SettingsStateProps;\n  globalSettings: SettingsStateProps;\n  modelInformation: ModelDict;\n  renderInstance: (props: Readonly<RenderInstanceProps>) => React.ReactNode;\n  host: string;\n  i18n: I18n;\n  locale: string;\n  navigate: NavigateFunction;\n  theme: MantineTheme;\n  forms: InvenTreeFormsContext;\n  colorScheme: MantineColorScheme;\n  model?: ModelType | string;\n  id?: string | number | null;\n  instance?: any;\n  reloadContent?: () => void;\n  reloadInstance?: () => void;\n  context?: any;\n};\n\n/*\n * The version of the InvenTree plugin context interface.\n * This number should be incremented if the interface changes.\n */\n\n// @ts-ignore\nexport const INVENTREE_PLUGIN_VERSION: string = __INVENTREE_LIB_VERSION__;\n// @ts-ignore\nexport const INVENTREE_REACT_VERSION: string = __INVENTREE_REACT_VERSION__;\n// @ts-ignore\nexport const INVENTREE_REACT_DOM_VERSION: string =\n  // @ts-ignore\n  __INVENTREE_REACT_DOM_VERSION__;\n// @ts-ignore\nexport const INVENTREE_MANTINE_VERSION: string = __INVENTREE_MANTINE_VERSION__;\n","import { useMantineColorScheme, useMantineTheme } from '@mantine/core';\nimport { useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useShallow } from 'zustand/react/shallow';\nimport { api, queryClient } from '../../App';\nimport { useLocalState } from '../../states/LocalState';\nimport {\n  useGlobalSettingsState,\n  useUserSettingsState\n} from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\n\nimport { ModelInformationDict } from '@lib/enums/ModelInformation';\nimport {\n  INVENTREE_MANTINE_VERSION,\n  INVENTREE_PLUGIN_VERSION,\n  INVENTREE_REACT_VERSION,\n  type InvenTreePluginContext\n} from '@lib/types/Plugins';\nimport { i18n } from '@lingui/core';\nimport {\n  useBulkEditApiFormModal,\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { RenderInstance } from '../render/Instance';\n\nexport const useInvenTreeContext = () => {\n  const [locale, host] = useLocalState(useShallow((s) => [s.language, s.host]));\n  const navigate = useNavigate();\n  const user = useUserState();\n  const { colorScheme } = useMantineColorScheme();\n  const theme = useMantineTheme();\n  const globalSettings = useGlobalSettingsState();\n  const userSettings = useUserSettingsState();\n\n  const contextData = useMemo<InvenTreePluginContext>(() => {\n    return {\n      version: {\n        inventree: INVENTREE_PLUGIN_VERSION,\n        react: INVENTREE_REACT_VERSION,\n        reactDom: INVENTREE_REACT_VERSION,\n        mantine: INVENTREE_MANTINE_VERSION\n      },\n      user: user,\n      host: host,\n      i18n: i18n,\n      locale: locale,\n      api: api,\n      queryClient: queryClient,\n      navigate: navigate,\n      globalSettings: globalSettings,\n      userSettings: userSettings,\n      modelInformation: ModelInformationDict,\n      renderInstance: RenderInstance,\n      theme: theme,\n      colorScheme: colorScheme,\n      forms: {\n        bulkEdit: useBulkEditApiFormModal,\n        create: useCreateApiFormModal,\n        delete: useDeleteApiFormModal,\n        edit: useEditApiFormModal\n      }\n    };\n  }, [\n    user,\n    host,\n    api,\n    locale,\n    queryClient,\n    navigate,\n    globalSettings,\n    userSettings,\n    theme,\n    colorScheme\n  ]);\n\n  return contextData;\n};\n","import { generateUrl } from '../../functions/urls';\nimport { useLocalState } from '../../states/LocalState';\n\n/*\n * Load an external plugin source from a URL.\n */\nexport async function loadExternalPluginSource(source: string) {\n  source = source.trim();\n\n  // If no source is provided, clear the plugin content\n  if (!source) {\n    return null;\n  }\n\n  const url = generateUrl(source);\n\n  const module = await import(/* @vite-ignore */ url)\n    .catch((error) => {\n      console.error(`ERR: Failed to load plugin from ${url}:`, error);\n      return null;\n    })\n    .then((module) => {\n      return module;\n    });\n\n  return module;\n}\n\n/*\n * Find a named function in an external plugin source.\n */\nexport async function findExternalPluginFunction(\n  source: string,\n  functionName: string\n): Promise<Function | null> {\n  const { getHost } = useLocalState.getState();\n\n  // Extract pathstring from the source URL\n  // Use the specified host unless the source is already a full URL\n  const url = new URL(source, getHost());\n\n  // If the pathname contains a ':' character, it indicates a function name\n  // but we need to remove it for the URL lookup to work correctly\n  if (url.pathname.includes(':')) {\n    const parts = url.pathname.split(':');\n    source = parts[0]; // Use the first part as the source URL\n    functionName = parts[1] || functionName; // Use the second part as the\n    url.pathname = source; // Update the pathname to the source URL\n  }\n\n  const module = await loadExternalPluginSource(url.toString());\n\n  if (module?.[functionName]) {\n    return module[functionName];\n  }\n\n  return null;\n}\n"],"names":["INVENTREE_PLUGIN_VERSION","__INVENTREE_LIB_VERSION__","INVENTREE_REACT_VERSION","__INVENTREE_REACT_VERSION__","INVENTREE_MANTINE_VERSION","__INVENTREE_MANTINE_VERSION__","useInvenTreeContext","locale","host","useLocalState","useShallow","s","language","navigate","useNavigate","user","useUserState","colorScheme","useMantineColorScheme","theme","useMantineTheme","globalSettings","useGlobalSettingsState","userSettings","useUserSettingsState","useMemo","version","inventree","react","reactDom","mantine","i18n","api","queryClient","modelInformation","ModelInformationDict","renderInstance","RenderInstance","forms","bulkEdit","useBulkEditApiFormModal","create","useCreateApiFormModal","delete","useDeleteApiFormModal","edit","useEditApiFormModal","loadExternalPluginSource","source","trim","url","generateUrl","catch","error","console","then","module","findExternalPluginFunction","functionName","getHost","getState","URL","pathname","includes","parts","split","toString"],"mappings":"2QAuFO,MAAMA,EAAmCC,QAEnCC,EAAkCC,SAMlCC,EAAoCC,QCnEpCC,EAAsBA,IAAM,CACvC,KAAM,CAACC,EAAQC,CAAI,EAAIC,EAAcC,EAAYC,GAAM,CAACA,EAAEC,SAAUD,EAAEH,IAAI,CAAC,CAAC,EACtEK,EAAWC,EAAAA,EACXC,EAAOC,EAAAA,EACP,CAAEC,YAAAA,CAAAA,EAAgBC,EAAAA,EAClBC,EAAQC,EAAAA,EACRC,EAAiBC,EAAAA,EACjBC,EAAeC,EAAAA,EA2CrB,OAzCoBC,EAAAA,QAAgC,KAC3C,CACLC,QAAS,CACPC,UAAW3B,EACX4B,MAAO1B,EACP2B,SAAU3B,EACV4B,QAAS1B,CAAAA,EAEXW,KAAAA,EACAP,KAAAA,EACAuB,KAAAA,EACAxB,OAAAA,EACAyB,IAAAA,EACAC,YAAAA,EACApB,SAAAA,EACAQ,eAAAA,EACAE,aAAAA,EACAW,iBAAkBC,EAClBC,eAAgBC,EAChBlB,MAAAA,EACAF,YAAAA,EACAqB,MAAO,CACLC,SAAUC,EACVC,OAAQC,EACRC,OAAQC,EACRC,KAAMC,CAAAA,CACR,GAED,CACD/B,EACAP,EACAwB,EACAzB,EACA0B,EACApB,EACAQ,EACAE,EACAJ,EACAF,CAAW,CACZ,CAGH,ECzEA,eAAsB8B,EAAyBC,EAAgB,CAI7D,GAHAA,EAASA,EAAOC,KAAAA,EAGZ,CAACD,EACH,OAAO,KAGT,MAAME,EAAMC,EAAYH,CAAM,EAW9B,OATe,MAAM,OAA0BE,GAC5CE,MAAOC,IACNC,QAAQD,MAAM,mCAAmCH,CAAG,IAAKG,CAAK,EACvD,KACR,EACAE,KAAMC,GACEA,CACR,CAGL,CAKA,eAAsBC,EACpBT,EACAU,EAC0B,CAC1B,KAAM,CAAEC,QAAAA,CAAAA,EAAYlD,EAAcmD,SAAAA,EAI5BV,EAAM,IAAIW,IAAIb,EAAQW,GAAS,EAIrC,GAAIT,EAAIY,SAASC,SAAS,GAAG,EAAG,CAC9B,MAAMC,EAAQd,EAAIY,SAASG,MAAM,GAAG,EACpCjB,EAASgB,EAAM,CAAC,EAChBN,EAAeM,EAAM,CAAC,GAAKN,EAC3BR,EAAIY,SAAWd,CACjB,CAEA,MAAMQ,EAAS,MAAMT,EAAyBG,EAAIgB,UAAU,EAE5D,OAAIV,GAAAA,MAAAA,EAASE,GACJF,EAAOE,CAAY,EAGrB,IACT"}