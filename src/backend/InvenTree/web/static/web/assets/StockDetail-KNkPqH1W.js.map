{"version":3,"file":"StockDetail-KNkPqH1W.js","sources":["../../../../../../frontend/src/tables/stock/InstalledItemsTable.tsx","../../../../../../frontend/src/tables/stock/StockItemTestResultTable.tsx","../../../../../../frontend/src/tables/stock/StockTrackingTable.tsx","../../../../../../frontend/src/pages/stock/StockDetail.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Skeleton } from '@mantine/core';\nimport { IconUnlink } from '@tabler/icons-react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { formatDecimal } from '@lib/functions/Formatting';\nimport type { TableColumn } from '@lib/types/Tables';\nimport {\n  useStockItemInstallFields,\n  useStockItemUninstallFields\n} from '../../forms/StockForms';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { PartColumn, StatusColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\nexport default function InstalledItemsTable({\n  stockItem\n}: Readonly<{\n  stockItem: any;\n}>) {\n  const table = useTable('stock_item_install');\n  const user = useUserState();\n\n  const installItemFields = useStockItemInstallFields({\n    stockItem: stockItem\n  });\n\n  const installItem = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.stock_install),\n    pk: stockItem.pk,\n    title: t`Install Item`,\n    table: table,\n    successMessage: t`Item installed`,\n    fields: installItemFields\n  });\n\n  const [selectedRecord, setSelectedRecord] = useState<any>({});\n\n  const uninstallItemFields = useStockItemUninstallFields();\n\n  const uninstallItem = useCreateApiFormModal({\n    url: apiUrl(ApiEndpoints.stock_uninstall),\n    pk: selectedRecord.pk,\n    title: t`Uninstall Item`,\n    table: table,\n    successMessage: t`Item uninstalled`,\n    fields: uninstallItemFields,\n    initialData: {\n      location: stockItem.location ?? stockItem.part_detail?.default_location\n    }\n  });\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      PartColumn({\n        part: 'part_detail'\n      }),\n      {\n        accessor: 'quantity',\n        switchable: false,\n        render: (record: any) => {\n          let text = formatDecimal(record.quantity);\n\n          if (record.serial && record.quantity == 1) {\n            text = `# ${record.serial}`;\n          }\n\n          return text;\n        }\n      },\n      {\n        accessor: 'batch',\n        switchable: false\n      },\n      StatusColumn({ model: ModelType.stockitem })\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='install'\n        tooltip={t`Install Item`}\n        onClick={() => {\n          installItem.open();\n        }}\n        hidden={\n          !user.hasChangeRole(UserRoles.stock) ||\n          stockItem.is_building ||\n          stockItem.part_detail?.assembly != true\n        }\n      />\n    ];\n  }, [stockItem, user]);\n\n  const rowActions = useCallback(\n    (record: any) => {\n      return [\n        {\n          title: t`Uninstall`,\n          tooltip: t`Uninstall stock item`,\n          onClick: () => {\n            setSelectedRecord(record);\n            uninstallItem.open();\n          },\n          icon: <IconUnlink />,\n          hidden: !user.hasChangeRole(UserRoles.stock)\n        }\n      ];\n    },\n    [user]\n  );\n\n  return (\n    <>\n      {installItem.modal}\n      {uninstallItem.modal}\n      {stockItem.pk ? (\n        <InvenTreeTable\n          url={apiUrl(ApiEndpoints.stock_item_list)}\n          tableState={table}\n          columns={tableColumns}\n          props={{\n            tableActions: tableActions,\n            enableSelection: true,\n            enableLabels: true,\n            enableReports: true,\n            rowActions: rowActions,\n            modelType: ModelType.stockitem,\n            params: {\n              belongs_to: stockItem.pk,\n              part_detail: true\n            }\n          }}\n        />\n      ) : (\n        <Skeleton />\n      )}\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Badge, Group, Text, Tooltip } from '@mantine/core';\nimport { showNotification } from '@mantine/notifications';\nimport {\n  IconCircleCheck,\n  IconCirclePlus,\n  IconInfoCircle\n} from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { DataTable, type DataTableRowExpansionProps } from 'mantine-datatable';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport {\n  type RowAction,\n  RowActions,\n  RowDeleteAction,\n  RowEditAction\n} from '@lib/components/RowActions';\nimport { PassFailButton } from '@lib/components/YesNoButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { ApiFormFieldSet } from '@lib/types/Forms';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { AttachmentLink } from '../../components/items/AttachmentLink';\nimport { RenderUser } from '../../components/render/User';\nimport { useApi } from '../../contexts/ApiContext';\nimport { formatDate } from '../../defaults/formatters';\nimport { useTestResultFields } from '../../forms/StockForms';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useTable } from '../../hooks/UseTable';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport { DateColumn, DescriptionColumn, NoteColumn } from '../ColumnRenderers';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport RowExpansionIcon from '../RowExpansionIcon';\n\nexport default function StockItemTestResultTable({\n  partId,\n  itemId\n}: Readonly<{\n  partId: number;\n  itemId: number;\n}>) {\n  const api = useApi();\n  const user = useUserState();\n  const table = useTable('stocktests');\n\n  const globalSettings = useGlobalSettingsState();\n  const includeTestStation = useMemo(\n    () => globalSettings.isSet('TEST_STATION_DATA'),\n    [globalSettings]\n  );\n  // Fetch the test templates required for this stock item\n  const { data: testTemplates } = useQuery({\n    queryKey: ['stocktesttemplates', partId, itemId],\n    queryFn: async () => {\n      if (!partId) {\n        return [];\n      }\n\n      return api\n        .get(apiUrl(ApiEndpoints.part_test_template_list), {\n          params: {\n            part: partId,\n            include_inherited: true,\n            enabled: true\n          }\n        })\n        .then((response) => response.data);\n    }\n  });\n\n  useEffect(() => {\n    table.refreshTable();\n  }, [testTemplates]);\n\n  // Format the test results based on the returned data\n  const formatRecords = useCallback(\n    (records: any[]): any[] => {\n      // Construct a list of test templates\n      const results =\n        testTemplates?.map((template: any) => {\n          return {\n            ...template,\n            templateId: template.pk,\n            results: []\n          };\n        }) ?? [];\n\n      // If any of the tests results point to templates which we do not have, add them in\n      records.forEach((record) => {\n        if (!results.find((r: any) => r.templateId == record.template)) {\n          results.push({\n            ...record.template_detail,\n            templateId: record.template,\n            results: []\n          });\n        }\n      });\n\n      // Iterate through the returned records\n      // Note that the results are sorted by oldest first,\n      // to ensure that the most recent result is displayed \"on top\"\n      records\n        .sort((a: any, b: any) => {\n          return a.pk > b.pk ? 1 : -1;\n        })\n        .forEach((record) => {\n          // Find matching template\n          const idx = results.findIndex(\n            (r: any) => r.templateId == record.template\n          );\n          if (idx >= 0) {\n            results[idx] = {\n              ...results[idx],\n              ...record\n            };\n\n            results[idx].results.push(record);\n          }\n        });\n\n      return results;\n    },\n    [partId, itemId, testTemplates]\n  );\n\n  const constructTableColumns = useCallback(\n    (child: boolean) => {\n      return [\n        {\n          accessor: 'test',\n          title: t`Test`,\n          switchable: false,\n          sortable: true,\n          render: (record: any) => {\n            const enabled = record.enabled ?? record.template_detail?.enabled;\n            const installed =\n              record.stock_item != undefined && record.stock_item != itemId;\n\n            const multipleResults = record.results && record.results.length > 1;\n\n            return (\n              <Group justify='space-between' wrap='nowrap'>\n                {!child && (\n                  <RowExpansionIcon\n                    enabled={multipleResults}\n                    expanded={table.isRowExpanded(record.pk)}\n                  />\n                )}\n                <Text\n                  style={{ fontStyle: installed ? 'italic' : undefined }}\n                  c={enabled ? undefined : 'red'}\n                >\n                  {!record.templateId && '- '}\n                  {record.test_name ?? record.template_detail?.test_name}\n                </Text>\n                <Group justify='right'>\n                  {record.results && record.results.length > 1 && (\n                    <Tooltip label={t`Test Results`}>\n                      <Badge color='lightblue' variant='filled'>\n                        {record.results.length}\n                      </Badge>\n                    </Tooltip>\n                  )}\n                  {installed && (\n                    <Tooltip label={t`Test result for installed stock item`}>\n                      <IconInfoCircle size={16} color='blue' />\n                    </Tooltip>\n                  )}\n                </Group>\n              </Group>\n            );\n          }\n        },\n        {\n          accessor: 'result',\n          title: t`Result`,\n          switchable: false,\n          sortable: true,\n          render: (record: any) => {\n            if (record.result === undefined) {\n              return (\n                <Badge color='lightblue' variant='filled'>{t`No Result`}</Badge>\n              );\n            } else {\n              return <PassFailButton value={record.result} />;\n            }\n          }\n        },\n        DescriptionColumn({}),\n        {\n          accessor: 'value',\n          title: t`Value`\n        },\n        {\n          accessor: 'attachment',\n          title: t`Attachment`,\n          render: (record: any) =>\n            record.attachment && (\n              <AttachmentLink attachment={record.attachment} />\n            ),\n          noContext: true\n        },\n        NoteColumn({}),\n        DateColumn({}),\n        {\n          accessor: 'user',\n          title: t`User`,\n          sortable: false,\n          render: (record: any) =>\n            record.user_detail && <RenderUser instance={record.user_detail} />\n        },\n        {\n          accessor: 'test_station',\n          sortable: true,\n          title: t`Test station`,\n          hidden: !includeTestStation\n        },\n        {\n          accessor: 'started_datetime',\n          sortable: true,\n          title: t`Started`,\n          hidden: !includeTestStation,\n          render: (record: any) => {\n            return (\n              <Group justify='space-between'>\n                {formatDate(record.started_datetime, {\n                  showTime: true,\n                  showSeconds: true\n                })}\n              </Group>\n            );\n          }\n        },\n        {\n          accessor: 'finished_datetime',\n          sortable: true,\n          title: t`Finished`,\n          hidden: !includeTestStation,\n          render: (record: any) => {\n            return (\n              <Group justify='space-between'>\n                {formatDate(record.finished_datetime, {\n                  showTime: true,\n                  showSeconds: true\n                })}\n              </Group>\n            );\n          }\n        }\n      ];\n    },\n    [itemId, includeTestStation, table.expandedRecords]\n  );\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return constructTableColumns(false);\n  }, [itemId, includeTestStation, table.expandedRecords]);\n\n  const [selectedTemplate, setSelectedTemplate] = useState<number | undefined>(\n    undefined\n  );\n\n  const newResultFields: ApiFormFieldSet = useTestResultFields({\n    partId: partId,\n    itemId: itemId,\n    templateId: selectedTemplate,\n    editing: false\n  });\n\n  const editResultFields: ApiFormFieldSet = useTestResultFields({\n    partId: partId,\n    itemId: itemId,\n    templateId: selectedTemplate,\n    editing: true\n  });\n\n  const newTestModal = useCreateApiFormModal({\n    url: ApiEndpoints.stock_test_result_list,\n    fields: useMemo(() => ({ ...newResultFields }), [newResultFields]),\n    initialData: {\n      template: selectedTemplate,\n      result: true\n    },\n    title: t`Add Test Result`,\n    table: table,\n    successMessage: t`Test result added`\n  });\n\n  const [selectedTest, setSelectedTest] = useState<number>(0);\n\n  const editTestModal = useEditApiFormModal({\n    url: ApiEndpoints.stock_test_result_list,\n    pk: selectedTest,\n    fields: useMemo(() => ({ ...editResultFields }), [editResultFields]),\n    title: t`Edit Test Result`,\n    onFormSuccess: () => table.refreshTable,\n    successMessage: t`Test result updated`\n  });\n\n  const deleteTestModal = useDeleteApiFormModal({\n    url: ApiEndpoints.stock_test_result_list,\n    pk: selectedTest,\n    title: t`Delete Test Result`,\n    table: table,\n    successMessage: t`Test result deleted`\n  });\n\n  const passTest = useCallback(\n    (templateId: number) => {\n      api\n        .post(apiUrl(ApiEndpoints.stock_test_result_list), {\n          template: templateId,\n          stock_item: itemId,\n          result: true\n        })\n        .then(() => {\n          table.refreshTable();\n          showNotification({\n            title: t`Test Passed`,\n            message: t`Test result has been recorded`,\n            color: 'green'\n          });\n        })\n        .catch(() => {\n          showNotification({\n            title: t`Error`,\n            message: t`Failed to record test result`,\n            color: 'red'\n          });\n        });\n    },\n    [itemId]\n  );\n\n  const rowActions = useCallback(\n    (record: any): RowAction[] => {\n      if (record.stock_item != undefined && record.stock_item != itemId) {\n        // Test results for other stock items cannot be edited\n        return [];\n      }\n\n      return [\n        {\n          title: t`Pass Test`,\n          color: 'green',\n          icon: <IconCircleCheck />,\n          hidden:\n            !record.templateId ||\n            record?.requires_attachment ||\n            record?.requires_value ||\n            record.result,\n          onClick: () => passTest(record.templateId)\n        },\n        {\n          title: t`Add`,\n          tooltip: t`Add Test Result`,\n          color: 'green',\n          icon: <IconCirclePlus />,\n          hidden: !user.hasAddRole(UserRoles.stock) || !record.templateId,\n          onClick: () => {\n            setSelectedTemplate(record.templateId);\n            newTestModal.open();\n          }\n        },\n        RowEditAction({\n          tooltip: t`Edit Test Result`,\n          hidden:\n            !user.hasChangeRole(UserRoles.stock) || !record.template_detail,\n          onClick: () => {\n            setSelectedTest(record.pk);\n            editTestModal.open();\n          }\n        }),\n        RowDeleteAction({\n          tooltip: t`Delete Test Result`,\n          hidden:\n            !user.hasDeleteRole(UserRoles.stock) || !record.template_detail,\n          onClick: () => {\n            setSelectedTest(record.pk);\n            deleteTestModal.open();\n          }\n        })\n      ];\n    },\n    [user, itemId]\n  );\n\n  const tableFilters: TableFilter[] = useMemo(() => {\n    return [\n      {\n        name: 'required',\n        label: t`Required`,\n        description: t`Show results for required tests`\n      },\n      {\n        name: 'include_installed',\n        label: t`Include Installed`,\n        description: t`Show results for installed stock items`\n      },\n      {\n        name: 'result',\n        label: t`Passed`,\n        description: t`Show only passed tests`\n      },\n      {\n        name: 'enabled',\n        label: t`Enabled`,\n        description: t`Show results for enabled tests`\n      }\n    ];\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <AddItemButton\n        key='add-test-result'\n        tooltip={t`Add Test Result`}\n        onClick={() => {\n          setSelectedTemplate(undefined);\n          newTestModal.open();\n        }}\n        hidden={!user.hasAddRole(UserRoles.stock)}\n      />\n    ];\n  }, [user]);\n\n  // Row expansion controller\n  const rowExpansion: DataTableRowExpansionProps<any> = useMemo(() => {\n    const cols: any = [\n      ...constructTableColumns(true),\n      {\n        accessor: 'actions',\n        title: '  ',\n        hidden: false,\n        switchable: false,\n        width: 50,\n        render: (record: any) => (\n          <RowActions actions={rowActions(record) ?? []} />\n        )\n      }\n    ];\n\n    return {\n      allowMultiple: true,\n      expandable: ({ record }: { record: any }) => {\n        return (\n          table.isRowExpanded(record.pk) ||\n          (record.results && record.results.length > 1)\n        );\n      },\n      content: ({ record }: { record: any }) => {\n        if (!record || !record.results || record.results.length < 2) {\n          return null;\n        }\n\n        const results = record?.results ?? [];\n\n        return (\n          <DataTable\n            key={record.pk}\n            idAccessor={'test'}\n            noHeader\n            columns={cols}\n            records={results.slice(0, -1)}\n          />\n        );\n      }\n    };\n  }, [constructTableColumns, table.isRowExpanded]);\n\n  return (\n    <>\n      {newTestModal.modal}\n      {editTestModal.modal}\n      {deleteTestModal.modal}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.stock_test_result_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          dataFormatter: formatRecords,\n          enablePagination: false,\n          tableActions: tableActions,\n          tableFilters: tableFilters,\n          rowActions: rowActions,\n          rowExpansion: rowExpansion,\n          params: {\n            stock_item: itemId,\n            user_detail: true,\n            attachment_detail: true,\n            template_detail: true\n          }\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Table, Text } from '@mantine/core';\nimport { type ReactNode, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport { formatDecimal } from '@lib/functions/Formatting';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { RenderBuildOrder } from '../../components/render/Build';\nimport { RenderCompany } from '../../components/render/Company';\nimport {\n  RenderPurchaseOrder,\n  RenderReturnOrder,\n  RenderSalesOrder\n} from '../../components/render/Order';\nimport { RenderPart } from '../../components/render/Part';\nimport { StatusRenderer } from '../../components/render/StatusRenderer';\nimport {\n  RenderStockItem,\n  RenderStockLocation\n} from '../../components/render/Stock';\nimport { RenderUser } from '../../components/render/User';\nimport { useTable } from '../../hooks/UseTable';\nimport { DateColumn, DescriptionColumn } from '../ColumnRenderers';\nimport { UserFilter } from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\ntype StockTrackingEntry = {\n  label: string;\n  key: string;\n  details: ReactNode;\n};\n\nexport function StockTrackingTable({ itemId }: Readonly<{ itemId: number }>) {\n  const navigate = useNavigate();\n  const table = useTable('stock_tracking');\n\n  // Render \"details\" for a stock tracking record\n  const renderDetails = useCallback(\n    (record: any) => {\n      const deltas: any = record?.deltas ?? {};\n\n      const entries: StockTrackingEntry[] = [\n        {\n          label: t`Stock Item`,\n          key: 'stockitem',\n          details:\n            deltas.stockitem_detail &&\n            RenderStockItem({ instance: deltas.stockitem_detail, link: true })\n        },\n        {\n          label: t`Stock Item`,\n          key: 'item',\n          details:\n            deltas.item_detail &&\n            RenderStockItem({\n              instance: deltas.item_detail,\n              link: true\n            })\n        },\n        {\n          label: t`Status`,\n          key: 'status',\n          details:\n            deltas.status &&\n            StatusRenderer({ status: deltas.status, type: ModelType.stockitem })\n        },\n        {\n          label: t`Quantity`,\n          key: 'quantity',\n          details: formatDecimal(deltas.quantity)\n        },\n        {\n          label: t`Added`,\n          key: 'added',\n          details: deltas.added\n        },\n        {\n          label: t`Removed`,\n          key: 'removed',\n          details: deltas.removed\n        },\n        {\n          label: t`Part`,\n          key: 'part',\n          details:\n            deltas.part_detail &&\n            RenderPart({\n              instance: deltas.part_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Location`,\n          key: 'location',\n          details:\n            deltas.location_detail &&\n            RenderStockLocation({\n              instance: deltas.location_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Build Order`,\n          key: 'buildorder',\n          details:\n            deltas.buildorder_detail &&\n            RenderBuildOrder({\n              instance: deltas.buildorder_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Purchase Order`,\n          key: 'purchaseorder',\n          details:\n            deltas.purchaseorder_detail &&\n            RenderPurchaseOrder({\n              instance: deltas.purchaseorder_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Sales Order`,\n          key: 'salesorder',\n          details:\n            deltas.salesorder_detail &&\n            RenderSalesOrder({\n              instance: deltas.salesorder_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Return Order`,\n          key: 'returnorder',\n          details:\n            deltas.returnorder_detail &&\n            RenderReturnOrder({\n              instance: deltas.returnorder_detail,\n              link: true,\n              navigate: navigate\n            })\n        },\n        {\n          label: t`Customer`,\n          key: 'customer',\n          details:\n            deltas.customer_detail &&\n            RenderCompany({\n              instance: deltas.customer_detail,\n              link: true,\n              navigate: navigate\n            })\n        }\n      ];\n\n      return (\n        <Table striped>\n          <Table.Tbody>\n            {entries.map(\n              (entry) =>\n                entry.details && (\n                  <Table.Tr key={entry.key}>\n                    <Table.Td>\n                      <Text>{entry.label}</Text>\n                    </Table.Td>\n                    <Table.Td>{entry.details}</Table.Td>\n                  </Table.Tr>\n                )\n            )}\n          </Table.Tbody>\n        </Table>\n      );\n    },\n    [navigate]\n  );\n\n  const filters: TableFilter[] = useMemo(() => {\n    return [\n      UserFilter({\n        name: 'user',\n        label: t`User`,\n        description: t`Filter by user`\n      })\n    ];\n  }, []);\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      DateColumn({\n        switchable: false\n      }),\n      DescriptionColumn({\n        accessor: 'label'\n      }),\n      {\n        accessor: 'details',\n        title: t`Details`,\n        switchable: false,\n        render: renderDetails\n      },\n      {\n        accessor: 'notes',\n        title: t`Notes`,\n        sortable: false,\n        switchable: true\n      },\n      {\n        accessor: 'user',\n        title: t`User`,\n        render: (record: any) => {\n          if (!record.user_detail) {\n            return <Text size='sm' fs='italic'>{t`No user information`}</Text>;\n          }\n\n          return RenderUser({ instance: record.user_detail });\n        }\n      }\n    ];\n  }, []);\n\n  return (\n    <InvenTreeTable\n      tableState={table}\n      url={apiUrl(ApiEndpoints.stock_tracking_list)}\n      columns={tableColumns}\n      props={{\n        params: {\n          item: itemId,\n          user_detail: true\n        },\n        enableDownload: true,\n        tableFilters: filters\n      }}\n    />\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport {\n  Accordion,\n  Button,\n  Grid,\n  Group,\n  Skeleton,\n  Space,\n  Stack,\n  Text,\n  Tooltip\n} from '@mantine/core';\nimport {\n  IconArrowLeft,\n  IconArrowRight,\n  IconBookmark,\n  IconBoxPadding,\n  IconChecklist,\n  IconHistory,\n  IconInfoCircle,\n  IconPackages,\n  IconSearch,\n  IconShoppingCart,\n  IconSitemap\n} from '@tabler/icons-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { type ReactNode, useMemo, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport { notifications } from '@mantine/notifications';\nimport { useBarcodeScanDialog } from '../../components/barcodes/BarcodeScanDialog';\nimport AdminButton from '../../components/buttons/AdminButton';\nimport { PrintingActions } from '../../components/buttons/PrintingActions';\nimport {\n  type DetailsField,\n  DetailsTable\n} from '../../components/details/Details';\nimport DetailsBadge from '../../components/details/DetailsBadge';\nimport { DetailsImage } from '../../components/details/DetailsImage';\nimport { ItemDetailsGrid } from '../../components/details/ItemDetails';\nimport {\n  ActionDropdown,\n  BarcodeActionDropdown,\n  DeleteItemAction,\n  DuplicateItemAction,\n  EditItemAction,\n  OptionsActionDropdown\n} from '../../components/items/ActionDropdown';\nimport { StylishText } from '../../components/items/StylishText';\nimport InstanceDetail from '../../components/nav/InstanceDetail';\nimport NavigationTree from '../../components/nav/NavigationTree';\nimport { PageDetail } from '../../components/nav/PageDetail';\nimport AttachmentPanel from '../../components/panels/AttachmentPanel';\nimport NotesPanel from '../../components/panels/NotesPanel';\nimport type { PanelType } from '../../components/panels/Panel';\nimport { PanelGroup } from '../../components/panels/PanelGroup';\nimport LocateItemButton from '../../components/plugins/LocateItemButton';\nimport { StatusRenderer } from '../../components/render/StatusRenderer';\nimport OrderPartsWizard from '../../components/wizards/OrderPartsWizard';\nimport { useApi } from '../../contexts/ApiContext';\nimport { formatCurrency, formatDecimal } from '../../defaults/formatters';\nimport {\n  type StockOperationProps,\n  useFindSerialNumberForm,\n  useStockFields,\n  useStockItemSerializeFields\n} from '../../forms/StockForms';\nimport { InvenTreeIcon } from '../../functions/icons';\nimport {\n  useCreateApiFormModal,\n  useDeleteApiFormModal,\n  useEditApiFormModal\n} from '../../hooks/UseForm';\nimport { useInstance } from '../../hooks/UseInstance';\nimport { useStockAdjustActions } from '../../hooks/UseStockAdjustActions';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport BuildAllocatedStockTable from '../../tables/build/BuildAllocatedStockTable';\nimport SalesOrderAllocationTable from '../../tables/sales/SalesOrderAllocationTable';\nimport InstalledItemsTable from '../../tables/stock/InstalledItemsTable';\nimport { StockItemTable } from '../../tables/stock/StockItemTable';\nimport StockItemTestResultTable from '../../tables/stock/StockItemTestResultTable';\nimport { StockTrackingTable } from '../../tables/stock/StockTrackingTable';\n\nexport default function StockDetail() {\n  const { id } = useParams();\n\n  const api = useApi();\n  const user = useUserState();\n\n  const globalSettings = useGlobalSettingsState();\n\n  const enableExpiry = useMemo(\n    () => globalSettings.isSet('STOCK_ENABLE_EXPIRY'),\n    [globalSettings]\n  );\n\n  const navigate = useNavigate();\n\n  const [treeOpen, setTreeOpen] = useState(false);\n\n  const {\n    instance: stockitem,\n    refreshInstance,\n    refreshInstancePromise,\n    instanceQuery\n  } = useInstance({\n    endpoint: ApiEndpoints.stock_item_list,\n    pk: id,\n    params: {\n      part_detail: true,\n      location_detail: true,\n      path_detail: true\n    }\n  });\n\n  const { instance: serialNumbers, instanceQuery: serialNumbersQuery } =\n    useInstance({\n      endpoint: ApiEndpoints.stock_serial_info,\n      pk: id\n    });\n\n  const findBySerialNumber = useFindSerialNumberForm({\n    partId: stockitem.part\n  });\n\n  const detailsPanel = useMemo(() => {\n    const data = { ...stockitem };\n    const part = stockitem?.part_detail ?? {};\n\n    data.available_stock = Math.max(0, data.quantity - data.allocated);\n\n    if (instanceQuery.isFetching) {\n      return <Skeleton />;\n    }\n\n    // Top left - core part information\n    const tl: DetailsField[] = [\n      {\n        name: 'part',\n        label: t`Base Part`,\n        type: 'link',\n        model: ModelType.part\n      },\n      {\n        name: 'part_detail.IPN',\n        label: t`IPN`,\n        type: 'text',\n        copy: true,\n        icon: 'part',\n        hidden: !part.IPN\n      },\n      {\n        name: 'part_detail.revision',\n        label: t`Revision`,\n        type: 'string',\n        copy: true,\n        icon: 'revision',\n        hidden: !part.revision\n      },\n      {\n        name: 'status',\n        type: 'status',\n        label: t`Status`,\n        model: ModelType.stockitem\n      },\n      {\n        name: 'status_custom_key',\n        type: 'status',\n        label: t`Custom Status`,\n        model: ModelType.stockitem,\n        icon: 'status',\n        hidden:\n          !stockitem.status_custom_key ||\n          stockitem.status_custom_key == stockitem.status\n      },\n      {\n        type: 'link',\n        name: 'link',\n        label: t`Link`,\n        external: true,\n        copy: true,\n        hidden: !stockitem.link\n      }\n    ];\n\n    // Top right - available stock information\n    const tr: DetailsField[] = [\n      {\n        type: 'text',\n        name: 'serial',\n        label: t`Serial Number`,\n        hidden: !stockitem.serial,\n        value_formatter: () => (\n          <Group gap='xs' justify='space-apart'>\n            <Text>{stockitem.serial}</Text>\n            <Space flex={10} />\n            <Group gap={2} justify='right'>\n              {serialNumbers.previous?.pk && (\n                <Tooltip label={t`Previous serial number`} position='top'>\n                  <Button\n                    p={3}\n                    aria-label='previous-serial-number'\n                    leftSection={<IconArrowLeft />}\n                    variant='transparent'\n                    size='sm'\n                    onClick={() => {\n                      navigate(\n                        getDetailUrl(\n                          ModelType.stockitem,\n                          serialNumbers.previous.pk\n                        )\n                      );\n                    }}\n                  >\n                    {serialNumbers.previous.serial}\n                  </Button>\n                </Tooltip>\n              )}\n              <ActionButton\n                icon={<IconSearch size={18} />}\n                tooltip={t`Find serial number`}\n                tooltipAlignment='top'\n                variant='transparent'\n                onClick={findBySerialNumber.open}\n              />\n              {serialNumbers.next?.pk && (\n                <Tooltip label={t`Next serial number`} position='top'>\n                  <Button\n                    p={3}\n                    aria-label='next-serial-number'\n                    rightSection={<IconArrowRight />}\n                    variant='transparent'\n                    size='sm'\n                    onClick={() => {\n                      navigate(\n                        getDetailUrl(ModelType.stockitem, serialNumbers.next.pk)\n                      );\n                    }}\n                  >\n                    {serialNumbers.next.serial}\n                  </Button>\n                </Tooltip>\n              )}\n            </Group>\n          </Group>\n        )\n      },\n      {\n        type: 'number',\n        name: 'quantity',\n        label: t`Quantity`,\n        unit: part?.units,\n        hidden: !!stockitem.serial && stockitem.quantity == 1\n      },\n      {\n        type: 'number',\n        name: 'available_stock',\n        label: t`Available`,\n        unit: part?.units,\n        icon: 'stock'\n      },\n      {\n        type: 'number',\n        name: 'allocated',\n        label: t`Allocated to Orders`,\n        unit: part?.units,\n        icon: 'tick_off',\n        hidden: !stockitem.allocated\n      },\n      {\n        type: 'text',\n        name: 'batch',\n        label: t`Batch Code`,\n        hidden: !stockitem.batch\n      }\n    ];\n\n    // Bottom left: location information\n    const bl: DetailsField[] = [\n      {\n        name: 'supplier_part',\n        label: t`Supplier Part`,\n        type: 'link',\n        model_field: 'SKU',\n        model: ModelType.supplierpart,\n        hidden: !stockitem.supplier_part\n      },\n      {\n        type: 'link',\n        name: 'location',\n        label: t`Location`,\n        model: ModelType.stocklocation,\n        hidden: !stockitem.location\n      },\n      {\n        type: 'link',\n        name: 'belongs_to',\n        label: t`Installed In`,\n        model_filters: {\n          part_detail: true\n        },\n        model_formatter: (model: any) => {\n          let text = model?.part_detail?.full_name ?? model?.name;\n          if (model.serial && model.quantity == 1) {\n            text += ` # ${model.serial}`;\n          }\n\n          return text;\n        },\n        icon: 'stock',\n        model: ModelType.stockitem,\n        hidden: !stockitem.belongs_to\n      },\n      {\n        type: 'link',\n        name: 'parent',\n        icon: 'sitemap',\n        label: t`Parent Item`,\n        model: ModelType.stockitem,\n        hidden: !stockitem.parent,\n        model_formatter: (model: any) => {\n          return t`Parent stock item`;\n        }\n      },\n      {\n        type: 'link',\n        name: 'consumed_by',\n        label: t`Consumed By`,\n        model: ModelType.build,\n        hidden: !stockitem.consumed_by,\n        icon: 'build',\n        model_field: 'reference'\n      },\n      {\n        type: 'link',\n        name: 'build',\n        label: t`Build Order`,\n        model: ModelType.build,\n        hidden: !stockitem.build,\n        model_field: 'reference'\n      },\n      {\n        type: 'link',\n        name: 'purchase_order',\n        label: t`Purchase Order`,\n        model: ModelType.purchaseorder,\n        hidden: !stockitem.purchase_order,\n        icon: 'purchase_orders',\n        model_field: 'reference'\n      },\n      {\n        type: 'link',\n        name: 'sales_order',\n        label: t`Sales Order`,\n        model: ModelType.salesorder,\n        hidden: !stockitem.sales_order,\n        icon: 'sales_orders',\n        model_field: 'reference'\n      },\n      {\n        type: 'link',\n        name: 'customer',\n        label: t`Customer`,\n        model: ModelType.company,\n        hidden: !stockitem.customer\n      }\n    ];\n\n    // Bottom right - any other information\n    const br: DetailsField[] = [\n      // Expiry date\n      {\n        type: 'date',\n        name: 'expiry_date',\n        label: t`Expiry Date`,\n        hidden: !enableExpiry || !stockitem.expiry_date,\n        icon: 'calendar'\n      },\n      // TODO: Ownership\n      {\n        type: 'text',\n        name: 'purchase_price',\n        label: t`Unit Price`,\n        icon: 'currency',\n        hidden: !stockitem.purchase_price,\n        value_formatter: () => {\n          return formatCurrency(stockitem.purchase_price, {\n            currency: stockitem.purchase_price_currency\n          });\n        }\n      },\n      {\n        type: 'text',\n        name: 'stock_value',\n        label: t`Stock Value`,\n        icon: 'currency',\n        hidden:\n          !stockitem.purchase_price ||\n          stockitem.quantity == 1 ||\n          stockitem.quantity == 0,\n        value_formatter: () => {\n          return formatCurrency(stockitem.purchase_price, {\n            currency: stockitem.purchase_price_currency,\n            multiplier: stockitem.quantity\n          });\n        }\n      },\n      {\n        type: 'text',\n        name: 'packaging',\n        icon: 'part',\n        label: t`Packaging`,\n        hidden: !stockitem.packaging\n      },\n      {\n        type: 'text',\n        name: 'updated',\n        icon: 'calendar',\n        label: t`Last Updated`\n      },\n      {\n        type: 'text',\n        name: 'stocktake',\n        icon: 'calendar',\n        label: t`Last Stocktake`,\n        hidden: !stockitem.stocktake\n      }\n    ];\n\n    return (\n      <ItemDetailsGrid>\n        <Grid grow>\n          <DetailsImage\n            appRole={UserRoles.part}\n            apiPath={ApiEndpoints.part_list}\n            src={\n              stockitem.part_detail?.image ?? stockitem?.part_detail?.thumbnail\n            }\n            pk={stockitem.part}\n          />\n          <Grid.Col span={{ base: 12, sm: 8 }}>\n            <DetailsTable fields={tl} item={data} />\n          </Grid.Col>\n        </Grid>\n        <DetailsTable fields={tr} item={data} />\n        <DetailsTable fields={bl} item={data} />\n        <DetailsTable fields={br} item={data} />\n      </ItemDetailsGrid>\n    );\n  }, [\n    stockitem,\n    serialNumbers,\n    serialNumbersQuery.isFetching,\n    instanceQuery.isFetching,\n    enableExpiry\n  ]);\n\n  const showBuildAllocations: boolean = useMemo(() => {\n    // Determine if \"build allocations\" should be shown for this stock item\n    return (\n      stockitem?.part_detail?.component && // Must be a \"component\"\n      !stockitem?.sales_order && // Must not be assigned to a sales order\n      !stockitem?.belongs_to\n    ); // Must not be installed into another item\n  }, [stockitem]);\n\n  const showSalesAllocations: boolean = useMemo(() => {\n    return stockitem?.part_detail?.salable;\n  }, [stockitem]);\n\n  // API query to determine if this stock item has trackable BOM items\n  const trackedBomItemQuery = useQuery({\n    queryKey: ['tracked-bom-item', stockitem.pk, stockitem.part],\n    queryFn: () => {\n      if (\n        !stockitem.pk ||\n        !stockitem.part ||\n        !stockitem.part_detail?.assembly\n      ) {\n        return false;\n      }\n\n      return api\n        .get(apiUrl(ApiEndpoints.bom_list), {\n          params: {\n            part: stockitem.part,\n            sub_part_trackable: true,\n            limit: 1\n          }\n        })\n        .then((response) => {\n          if (response.status == 200) {\n            return response.data.count > 0;\n          } else {\n            return null;\n          }\n        });\n    }\n  });\n\n  const showInstalledItems: boolean = useMemo(() => {\n    if (stockitem?.installed_items) {\n      // There are installed items in this stock item\n      return true;\n    }\n\n    if (!!trackedBomItemQuery.data) {\n      return trackedBomItemQuery.data;\n    }\n\n    // Fall back to whether this is an assembly or not\n    return stockitem?.part_detail?.assembly;\n  }, [trackedBomItemQuery, stockitem]);\n\n  const stockPanels: PanelType[] = useMemo(() => {\n    return [\n      {\n        name: 'details',\n        label: t`Stock Details`,\n        icon: <IconInfoCircle />,\n        content: detailsPanel\n      },\n      {\n        name: 'tracking',\n        label: t`Stock Tracking`,\n        icon: <IconHistory />,\n        content: stockitem.pk ? (\n          <StockTrackingTable itemId={stockitem.pk} />\n        ) : (\n          <Skeleton />\n        )\n      },\n      {\n        name: 'allocations',\n        label: t`Allocations`,\n        icon: <IconBookmark />,\n        hidden:\n          !stockitem.in_stock ||\n          (!showSalesAllocations && !showBuildAllocations),\n        content: (\n          <Accordion\n            multiple={true}\n            defaultValue={['buildAllocations', 'salesAllocations']}\n          >\n            {showBuildAllocations && (\n              <Accordion.Item value='buildAllocations' key='buildAllocations'>\n                <Accordion.Control>\n                  <StylishText size='lg'>{t`Build Order Allocations`}</StylishText>\n                </Accordion.Control>\n                <Accordion.Panel>\n                  <BuildAllocatedStockTable\n                    stockId={stockitem.pk}\n                    modelField='build'\n                    modelTarget={ModelType.build}\n                    showBuildInfo\n                  />\n                </Accordion.Panel>\n              </Accordion.Item>\n            )}\n            {showSalesAllocations && (\n              <Accordion.Item value='salesAllocations' key='salesAllocations'>\n                <Accordion.Control>\n                  <StylishText size='lg'>{t`Sales Order Allocations`}</StylishText>\n                </Accordion.Control>\n                <Accordion.Panel>\n                  <SalesOrderAllocationTable\n                    stockId={stockitem.pk}\n                    modelField='order'\n                    modelTarget={ModelType.salesorder}\n                    showOrderInfo\n                  />\n                </Accordion.Panel>\n              </Accordion.Item>\n            )}\n          </Accordion>\n        )\n      },\n      {\n        name: 'test-results',\n        label: t`Test Results`,\n        icon: <IconChecklist />,\n        hidden: !stockitem?.part_detail?.testable,\n        content: stockitem?.pk ? (\n          <StockItemTestResultTable\n            itemId={stockitem.pk}\n            partId={stockitem.part}\n          />\n        ) : (\n          <Skeleton />\n        )\n      },\n      {\n        name: 'installed_items',\n        label: t`Installed Items`,\n        icon: <IconBoxPadding />,\n        hidden: !showInstalledItems,\n        content: <InstalledItemsTable stockItem={stockitem} />\n      },\n      {\n        name: 'child_items',\n        label: t`Child Items`,\n        icon: <IconSitemap />,\n        hidden: (stockitem?.child_items ?? 0) == 0,\n        content: stockitem?.pk ? (\n          <StockItemTable\n            tableName='child-stock'\n            params={{ ancestor: stockitem.pk }}\n          />\n        ) : (\n          <Skeleton />\n        )\n      },\n      AttachmentPanel({\n        model_type: ModelType.stockitem,\n        model_id: stockitem.pk\n      }),\n      NotesPanel({\n        model_type: ModelType.stockitem,\n        model_id: stockitem.pk\n      })\n    ];\n  }, [\n    showSalesAllocations,\n    showBuildAllocations,\n    showInstalledItems,\n    stockitem,\n    serialNumbers,\n    serialNumbersQuery,\n    id,\n    user\n  ]);\n\n  const breadcrumbs = useMemo(\n    () => [\n      { name: t`Stock`, url: '/stock' },\n      ...(stockitem.location_path ?? []).map((l: any) => ({\n        name: l.name,\n        url: getDetailUrl(ModelType.stocklocation, l.pk)\n      }))\n    ],\n    [stockitem]\n  );\n\n  const editStockItemFields = useStockFields({\n    create: false,\n    stockItem: stockitem,\n    partId: stockitem.part,\n    modalId: 'edit-stock-item'\n  });\n\n  const editStockItem = useEditApiFormModal({\n    url: ApiEndpoints.stock_item_list,\n    pk: stockitem.pk,\n    title: t`Edit Stock Item`,\n    modalId: 'edit-stock-item',\n    fields: editStockItemFields,\n    onFormSuccess: refreshInstance\n  });\n\n  const duplicateStockItemFields = useStockFields({\n    create: true,\n    modalId: 'duplicate-stock-item'\n  });\n\n  const duplicateStockData = useMemo(() => {\n    const duplicate = {\n      ...stockitem,\n      serial_numbers: stockitem.serial\n    };\n\n    // Omit the \"serial\" field for item creation\n    delete duplicate.serial;\n\n    return duplicate;\n  }, [stockitem]);\n\n  const duplicateStockItem = useCreateApiFormModal({\n    url: ApiEndpoints.stock_item_list,\n    title: t`Add Stock Item`,\n    modalId: 'duplicate-stock-item',\n    fields: duplicateStockItemFields,\n    initialData: {\n      ...duplicateStockData\n    },\n    follow: true,\n    successMessage: null,\n    modelType: ModelType.stockitem,\n    onFormSuccess: (data) => {\n      // Handle case where multiple stock items are created\n      if (Array.isArray(data) && data.length > 0) {\n        if (data.length == 1) {\n          navigate(getDetailUrl(ModelType.stockitem, data[0]?.pk));\n        } else {\n          const n: number = data.length;\n          notifications.show({\n            title: t`Items Created`,\n            message: t`Created ${n} stock items`,\n            color: 'green'\n          });\n        }\n      }\n    }\n  });\n\n  const preDeleteContent = useMemo(() => {\n    // TODO: Fill this out with information on the stock item.\n    // e.g. list of child items which would be deleted, etc\n    return undefined;\n  }, [stockitem]);\n\n  const deleteStockItem = useDeleteApiFormModal({\n    url: ApiEndpoints.stock_item_list,\n    pk: stockitem.pk,\n    title: t`Delete Stock Item`,\n    preFormContent: preDeleteContent,\n    onFormSuccess: () => {\n      // Redirect to the part page\n      navigate(getDetailUrl(ModelType.part, stockitem.part));\n    }\n  });\n\n  const stockOperationProps: StockOperationProps = useMemo(() => {\n    return {\n      items: [stockitem],\n      model: ModelType.stockitem,\n      refresh: refreshInstance,\n      filters: {\n        in_stock: true\n      }\n    };\n  }, [stockitem]);\n\n  const stockAdjustActions = useStockAdjustActions({\n    formProps: stockOperationProps,\n    delete: false,\n    assign: !!stockitem.in_stock,\n    return: !!stockitem.consumed_by || !!stockitem.customer,\n    merge: false\n  });\n\n  const serializeStockFields = useStockItemSerializeFields({\n    partId: stockitem.part,\n    trackable: stockitem.part_detail?.trackable,\n    modalId: 'stock-item-serialize'\n  });\n\n  const serializeStockItem = useCreateApiFormModal({\n    url: ApiEndpoints.stock_serialize,\n    pk: stockitem.pk,\n    title: t`Serialize Stock Item`,\n    modalId: 'stock-item-serialize',\n    fields: serializeStockFields,\n    initialData: {\n      quantity: stockitem.quantity,\n      destination: stockitem.location ?? stockitem.part_detail?.default_location\n    },\n    onFormSuccess: (response: any) => {\n      if (response.length >= stockitem.quantity) {\n        // Entire item was serialized\n        // Navigate to the first result\n        navigate(getDetailUrl(ModelType.stockitem, response[0].pk));\n      } else {\n        refreshInstance();\n      }\n    },\n    successMessage: t`Stock item serialized`\n  });\n\n  const orderPartsWizard = OrderPartsWizard({\n    parts: stockitem.part_detail ? [stockitem.part_detail] : []\n  });\n\n  const scanIntoLocation = useBarcodeScanDialog({\n    title: t`Scan Into Location`,\n    modelType: ModelType.stocklocation,\n    callback: async (barcode, response) => {\n      const pk = response.stocklocation.pk;\n\n      return api\n        .post(apiUrl(ApiEndpoints.stock_transfer), {\n          location: pk,\n          items: [\n            {\n              pk: stockitem.pk,\n              quantity: stockitem.quantity\n            }\n          ]\n        })\n        .then(() => {\n          refreshInstance();\n          return {\n            success: t`Scanned stock item into location`\n          };\n        })\n        .catch((error) => {\n          console.log('Error scanning stock item:', error);\n          return {\n            error: t`Error scanning stock item`\n          };\n        });\n    }\n  });\n\n  const stockActions = useMemo(() => {\n    // Can this stock item be transferred to a different location?\n    const canTransfer =\n      user.hasChangeRole(UserRoles.stock) &&\n      !stockitem.sales_order &&\n      !stockitem.belongs_to &&\n      !stockitem.customer &&\n      !stockitem.consumed_by;\n\n    const isBuilding = stockitem.is_building;\n\n    const serial = stockitem.serial;\n    const serialized =\n      serial != null &&\n      serial != undefined &&\n      serial != '' &&\n      stockitem.quantity == 1;\n\n    return [\n      <AdminButton model={ModelType.stockitem} id={stockitem.pk} />,\n      <LocateItemButton stockId={stockitem.pk} />,\n      <BarcodeActionDropdown\n        model={ModelType.stockitem}\n        pk={stockitem.pk}\n        hash={stockitem?.barcode_hash}\n        perm={user.hasChangeRole(UserRoles.stock)}\n        actions={[\n          {\n            name: t`Scan into location`,\n            icon: <InvenTreeIcon icon='location' />,\n            tooltip: t`Scan this item into a location`,\n            onClick: scanIntoLocation.open\n          }\n        ]}\n      />,\n      <PrintingActions\n        modelType={ModelType.stockitem}\n        items={[stockitem.pk]}\n        enableReports\n        enableLabels\n      />,\n      <ActionDropdown\n        tooltip={t`Stock Operations`}\n        icon={<IconPackages />}\n        actions={[\n          ...stockAdjustActions.menuActions,\n          {\n            name: t`Serialize`,\n            tooltip: t`Serialize stock`,\n            hidden:\n              serialized ||\n              stockitem?.quantity < 1 ||\n              stockitem?.part_detail?.trackable != true,\n            icon: <InvenTreeIcon icon='serial' iconProps={{ color: 'blue' }} />,\n            onClick: () => {\n              serializeStockItem.open();\n            }\n          },\n          {\n            name: t`Order`,\n            tooltip: t`Order Stock`,\n            hidden:\n              !user.hasAddRole(UserRoles.purchase_order) ||\n              !stockitem.part_detail?.active ||\n              !stockitem.part_detail?.purchaseable,\n            icon: <IconShoppingCart color='blue' />,\n            onClick: () => {\n              orderPartsWizard.openWizard();\n            }\n          }\n        ]}\n      />,\n      <OptionsActionDropdown\n        tooltip={t`Stock Item Actions`}\n        actions={[\n          DuplicateItemAction({\n            hidden: !user.hasAddRole(UserRoles.stock),\n            onClick: () => duplicateStockItem.open()\n          }),\n          EditItemAction({\n            hidden: !user.hasChangeRole(UserRoles.stock),\n            onClick: () => editStockItem.open()\n          }),\n          DeleteItemAction({\n            hidden: !user.hasDeleteRole(UserRoles.stock),\n            onClick: () => deleteStockItem.open()\n          })\n        ]}\n      />\n    ];\n  }, [id, stockitem, user, stockAdjustActions.menuActions]);\n\n  const stockBadges: ReactNode[] = useMemo(() => {\n    let available = (stockitem?.quantity ?? 0) - (stockitem?.allocated ?? 0);\n    available = Math.max(0, available);\n\n    return instanceQuery.isLoading\n      ? []\n      : [\n          <DetailsBadge\n            color='yellow'\n            label={t`In Production`}\n            visible={stockitem.is_building}\n          />,\n          <DetailsBadge\n            color='blue'\n            label={`${t`Serial Number`}: ${stockitem.serial}`}\n            visible={!!stockitem.serial}\n            key='serial'\n          />,\n          <DetailsBadge\n            color='blue'\n            label={`${t`Quantity`}: ${formatDecimal(stockitem.quantity)}`}\n            visible={!stockitem.serial}\n            key='quantity'\n          />,\n          <DetailsBadge\n            color='yellow'\n            label={`${t`Available`}: ${formatDecimal(available)}`}\n            visible={\n              stockitem.in_stock &&\n              !stockitem.serial &&\n              available != stockitem.quantity\n            }\n            key='available'\n          />,\n          <DetailsBadge\n            color='blue'\n            label={`${t`Batch Code`}: ${stockitem.batch}`}\n            visible={!!stockitem.batch}\n            key='batch'\n          />,\n          <StatusRenderer\n            status={stockitem.status_custom_key || stockitem.status}\n            type={ModelType.stockitem}\n            options={{\n              size: 'lg'\n            }}\n            key='status'\n          />,\n          <DetailsBadge\n            color='yellow'\n            label={t`Stale`}\n            visible={enableExpiry && stockitem.stale && !stockitem.expired}\n            key='stale'\n          />,\n          <DetailsBadge\n            color='orange'\n            label={t`Expired`}\n            visible={enableExpiry && stockitem.expired}\n            key='expired'\n          />,\n          <DetailsBadge\n            color='red'\n            label={t`Unavailable`}\n            visible={stockitem.in_stock == false}\n            key='unavailable'\n          />\n        ];\n  }, [stockitem, instanceQuery, enableExpiry]);\n\n  return (\n    <>\n      {findBySerialNumber.modal}\n      {scanIntoLocation.dialog}\n      <InstanceDetail\n        query={instanceQuery}\n        requiredPermission={ModelType.stockitem}\n      >\n        <Stack>\n          {user.hasViewRole(UserRoles.stock_location) && (\n            <NavigationTree\n              title={t`Stock Locations`}\n              modelType={ModelType.stocklocation}\n              endpoint={ApiEndpoints.stock_location_tree}\n              opened={treeOpen}\n              onClose={() => setTreeOpen(false)}\n              selectedId={stockitem?.location}\n            />\n          )}\n          <PageDetail\n            title={t`Stock Item`}\n            subtitle={stockitem.part_detail?.full_name}\n            imageUrl={stockitem.part_detail?.thumbnail}\n            editAction={editStockItem.open}\n            editEnabled={user.hasChangePermission(ModelType.stockitem)}\n            badges={stockBadges}\n            breadcrumbs={\n              user.hasViewRole(UserRoles.stock_location)\n                ? breadcrumbs\n                : undefined\n            }\n            lastCrumb={[\n              {\n                name: stockitem.name,\n                url: `/stock/item/${stockitem.pk}/`\n              }\n            ]}\n            breadcrumbAction={() => {\n              setTreeOpen(true);\n            }}\n            actions={stockActions}\n          />\n          <PanelGroup\n            pageKey='stockitem'\n            panels={stockPanels}\n            model={ModelType.stockitem}\n            id={stockitem.pk}\n            instance={stockitem}\n          />\n        </Stack>\n      </InstanceDetail>\n      {editStockItem.modal}\n      {duplicateStockItem.modal}\n      {deleteStockItem.modal}\n      {serializeStockItem.modal}\n      {stockAdjustActions.modals.map((modal) => modal.modal)}\n      {orderPartsWizard.wizard}\n    </>\n  );\n}\n"],"names":["InstalledItemsTable","stockItem","table","useTable","user","useUserState","installItemFields","useStockItemInstallFields","installItem","useCreateApiFormModal","url","apiUrl","ApiEndpoints","stock_install","pk","title","_i18n","_","id","successMessage","fields","selectedRecord","setSelectedRecord","useState","uninstallItemFields","useStockItemUninstallFields","uninstallItem","stock_uninstall","initialData","location","part_detail","default_location","tableColumns","useMemo","PartColumn","part","accessor","switchable","render","record","text","formatDecimal","quantity","serial","StatusColumn","model","ModelType","stockitem","tableActions","jsx","AddItemButton","open","hasChangeRole","UserRoles","stock","is_building","assembly","rowActions","useCallback","tooltip","onClick","icon","IconUnlink","hidden","jsxs","Fragment","modal","InvenTreeTable","stock_item_list","enableSelection","enableLabels","enableReports","modelType","params","belongs_to","Skeleton","StockItemTestResultTable","partId","itemId","api","useApi","globalSettings","useGlobalSettingsState","includeTestStation","isSet","data","testTemplates","useQuery","queryKey","queryFn","get","part_test_template_list","include_inherited","enabled","then","response","useEffect","refreshTable","formatRecords","records","results","map","template","templateId","forEach","find","r","push","template_detail","sort","a","b","idx","findIndex","constructTableColumns","child","sortable","installed","stock_item","undefined","multipleResults","length","Group","RowExpansionIcon","isRowExpanded","Text","fontStyle","test_name","Tooltip","Badge","IconInfoCircle","result","PassFailButton","DescriptionColumn","attachment","AttachmentLink","noContext","NoteColumn","DateColumn","user_detail","RenderUser","formatDate","started_datetime","showTime","showSeconds","finished_datetime","expandedRecords","selectedTemplate","setSelectedTemplate","newResultFields","useTestResultFields","editing","editResultFields","newTestModal","stock_test_result_list","selectedTest","setSelectedTest","editTestModal","useEditApiFormModal","onFormSuccess","deleteTestModal","useDeleteApiFormModal","passTest","post","showNotification","message","color","catch","IconCircleCheck","requires_attachment","requires_value","IconCirclePlus","hasAddRole","RowEditAction","RowDeleteAction","hasDeleteRole","tableFilters","name","label","description","rowExpansion","cols","width","RowActions","allowMultiple","expandable","content","DataTable","slice","dataFormatter","enablePagination","attachment_detail","StockTrackingTable","navigate","useNavigate","renderDetails","deltas","entries","key","details","stockitem_detail","RenderStockItem","instance","link","item_detail","status","StatusRenderer","type","added","removed","RenderPart","location_detail","RenderStockLocation","buildorder_detail","RenderBuildOrder","purchaseorder_detail","RenderPurchaseOrder","salesorder_detail","RenderSalesOrder","returnorder_detail","RenderReturnOrder","customer_detail","RenderCompany","Table","entry","filters","UserFilter","stock_tracking_list","item","enableDownload","StockDetail","useParams","enableExpiry","treeOpen","setTreeOpen","refreshInstance","instanceQuery","useInstance","endpoint","path_detail","serialNumbers","serialNumbersQuery","stock_serial_info","findBySerialNumber","useFindSerialNumberForm","detailsPanel","available_stock","Math","max","allocated","isFetching","tl","copy","IPN","revision","status_custom_key","external","tr","value_formatter","Space","previous","Button","IconArrowLeft","getDetailUrl","ActionButton","IconSearch","next","IconArrowRight","unit","units","batch","bl","model_field","supplierpart","supplier_part","stocklocation","model_filters","model_formatter","full_name","parent","build","consumed_by","purchaseorder","purchase_order","salesorder","sales_order","company","customer","br","expiry_date","purchase_price","formatCurrency","currency","purchase_price_currency","multiplier","packaging","stocktake","ItemDetailsGrid","Grid","DetailsImage","part_list","image","thumbnail","base","sm","DetailsTable","showBuildAllocations","component","showSalesAllocations","salable","trackedBomItemQuery","bom_list","sub_part_trackable","limit","count","showInstalledItems","installed_items","stockPanels","IconHistory","IconBookmark","in_stock","Accordion","StylishText","BuildAllocatedStockTable","SalesOrderAllocationTable","IconChecklist","testable","IconBoxPadding","IconSitemap","child_items","StockItemTable","ancestor","AttachmentPanel","model_type","model_id","NotesPanel","breadcrumbs","location_path","l","editStockItemFields","useStockFields","create","modalId","editStockItem","duplicateStockItemFields","duplicateStockData","duplicate","serial_numbers","duplicateStockItem","follow","Array","isArray","n","notifications","show","values","preDeleteContent","deleteStockItem","preFormContent","stockOperationProps","items","refresh","stockAdjustActions","useStockAdjustActions","formProps","delete","assign","return","merge","serializeStockFields","useStockItemSerializeFields","trackable","serializeStockItem","stock_serialize","destination","orderPartsWizard","OrderPartsWizard","parts","scanIntoLocation","useBarcodeScanDialog","callback","barcode","stock_transfer","success","error","console","log","stockActions","serialized","AdminButton","LocateItemButton","BarcodeActionDropdown","barcode_hash","InvenTreeIcon","PrintingActions","ActionDropdown","IconPackages","menuActions","active","purchaseable","IconShoppingCart","openWizard","OptionsActionDropdown","DuplicateItemAction","EditItemAction","DeleteItemAction","stockBadges","available","isLoading","DetailsBadge","size","stale","expired","dialog","InstanceDetail","Stack","hasViewRole","stock_location","NavigationTree","stock_location_tree","PageDetail","hasChangePermission","PanelGroup","modals","wizard"],"mappings":"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"}