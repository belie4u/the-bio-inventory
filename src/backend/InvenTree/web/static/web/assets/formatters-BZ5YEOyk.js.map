{"version":3,"file":"formatters-BZ5YEOyk.js","sources":["../../../../../../frontend/src/defaults/formatters.tsx"],"sourcesContent":["import dayjs from 'dayjs';\n\nimport {\n  type FormatCurrencyOptionsInterface,\n  formatCurrencyValue\n} from '@lib/functions/Formatting';\nimport {\n  useGlobalSettingsState,\n  useUserSettingsState\n} from '../states/SettingsStates';\n\nexport { formatDecimal, formatFileSize } from '@lib/functions/Formatting';\n\n/**\n * Format currency value, automatically localized based on user settings.\n */\nexport function formatCurrency(\n  value: number | string | null | undefined,\n  options: FormatCurrencyOptionsInterface = {\n    digits: 6,\n    minDigits: 0,\n    currency: 'USD',\n    multiplier: 1\n  }\n) {\n  const global_settings = useGlobalSettingsState.getState().lookup;\n\n  // Extract default digit formatting\n  options.digits =\n    options?.digits || (Number(global_settings.PRICING_DECIMAL_PLACES) ?? 6);\n  options.minDigits =\n    options?.minDigits ||\n    (Number(global_settings.PRICING_DECIMAL_PLACES_MIN) ?? 0);\n\n  options.currency =\n    options?.currency || global_settings.INVENTREE_DEFAULT_CURRENCY || 'USD';\n\n  return formatCurrencyValue(value, options);\n}\n\n/*\n * Render the price range for the provided values\n */\nexport function formatPriceRange(\n  minValue: number | null,\n  maxValue: number | null,\n  options: FormatCurrencyOptionsInterface = {}\n) {\n  // If neither values are provided, return a dash\n  if (minValue == null && maxValue == null) {\n    return '-';\n  }\n\n  if (minValue == null) {\n    return formatCurrency(maxValue!, options);\n  }\n\n  if (maxValue == null) {\n    return formatCurrency(minValue!, options);\n  }\n\n  // If both values are the same, return a single value\n  if (minValue == maxValue) {\n    return formatCurrency(minValue, options);\n  }\n\n  // Otherwise, return a range\n  return `${formatCurrency(minValue, options)} - ${formatCurrency(\n    maxValue,\n    options\n  )}`;\n}\n\ninterface FormatDateOptionsInterface {\n  showTime?: boolean;\n  showSeconds?: boolean;\n}\n\n/*\n * Render the provided date in the user-specified format.\n *\n * The provided \"date\" variable is a string, nominally ISO format e.g. 2022-02-22\n * The user-configured setting DATE_DISPLAY_FORMAT determines how the date should be displayed.\n */\nexport function formatDate(\n  date: string,\n  options: FormatDateOptionsInterface = {}\n) {\n  if (!date) {\n    return '-';\n  }\n\n  const user_settings = useUserSettingsState.getState().lookup;\n  let fmt = user_settings.DATE_DISPLAY_FORMAT || 'YYYY-MM-DD';\n\n  if (options.showTime) {\n    fmt += ' HH:mm';\n    if (options.showSeconds) {\n      fmt += ':ss';\n    }\n  }\n\n  const m = dayjs(date);\n\n  if (m.isValid()) {\n    return m.format(fmt);\n  } else {\n    // Invalid input string, simply return provided value\n    return date;\n  }\n}\n"],"names":["formatCurrency","value","options","digits","minDigits","currency","multiplier","global_settings","useGlobalSettingsState","getState","lookup","Number","PRICING_DECIMAL_PLACES","PRICING_DECIMAL_PLACES_MIN","INVENTREE_DEFAULT_CURRENCY","formatCurrencyValue","formatPriceRange","minValue","maxValue","formatDate","date","fmt","useUserSettingsState","DATE_DISPLAY_FORMAT","showTime","showSeconds","m","dayjs","isValid","format"],"mappings":"gGAgBO,SAASA,EACdC,EACAC,EAA0C,CACxCC,OAAQ,EACRC,UAAW,EACXC,SAAU,MACVC,WAAY,CACd,EACA,CACA,MAAMC,EAAkBC,EAAuBC,SAAAA,EAAWC,OAG1DR,OAAAA,EAAQC,QACND,GAAAA,YAAAA,EAASC,UAAWQ,OAAOJ,EAAgBK,sBAAsB,GAAK,GACxEV,EAAQE,WACNF,GAAAA,YAAAA,EAASE,aACRO,OAAOJ,EAAgBM,0BAA0B,GAAK,GAEzDX,EAAQG,UACNH,GAAAA,YAAAA,EAASG,WAAYE,EAAgBO,4BAA8B,MAE9DC,EAAoBd,EAAOC,CAAO,CAC3C,CAKO,SAASc,EACdC,EACAC,EACAhB,EAA0C,CAAA,EAC1C,CAEA,OAAIe,GAAY,MAAQC,GAAY,KAC3B,IAGLD,GAAY,KACPjB,EAAekB,EAAWhB,CAAO,EAGtCgB,GAAY,MAKZD,GAAYC,EACPlB,EAAeiB,EAAUf,CAAO,EAIlC,GAAGF,EAAeiB,EAAUf,CAAO,CAAC,MAAMF,EAC/CkB,EACAhB,CACF,CAAC,EACH,CAaO,SAASiB,EACdC,EACAlB,EAAsC,GACtC,CACA,GAAI,CAACkB,EACH,MAAO,IAIT,IAAIC,EADkBC,EAAqBb,SAAAA,EAAWC,OAC9Ba,qBAAuB,aAE3CrB,EAAQsB,WACVH,GAAO,SACHnB,EAAQuB,cACVJ,GAAO,QAIX,MAAMK,EAAIC,EAAMP,CAAI,EAEpB,OAAIM,EAAEE,UACGF,EAAEG,OAAOR,CAAG,EAGZD,CAEX"}