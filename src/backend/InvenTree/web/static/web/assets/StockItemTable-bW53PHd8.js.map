{"version":3,"file":"StockItemTable-bW53PHd8.js","sources":["../../../../../../frontend/src/tables/stock/StockItemTable.tsx"],"sourcesContent":["import { t } from '@lingui/core/macro';\nimport { Group, Text } from '@mantine/core';\nimport { type ReactNode, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ActionButton } from '@lib/components/ActionButton';\nimport { AddItemButton } from '@lib/components/AddItemButton';\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelType } from '@lib/enums/ModelType';\nimport { UserRoles } from '@lib/enums/Roles';\nimport { apiUrl } from '@lib/functions/Api';\nimport { getDetailUrl } from '@lib/functions/Navigation';\nimport type { TableFilter } from '@lib/types/Filters';\nimport type { TableColumn } from '@lib/types/Tables';\nimport OrderPartsWizard from '../../components/wizards/OrderPartsWizard';\nimport {\n  formatCurrency,\n  formatDecimal,\n  formatPriceRange\n} from '../../defaults/formatters';\nimport {\n  type StockOperationProps,\n  useStockFields\n} from '../../forms/StockForms';\nimport { InvenTreeIcon } from '../../functions/icons';\nimport { useCreateApiFormModal } from '../../hooks/UseForm';\nimport { useStockAdjustActions } from '../../hooks/UseStockAdjustActions';\nimport { useTable } from '../../hooks/UseTable';\nimport { useGlobalSettingsState } from '../../states/SettingsStates';\nimport { useUserState } from '../../states/UserState';\nimport {\n  DateColumn,\n  DescriptionColumn,\n  LocationColumn,\n  PartColumn,\n  StatusColumn\n} from '../ColumnRenderers';\nimport {\n  BatchFilter,\n  HasBatchCodeFilter,\n  InStockFilter,\n  IncludeVariantsFilter,\n  IsSerializedFilter,\n  ManufacturerFilter,\n  SerialFilter,\n  SerialGTEFilter,\n  SerialLTEFilter,\n  StatusFilterOptions,\n  SupplierFilter\n} from '../Filter';\nimport { InvenTreeTable } from '../InvenTreeTable';\nimport { TableHoverCard } from '../TableHoverCard';\n\n/**\n * Construct a list of columns for the stock item table\n */\nfunction stockItemTableColumns({\n  showLocation,\n  showPricing\n}: {\n  showLocation: boolean;\n  showPricing: boolean;\n}): TableColumn[] {\n  return [\n    PartColumn({\n      accessor: 'part',\n      part: 'part_detail'\n    }),\n    {\n      accessor: 'part_detail.IPN',\n      title: t`IPN`,\n      sortable: true\n    },\n    {\n      accessor: 'part_detail.revision',\n      title: t`Revision`,\n      sortable: true,\n      defaultVisible: false\n    },\n    DescriptionColumn({\n      accessor: 'part_detail.description'\n    }),\n    {\n      accessor: 'quantity',\n      ordering: 'stock',\n      sortable: true,\n      title: t`Stock`,\n      render: (record: any) => {\n        // TODO: Push this out into a custom renderer\n        const quantity = record?.quantity ?? 0;\n        const allocated = record?.allocated ?? 0;\n        const available = quantity - allocated;\n        let text = formatDecimal(quantity);\n        const part = record?.part_detail ?? {};\n        const extra: ReactNode[] = [];\n        let color = undefined;\n\n        if (record.serial && quantity == 1) {\n          text = `# ${record.serial}`;\n        }\n\n        if (record.is_building) {\n          color = 'blue';\n          extra.push(\n            <Text\n              key='production'\n              size='sm'\n            >{t`This stock item is in production`}</Text>\n          );\n        } else if (record.sales_order) {\n          extra.push(\n            <Text\n              key='sales-order'\n              size='sm'\n            >{t`This stock item has been assigned to a sales order`}</Text>\n          );\n        } else if (record.customer) {\n          extra.push(\n            <Text\n              key='customer'\n              size='sm'\n            >{t`This stock item has been assigned to a customer`}</Text>\n          );\n        } else if (record.belongs_to) {\n          extra.push(\n            <Text\n              key='belongs-to'\n              size='sm'\n            >{t`This stock item is installed in another stock item`}</Text>\n          );\n        } else if (record.consumed_by) {\n          extra.push(\n            <Text\n              key='consumed-by'\n              size='sm'\n            >{t`This stock item has been consumed by a build order`}</Text>\n          );\n        } else if (!record.in_stock) {\n          extra.push(\n            <Text\n              key='unavailable'\n              size='sm'\n            >{t`This stock item is unavailable`}</Text>\n          );\n        }\n\n        if (record.expired) {\n          extra.push(\n            <Text\n              key='expired'\n              size='sm'\n            >{t`This stock item has expired`}</Text>\n          );\n        } else if (record.stale) {\n          extra.push(\n            <Text key='stale' size='sm'>{t`This stock item is stale`}</Text>\n          );\n        }\n\n        if (record.in_stock) {\n          if (allocated > 0) {\n            if (allocated >= quantity) {\n              color = 'orange';\n              extra.push(\n                <Text\n                  key='fully-allocated'\n                  size='sm'\n                >{t`This stock item is fully allocated`}</Text>\n              );\n            } else {\n              extra.push(\n                <Text\n                  key='partially-allocated'\n                  size='sm'\n                >{t`This stock item is partially allocated`}</Text>\n              );\n            }\n          }\n\n          if (available != quantity) {\n            if (available > 0) {\n              extra.push(\n                <Text key='available' size='sm' c='orange'>\n                  {`${t`Available`}: ${formatDecimal(available)}`}\n                </Text>\n              );\n            } else {\n              extra.push(\n                <Text\n                  key='no-stock'\n                  size='sm'\n                  c='red'\n                >{t`No stock available`}</Text>\n              );\n            }\n          }\n\n          if (quantity <= 0) {\n            extra.push(\n              <Text\n                key='depleted'\n                size='sm'\n              >{t`This stock item has been depleted`}</Text>\n            );\n          }\n        }\n\n        if (!record.in_stock) {\n          color = 'red';\n        }\n\n        return (\n          <TableHoverCard\n            value={\n              <Group gap='xs' justify='left' wrap='nowrap'>\n                <Text c={color}>{text}</Text>\n                {part.units && (\n                  <Text size='xs' c={color}>\n                    [{part.units}]\n                  </Text>\n                )}\n              </Group>\n            }\n            title={t`Stock Information`}\n            extra={extra}\n          />\n        );\n      }\n    },\n    StatusColumn({ model: ModelType.stockitem }),\n    {\n      accessor: 'batch',\n      sortable: true\n    },\n    LocationColumn({\n      hidden: !showLocation,\n      accessor: 'location_detail'\n    }),\n    {\n      accessor: 'purchase_order',\n      title: t`Purchase Order`,\n      defaultVisible: false,\n      render: (record: any) => {\n        return record.purchase_order_reference;\n      }\n    },\n    {\n      accessor: 'SKU',\n      title: t`Supplier Part`,\n      sortable: true,\n      defaultVisible: false\n    },\n    {\n      accessor: 'MPN',\n      title: t`Manufacturer Part`,\n      sortable: true,\n      defaultVisible: false\n    },\n    {\n      accessor: 'purchase_price',\n      title: t`Unit Price`,\n      sortable: true,\n      switchable: true,\n      hidden: !showPricing,\n      defaultVisible: false,\n      render: (record: any) =>\n        formatCurrency(record.purchase_price, {\n          currency: record.purchase_price_currency\n        })\n    },\n    {\n      accessor: 'stock_value',\n      title: t`Stock Value`,\n      sortable: false,\n      hidden: !showPricing,\n      render: (record: any) => {\n        const min_price =\n          record.purchase_price || record.part_detail?.pricing_min;\n        const max_price =\n          record.purchase_price || record.part_detail?.pricing_max;\n        const currency = record.purchase_price_currency || undefined;\n\n        return formatPriceRange(min_price, max_price, {\n          currency: currency,\n          multiplier: record.quantity\n        });\n      }\n    },\n    {\n      accessor: 'packaging',\n      sortable: true,\n      defaultVisible: false\n    },\n\n    DateColumn({\n      title: t`Expiry Date`,\n      accessor: 'expiry_date',\n      hidden: !useGlobalSettingsState.getState().isSet('STOCK_ENABLE_EXPIRY'),\n      defaultVisible: false\n    }),\n    DateColumn({\n      title: t`Last Updated`,\n      accessor: 'updated'\n    }),\n    DateColumn({\n      accessor: 'stocktake_date',\n      title: t`Stocktake Date`,\n      sortable: true\n    })\n  ];\n}\n\n/**\n * Construct a list of available filters for the stock item table\n */\nfunction stockItemTableFilters({\n  enableExpiry\n}: {\n  enableExpiry: boolean;\n}): TableFilter[] {\n  return [\n    {\n      name: 'active',\n      label: t`Active`,\n      description: t`Show stock for active parts`\n    },\n    {\n      name: 'status',\n      label: t`Status`,\n      description: t`Filter by stock status`,\n      choiceFunction: StatusFilterOptions(ModelType.stockitem)\n    },\n    {\n      name: 'assembly',\n      label: t`Assembly`,\n      description: t`Show stock for assembled parts`\n    },\n    {\n      name: 'allocated',\n      label: t`Allocated`,\n      description: t`Show items which have been allocated`\n    },\n    {\n      name: 'available',\n      label: t`Available`,\n      description: t`Show items which are available`\n    },\n    {\n      name: 'cascade',\n      label: t`Include Sublocations`,\n      description: t`Include stock in sublocations`\n    },\n    {\n      name: 'depleted',\n      label: t`Depleted`,\n      description: t`Show depleted stock items`\n    },\n    InStockFilter(),\n    {\n      name: 'is_building',\n      label: t`In Production`,\n      description: t`Show items which are in production`\n    },\n    IncludeVariantsFilter(),\n    SupplierFilter(),\n    ManufacturerFilter(),\n    {\n      name: 'consumed',\n      label: t`Consumed`,\n      description: t`Show items which have been consumed by a build order`\n    },\n    {\n      name: 'installed',\n      label: t`Installed`,\n      description: t`Show stock items which are installed in other items`\n    },\n    {\n      name: 'sent_to_customer',\n      label: t`Sent to Customer`,\n      description: t`Show items which have been sent to a customer`\n    },\n    HasBatchCodeFilter(),\n    BatchFilter(),\n    IsSerializedFilter(),\n    SerialFilter(),\n    SerialLTEFilter(),\n    SerialGTEFilter(),\n    {\n      name: 'tracked',\n      label: t`Tracked`,\n      description: t`Show tracked items`\n    },\n    {\n      name: 'has_purchase_price',\n      label: t`Has Purchase Price`,\n      description: t`Show items which have a purchase price`\n    },\n    {\n      name: 'expired',\n      label: t`Expired`,\n      description: t`Show items which have expired`,\n      active: enableExpiry\n    },\n    {\n      name: 'stale',\n      label: t`Stale`,\n      description: t`Show items which are stale`,\n      active: enableExpiry\n    },\n    {\n      name: 'expiry_before',\n      label: t`Expired Before`,\n      description: t`Show items which expired before this date`,\n      type: 'date',\n      active: enableExpiry\n    },\n    {\n      name: 'expiry_after',\n      label: t`Expired After`,\n      description: t`Show items which expired after this date`,\n      type: 'date',\n      active: enableExpiry\n    },\n    {\n      name: 'updated_before',\n      label: t`Updated Before`,\n      description: t`Show items updated before this date`,\n      type: 'date'\n    },\n    {\n      name: 'updated_after',\n      label: t`Updated After`,\n      description: t`Show items updated after this date`,\n      type: 'date'\n    },\n    {\n      name: 'stocktake_before',\n      label: t`Stocktake Before`,\n      description: t`Show items counted before this date`,\n      type: 'date'\n    },\n    {\n      name: 'stocktake_after',\n      label: t`Stocktake After`,\n      description: t`Show items counted after this date`,\n      type: 'date'\n    },\n    {\n      name: 'external',\n      label: t`External Location`,\n      description: t`Show items in an external location`\n    }\n  ];\n}\n\n/*\n * Load a table of stock items\n */\nexport function StockItemTable({\n  params = {},\n  allowAdd = false,\n  showLocation = true,\n  showPricing = true,\n  allowReturn = false,\n  tableName = 'stockitems'\n}: Readonly<{\n  params?: any;\n  allowAdd?: boolean;\n  showLocation?: boolean;\n  showPricing?: boolean;\n  allowReturn?: boolean;\n  tableName: string;\n}>) {\n  const table = useTable(tableName);\n  const user = useUserState();\n\n  const settings = useGlobalSettingsState();\n\n  const stockExpiryEnabled = useMemo(\n    () => settings.isSet('STOCK_ENABLE_EXPIRY'),\n    [settings]\n  );\n\n  const navigate = useNavigate();\n\n  const tableColumns = useMemo(\n    () =>\n      stockItemTableColumns({\n        showLocation: showLocation ?? true,\n        showPricing: showPricing ?? true\n      }),\n    [showLocation, showPricing]\n  );\n\n  const tableFilters: TableFilter[] = useMemo(\n    () =>\n      stockItemTableFilters({\n        enableExpiry: stockExpiryEnabled\n      }),\n    [stockExpiryEnabled]\n  );\n\n  const stockOperationProps: StockOperationProps = useMemo(() => {\n    return {\n      items: table.selectedRecords,\n      model: ModelType.stockitem,\n      refresh: () => {\n        table.clearSelectedRecords();\n        table.refreshTable();\n      },\n      filters: {\n        in_stock: true\n      }\n    };\n  }, [table.selectedRecords, table.refreshTable]);\n\n  const newStockItemFields = useStockFields({\n    create: true,\n    partId: params.part,\n    modalId: 'add-stock-item'\n  });\n\n  const newStockItem = useCreateApiFormModal({\n    url: ApiEndpoints.stock_item_list,\n    title: t`Add Stock Item`,\n    modalId: 'add-stock-item',\n    fields: newStockItemFields,\n    initialData: {\n      part: params.part,\n      location: params.location\n    },\n    follow: true,\n    table: table,\n    onFormSuccess: (response: any) => {\n      // Returns a list that may contain multiple serialized stock items\n      // Navigate to the first result\n      navigate(getDetailUrl(ModelType.stockitem, response[0].pk));\n    },\n    successMessage: t`Stock item serialized`\n  });\n\n  const [partsToOrder, setPartsToOrder] = useState<any[]>([]);\n\n  const orderPartsWizard = OrderPartsWizard({\n    parts: partsToOrder\n  });\n\n  const stockAdjustActions = useStockAdjustActions({\n    formProps: stockOperationProps,\n    return: allowReturn\n  });\n\n  const tableActions = useMemo(() => {\n    return [\n      stockAdjustActions.dropdown,\n      <ActionButton\n        key='stock-order'\n        hidden={!user.hasAddRole(UserRoles.purchase_order)}\n        tooltip={t`Order items`}\n        icon={<InvenTreeIcon icon='buy' />}\n        disabled={!table.hasSelectedRecords}\n        onClick={() => {\n          setPartsToOrder(\n            table.selectedRecords.map((record) => record.part_detail)\n          );\n          orderPartsWizard.openWizard();\n        }}\n      />,\n      <AddItemButton\n        key='add-stock-item'\n        hidden={!allowAdd || !user.hasAddRole(UserRoles.stock)}\n        tooltip={t`Add Stock Item`}\n        onClick={() => newStockItem.open()}\n      />\n    ];\n  }, [\n    user,\n    allowAdd,\n    table.hasSelectedRecords,\n    table.selectedRecords,\n    stockAdjustActions.dropdown\n  ]);\n\n  return (\n    <>\n      {newStockItem.modal}\n      {orderPartsWizard.wizard}\n      {stockAdjustActions.modals.map((modal) => modal.modal)}\n      <InvenTreeTable\n        url={apiUrl(ApiEndpoints.stock_item_list)}\n        tableState={table}\n        columns={tableColumns}\n        props={{\n          enableDownload: true,\n          enableSelection: true,\n          enableLabels: true,\n          enableReports: true,\n          tableFilters: tableFilters,\n          tableActions: tableActions,\n          modelType: ModelType.stockitem,\n          params: {\n            ...params,\n            part_detail: true,\n            location_detail: true,\n            supplier_part_detail: true\n          }\n        }}\n      />\n    </>\n  );\n}\n"],"names":["stockItemTableColumns","showLocation","showPricing","PartColumn","accessor","part","title","_i18n","_","id","sortable","defaultVisible","DescriptionColumn","ordering","render","record","quantity","allocated","available","text","formatDecimal","part_detail","extra","color","serial","is_building","push","jsx","Text","sales_order","customer","belongs_to","consumed_by","in_stock","expired","stale","TableHoverCard","jsxs","Group","units","StatusColumn","model","ModelType","stockitem","LocationColumn","hidden","purchase_order_reference","switchable","formatCurrency","purchase_price","currency","purchase_price_currency","min_price","pricing_min","max_price","pricing_max","undefined","formatPriceRange","multiplier","DateColumn","useGlobalSettingsState","getState","isSet","stockItemTableFilters","enableExpiry","name","label","description","choiceFunction","StatusFilterOptions","InStockFilter","IncludeVariantsFilter","SupplierFilter","ManufacturerFilter","HasBatchCodeFilter","BatchFilter","IsSerializedFilter","SerialFilter","SerialLTEFilter","SerialGTEFilter","active","type","StockItemTable","params","allowAdd","allowReturn","tableName","table","useTable","user","useUserState","settings","stockExpiryEnabled","useMemo","navigate","useNavigate","tableColumns","tableFilters","stockOperationProps","items","selectedRecords","refresh","clearSelectedRecords","refreshTable","filters","newStockItemFields","useStockFields","create","partId","modalId","newStockItem","useCreateApiFormModal","url","ApiEndpoints","stock_item_list","fields","initialData","location","follow","onFormSuccess","response","getDetailUrl","pk","successMessage","partsToOrder","setPartsToOrder","useState","orderPartsWizard","OrderPartsWizard","parts","stockAdjustActions","useStockAdjustActions","formProps","return","tableActions","dropdown","ActionButton","hasAddRole","UserRoles","purchase_order","InvenTreeIcon","hasSelectedRecords","map","openWizard","AddItemButton","stock","open","Fragment","modal","wizard","modals","InvenTreeTable","apiUrl","enableDownload","enableSelection","enableLabels","enableReports","modelType","location_detail","supplier_part_detail"],"mappings":"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"}