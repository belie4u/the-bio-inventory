{"version":3,"file":"Scan-DgfBQ0Vv.js","sources":["../../../../../../frontend/src/tables/general/BarcodeScanTable.tsx","../../../../../../frontend/src/pages/Index/Scan.tsx"],"sourcesContent":["import { ActionButton } from '@lib/components/ActionButton';\nimport { type RowAction, RowViewAction } from '@lib/components/RowActions';\nimport type { TableColumn } from '@lib/types/Tables';\nimport { t } from '@lingui/core/macro';\nimport { IconTrash } from '@tabler/icons-react';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport type { BarcodeScanItem } from '../../components/barcodes/BarcodeScanItem';\nimport { RenderInstance } from '../../components/render/Instance';\nimport { useTable } from '../../hooks/UseTable';\nimport { useUserState } from '../../states/UserState';\nimport { InvenTreeTable } from '../InvenTreeTable';\n\n/**\n * A table for showing barcode scan history data on the scan index page\n */\nexport default function BarcodeScanTable({\n  records,\n  onItemsSelected,\n  onItemsDeleted\n}: {\n  records: BarcodeScanItem[];\n  onItemsSelected: (items: string[]) => void;\n  onItemsDeleted: (items: string[]) => void;\n}) {\n  const navigate = useNavigate();\n  const user = useUserState();\n\n  const table = useTable('barcode-scan-results', 'id');\n\n  const tableColumns: TableColumn[] = useMemo(() => {\n    return [\n      {\n        accessor: 'instance',\n        title: t`Item`,\n        sortable: false,\n        switchable: false,\n        render: (record) => {\n          if (record.instance) {\n            return (\n              <RenderInstance model={record.model} instance={record.instance} />\n            );\n          } else {\n            return '-';\n          }\n        }\n      },\n      {\n        accessor: 'model',\n        title: t`Model`,\n        sortable: false\n      },\n      {\n        accessor: 'barcode',\n        title: t`Barcode`,\n        sortable: false\n      },\n      {\n        accessor: 'timestamp',\n        title: t`Timestamp`,\n        sortable: false,\n        render: (record) => {\n          return record.timestamp?.toLocaleString();\n        }\n      }\n    ];\n  }, []);\n\n  const rowActions = useCallback((record: BarcodeScanItem) => {\n    const actions: RowAction[] = [];\n\n    if (record.model && record.pk && record.instance) {\n      actions.push(\n        RowViewAction({\n          title: t`View Item`,\n          modelId: record.instance?.pk,\n          modelType: record.model,\n          navigate: navigate,\n          hidden: !user.hasViewPermission(record.model)\n        })\n      );\n    }\n\n    return actions;\n  }, []);\n\n  const tableActions = useMemo(() => {\n    return [\n      <ActionButton\n        disabled={!table.hasSelectedRecords}\n        icon={<IconTrash />}\n        color='red'\n        tooltip={t`Delete selected records`}\n        onClick={() => {\n          onItemsDeleted(table.selectedIds);\n          table.clearSelectedRecords();\n        }}\n      />\n    ];\n  }, [table.hasSelectedRecords, table.selectedIds]);\n\n  useEffect(() => {\n    onItemsSelected(table.selectedIds);\n  }, [table.selectedIds]);\n\n  return (\n    <>\n      <InvenTreeTable\n        tableState={table}\n        tableData={records}\n        columns={tableColumns}\n        props={{\n          enableFilters: false,\n          enableSelection: true,\n          enablePagination: false,\n          enableSearch: false,\n          enableRefresh: false,\n          rowActions: rowActions,\n          tableActions: tableActions\n        }}\n      />\n    </>\n  );\n}\n","import { t } from '@lingui/core/macro';\nimport { Trans } from '@lingui/react/macro';\nimport {\n  ActionIcon,\n  Alert,\n  Divider,\n  Grid,\n  Group,\n  Paper,\n  Space,\n  Stack,\n  Text\n} from '@mantine/core';\nimport { randomId, useListState, useLocalStorage } from '@mantine/hooks';\nimport {\n  IconAlertCircle,\n  IconNumber,\n  IconQuestionMark\n} from '@tabler/icons-react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { ApiEndpoints } from '@lib/enums/ApiEndpoints';\nimport { ModelInformationDict } from '@lib/enums/ModelInformation';\nimport type { ModelType } from '@lib/enums/ModelType';\nimport { apiUrl } from '@lib/functions/Api';\nimport { hideNotification, showNotification } from '@mantine/notifications';\nimport dayjs from 'dayjs';\nimport { api } from '../../App';\nimport { BarcodeInput } from '../../components/barcodes/BarcodeInput';\nimport type { BarcodeScanItem } from '../../components/barcodes/BarcodeScanItem';\nimport { StylishText } from '../../components/items/StylishText';\nimport PageTitle from '../../components/nav/PageTitle';\nimport {\n  notYetImplemented,\n  showApiErrorMessage\n} from '../../functions/notifications';\nimport BarcodeScanTable from '../../tables/general/BarcodeScanTable';\n\nexport default function Scan() {\n  const [history, historyHandlers] = useListState<BarcodeScanItem>([]);\n\n  const [historyStorage, setHistoryStorage] = useLocalStorage<\n    BarcodeScanItem[]\n  >({\n    key: 'scan-history',\n    defaultValue: []\n  });\n\n  const [selection, setSelection] = useState<string[]>([]);\n\n  // Fetch model instance based on scan item\n  const fetchInstance = useCallback(\n    (item: BarcodeScanItem) => {\n      if (!item.model || !item.pk) {\n        return;\n      }\n\n      // Prevent duplicates\n      if (history.find((i) => i.model == item.model && i.pk == item.pk)) {\n        hideNotification('duplicate-barcode');\n\n        showNotification({\n          id: 'duplicate-barcode',\n          title: t`Duplicate`,\n          message: t`Item already scanned`,\n          color: 'orange'\n        });\n        return;\n      }\n\n      const model_info = ModelInformationDict[item.model];\n\n      api\n        .get(apiUrl(model_info.api_endpoint, item.pk))\n        .then((response) => {\n          item.instance = response.data;\n          historyHandlers.append(item);\n        })\n        .catch((error) => {\n          showApiErrorMessage({\n            error: error,\n            title: t`API Error`,\n            message: t`Failed to fetch instance data`\n          });\n        });\n    },\n    [api, history]\n  );\n\n  // Barcode scanning callback function\n  const scanBarcode = useCallback(\n    (barcode: string) => {\n      api\n        .post(apiUrl(ApiEndpoints.barcode), { barcode: barcode })\n        .then((response) => {\n          const data = response?.data ?? {};\n\n          let match = false;\n\n          for (const model_type of Object.keys(ModelInformationDict)) {\n            if (data[model_type]?.pk) {\n              match = true;\n              fetchInstance({\n                id: randomId(),\n                barcode: barcode,\n                data: data,\n                timestamp: dayjs().toDate(),\n                source: 'scan',\n                model: model_type as ModelType,\n                pk: data[model_type]?.pk\n              });\n            }\n          }\n\n          // If no match is found, add an empty result\n          if (!match) {\n            historyHandlers.append({\n              id: randomId(),\n              barcode: barcode,\n              data: data,\n              timestamp: dayjs().toDate(),\n              source: 'scan'\n            });\n          }\n        })\n        .catch((error) => {\n          showApiErrorMessage({\n            error: error,\n            message: t`Failed to scan barcode`,\n            title: t`Scan Error`,\n            field: 'error'\n          });\n        });\n    },\n    [fetchInstance]\n  );\n\n  // save history data to session storage\n  useEffect(() => {\n    if (history.length === 0) return;\n    setHistoryStorage(history);\n  }, [history]);\n\n  // load data from session storage on mount\n  useEffect(() => {\n    historyHandlers.setState(historyStorage);\n  }, [historyStorage]);\n\n  // Items selected for action\n  const selectedItems: BarcodeScanItem[] = useMemo(() => {\n    return history.filter((item) => selection.includes(item.id));\n  }, [selection, history]);\n\n  // selected actions component\n  const SelectedActions = useMemo(() => {\n    const uniqueObjectTypes = new Set(selectedItems.map((item) => item.model));\n\n    if (uniqueObjectTypes.size === 0) {\n      return (\n        <Group gap={0}>\n          <IconQuestionMark color='orange' />\n          <Trans>Selected elements are not known</Trans>\n        </Group>\n      );\n    } else if (uniqueObjectTypes.size > 1) {\n      return (\n        <Group gap={0}>\n          <IconAlertCircle color='orange' />\n          <Trans>Multiple object types selected</Trans>\n        </Group>\n      );\n    }\n\n    return (\n      <>\n        <Text fz='sm' c='dimmed'>\n          <Trans>Actions ... </Trans>\n        </Text>\n        <Group>\n          <ActionIcon\n            onClick={notYetImplemented}\n            title={t`Count`}\n            variant='default'\n          >\n            <IconNumber />\n          </ActionIcon>\n        </Group>\n      </>\n    );\n  }, [selectedItems]);\n\n  return (\n    <>\n      <PageTitle title={t`Barcode Scanning`} />\n      <Group justify='space-between'>\n        <Group justify='left'>\n          <StylishText size='xl'>\n            <Trans>Barcode Scanning</Trans>\n          </StylishText>\n        </Group>\n      </Group>\n      <Space h={'md'} />\n      <Grid maw={'100%'}>\n        <Grid.Col span={4}>\n          <Paper p='sm' shadow='xs'>\n            <Stack gap='xs'>\n              <StylishText size='lg'>{t`Barcode Input`}</StylishText>\n              <Divider />\n              <BarcodeInput onScan={scanBarcode} />\n            </Stack>\n          </Paper>\n          <Paper p='sm' shadow='xs'>\n            <Stack gap='xs'>\n              <StylishText size='lg'>{t`Action`}</StylishText>\n              <Divider />\n              {selection.length === 0 ? (\n                <Alert title={t`No Items Selected`} color='blue'>\n                  <Trans>Scan and select items to perform actions</Trans>\n                </Alert>\n              ) : (\n                <>\n                  <Text>\n                    <Trans>{selection.length} items selected</Trans>\n                  </Text>\n                  {SelectedActions}\n                </>\n              )}\n            </Stack>\n          </Paper>\n        </Grid.Col>\n        <Grid.Col span={8}>\n          <Paper p='sm' shadow='xs'>\n            <Stack gap='xs'>\n              <Group justify='space-between'>\n                <StylishText size='lg'>{t`Scanned Items`}</StylishText>\n              </Group>\n              <Divider />\n              <BarcodeScanTable\n                records={history}\n                onItemsSelected={(ids: string[]) => {\n                  setSelection(ids);\n                }}\n                onItemsDeleted={(ids: string[]) => {\n                  const newHistory = history.filter(\n                    (item) => !ids.includes(item.id)\n                  );\n\n                  historyHandlers.setState(newHistory);\n                  setHistoryStorage(newHistory);\n                }}\n              />\n            </Stack>\n          </Paper>\n        </Grid.Col>\n      </Grid>\n    </>\n  );\n}\n"],"names":["BarcodeScanTable","records","onItemsSelected","onItemsDeleted","navigate","useNavigate","user","useUserState","table","useTable","tableColumns","useMemo","accessor","title","_i18n","_","id","sortable","switchable","render","record","instance","RenderInstance","model","timestamp","toLocaleString","rowActions","useCallback","actions","pk","push","RowViewAction","modelId","modelType","hidden","hasViewPermission","tableActions","jsx","ActionButton","hasSelectedRecords","IconTrash","selectedIds","clearSelectedRecords","useEffect","Fragment","InvenTreeTable","enableFilters","enableSelection","enablePagination","enableSearch","enableRefresh","Scan","history","historyHandlers","useListState","historyStorage","setHistoryStorage","useLocalStorage","key","defaultValue","selection","setSelection","useState","fetchInstance","item","find","i","hideNotification","showNotification","message","color","model_info","ModelInformationDict","api","get","apiUrl","api_endpoint","then","response","data","append","catch","error","showApiErrorMessage","scanBarcode","barcode","post","ApiEndpoints","match","model_type","Object","keys","randomId","dayjs","toDate","source","field","length","setState","selectedItems","filter","includes","SelectedActions","uniqueObjectTypes","Set","map","size","jsxs","Group","IconQuestionMark","_Trans","IconAlertCircle","Text","ActionIcon","notYetImplemented","IconNumber","PageTitle","StylishText","Space","Grid","Paper","Stack","Divider","BarcodeInput","Alert","values","0","ids","newHistory"],"mappings":"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"}